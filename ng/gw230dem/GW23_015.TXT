!short: GWAllVGAColors( ^bGet/set the RGB definitions for all colors                 ^A3FX^A3F
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWAllVGAColors(^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Change the all RGB (Red, Green and Blue) definitions for all colors of a
   VGA system. With this function you can redefine the default PC colors.
   Before using this function you must first enable the color system with
   GWEnableColor(). Before ending the applications you must disable the
   color system with GWDisableColor(). This resets the colors to the
   default PC colors.

 ^bSyntax
   ^bGWAllVGAColor([cColors]) -> cResult

!seealso: "GWEnableColor()" "GWModColor()" 
'------------------------------------------------------------------------------



!short: GWDisableColor( ^bDisable the redefinition of colors                         ^A3FX^A3F
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWDisableColor(^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Disable the redefinition of the colors of a VGA system.

 ^bSyntax
   ^bGWDisableColor() -> NIL

!seealso: "GWEnableColor()" "GWVGAColor()" 
'------------------------------------------------------------------------------



!short: GWEnableColor() ^bEnable the redefinition of colors                          ^A3FX^A3F
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWEnableColor()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Enable the redefinition of the colors of a VGA system. After this
   command the colors can be changed with GWVGAColor(). To disable this
   again use GWDisableColor().

 ^bSyntax
   ^bGWEnableColor() -> lResult

!seealso: "GWDisableColor(" "GWVGAColor()" 
'------------------------------------------------------------------------------



!short: GWEnabled()     ^bCheck if the redefinition of colors is enabled
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWEnabled()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Check if the redefinition of the colors of a VGA system is enabled with
   GWEnableColor().

 ^bSyntax
   ^bGWEnabled() -> lResult

!seealso: "GWEnableColor()" "GWDisableColor(" "GWVGAColor()" 
'------------------------------------------------------------------------------



!short: GWIsCGA()       ^bCheck if CGA adapter is available                          ^A3FX^A3F
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWIsCGA()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Check if CGA adapter is available.

 ^bSyntax
   ^bGWIsCGA() -> lResult

!seealso: "GWVideo()" 
'------------------------------------------------------------------------------



!short: GWIsEGA()       ^bCheck if EGA adapter is available                          ^A3FX^A3F
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWIsEGA()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Check if EGA adapter is available.

 ^bSyntax
   ^bGWIsEGA() -> lResult

!seealso: "GWVideo()" 
'------------------------------------------------------------------------------



!short: GWIsMono()      ^bCheck if monochroom adapter is available                   ^A3FX^A3F
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWIsMono()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Check if monochroom adapter is available.

 ^bSyntax
   ^bGWIsMono() -> lResult

!seealso: "GWVideo()" 
'------------------------------------------------------------------------------



!short: GWIsVGA()       ^bCheck if VGA adapter is available                          ^A3FX^A3F
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWIsVGA()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Check if VGA adapter is available.

 ^bSyntax
   ^bGWIsVGA() -> lResult

!seealso: "GWVideo()" 
'------------------------------------------------------------------------------



!short: GWLoadFont()    ^bLoad 1 or more character designs into a font block         ^A3FX^A3F
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWLoadFont()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Load 1 or more character designs into a font block. This function makes
   it possible to change the shape of any character. This way you can make
   your screens more attractive; you can design special characters or
   icons.

 ^bSyntax
   ^bGWLoadFont(cFont, [nStartFont], [nBlock]) -> NIL

!seealso: "GWMakeChar()" "GWResetFont()" "GWScanLines()" "GWUseFonts()" 
'------------------------------------------------------------------------------



!short: GWMakeChar()    ^bMake a character string for GWLoadFont()
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWMakeChar()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Make a character string for GWLoadFont() based on a design that is
   supplied as an array.

 ^bSyntax
   ^bGWMakeChar(aFont) -> cResult

!seealso: "GWLoadFont()" "GWScanLines()" 
'------------------------------------------------------------------------------



!short: GWModColor()    ^bModify the 16 VGA colors interactively                     ^A3FX^A3F
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWModColor()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Modify the RGB (Red, Green and Blue) definitions for the 16 colors of a
   VGA system. Before using this function you must first enable the color
   system with GWEnableColor().
   The colors can be modified with the cursor keys. If you press the F4 key
   the current (modified) colors are saved in Clipper format to a file
   named GWCOLOR.xxx (xxx=sequence number). The file is a piece of Clipper
   code that can be inserted in your application. Just try it.
   Also see the sample program GW_DEMO.PRG.

 ^bSyntax
   ^bGWModColor() -> NIL

!seealso: "GWAllVGAColors(" "GWEnableColor()" 
'------------------------------------------------------------------------------



!short: GWReadFont()    ^bRead a font file and load it in a block                    ^A3FX^A3F
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWReadFont()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Read a font file and load it into a block, if it can be found and so on.

 ^bSyntax
   ^bGWReadFont(cFile, [nBlock]) -> nResult

!seealso: "GWLoadFont()" "GWUseFonts()" "GWUseSpecial()" 
'------------------------------------------------------------------------------



!short: GWResetFont()   ^bReset the redefined font to default PC font                ^A3FX^A3F
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWResetFont()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Reset the redefined font to the default PC font. This way the changed
   characters are reset to their original shape.

 ^bSyntax
   ^bGWResetFont() -> NIL

!seealso: "GWLoadFont()" "GWMakeChar()" 
'------------------------------------------------------------------------------



!short: GWScanLines()   ^bDetermine the number of scanlines per character            ^A3FX^A3F
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWScanLines()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Determine the number of scanlines per character. This is the number of
   lines that are necessary to make up a character on the screen. EGA
   characters have 14 scanlines, VGA have 16 scanlines.

 ^bSyntax
   ^bGWScanLines() -> nResult

!seealso: "GWMakeChar()" "GWLoadFont()" 
'------------------------------------------------------------------------------



!short: GWUseFonts()    ^bDefine which font blocks should be used                    ^A3FX^A3F
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWUseFonts()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Define which font blocks should be used. This makes it possible to load
   512 characters into 2 block. The 'nNormalBlock' is used for characters
   are displayed on the screen with 'normal' attributes (color string
   without the '+'). The 'nBrightBlock' is used for characters are
   displayed on the screen with bright attributes (color string with the
   '+'). By default both values are 0, so for normal and bright characters
   the used block is the same. If you want to use another block for one or
   the other you must first load a font in that block with the function
   GWLoadFont().

 ^bSyntax
   ^bGWUseFonts([nNormalBlock], [nBrightBlock]) -> NIL

!seealso: "GWLoadFont()" 
'------------------------------------------------------------------------------



!short: GWUseSpecial()  ^bGet/set the usage of the GhostWare special character set   ^A3FX^A3F^A4FM
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWUseSpecial()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Get/set the usage of the GhostWare special character set. The usage is
   completely transparant for the programmer (you) and the user. If you
   turn the usage on, all the user interface functions will automatically
   use the special font. Also see the demo program GW_DEMO.PRG.

 ^bSyntax
   ^bGWUseSpecial([lSpecial]) -> lResult
     or
   ^bSET GRAPH ON|OFF

!seealso: gw23_010.ngo:"GWAsk()" "GWReadFont()" 
'------------------------------------------------------------------------------



!short: GWVGAColor()    ^bGet/set the RGB definitions for a color                    ^A3FX^A3F
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWVGAColor()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Change a RGB (Red, Green and Blue) definition for a color of a VGA
   system. With this function you can redefine a default PC color. Before
   using this function you must first enable the color system with
   GWEnableColor(). Before ending the applications you must disable the
   color system with GWDisableColor(). This resets the colors to the
   default PC colors.

 ^bSyntax
   ^bGWVGAColor(xColor, [aColors]) -> aResult

!seealso: "GWEnableColor()" 
'------------------------------------------------------------------------------



!short: GWVideo()       ^bCheck which video adapter is available                     ^A3FX^A3F
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWVideo()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Check which video adapter is available.

 ^bSyntax
   ^bGWVideoAdapter() -> nResult

!seealso: "GWIsCGA()" "GWIsEGA()" "GWIsMono()" "GWIsVGA()" 
'------------------------------------------------------------------------------



!short: SET GRAPH ...   ^bSet the usage of the GhostWare special character set       ^A3FX^A3F^A2FN
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1ESET GRAPH ...^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Set the usage of the GhostWare special character set.

 ^bSyntax
   ^bSET GRAPH ON|OFF
!seealso: "GWUseSpecial()" 
'------------------------------------------------------------------------------



