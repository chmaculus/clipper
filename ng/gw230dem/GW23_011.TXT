!short: GWBrowseArray() ^bBrowse a 2 dimensional array                                ^A4FM
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWBrowseArray()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Browse a 2 dimensional array.
   Rows can be marked (with Spacebar) and a print can be made.
   (see also HELP after F1-key is pressed)

 ^bSyntax
   ^bGWBrowseArray([nTop], [nLeft], [nBottom], [nRight], aInfo,
      ^b[aColTitles], [nFreezeCol], [cColors], [lLineInd], [lSliderVert],
      ^b[lSliderHor], [lEnterIsChoice], [lTag], [lSpecial], [lPrint],
      ^b[lRestore], [lStableBlock], [lHelpLine], [aSeparators], [aKeys])
      ^b-> aResult
          or

   ^b#INCLUDE "GHOST.CH"
   ^bGWARRBROWSE                            (or ARRBROWSE)
   ^b  [AT <nTop>,<nLeft>,<nBottom>,<nRight>]
   ^b  ARRAY <aInfo>
   ^b  [VAR <aResult>]
   ^b  [TITLES <aColTitles>]
   ^b  [FREEZE <nFreezeCol>]
   ^b  [COLOR <cColors>]
   ^b  [COUNTER]
   ^b  [VERTICAL]
   ^b  [HORIZONTAL]
   ^b  [ENTERISCHOICE]
   ^b  [TAG]
   ^b  [SPECIAL]
   ^b  [PRINT]
   ^b  [RESTORE]
   ^b  [STABLEBLOCK <bStableBlock>]
   ^b  [HELPLINE]
   ^b  [SEPARATORS <aSeparators>]
   ^b  [KEYS <aKeys>]

!seealso: 
'------------------------------------------------------------------------------



!short: GWBrowseText()  ^bBrowse through an ASCII-file
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWBrowseText()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Browse through an ASCII textfile.

 ^bSyntax
   ^bGWBrowseText(cFile, [nTop], [nLeft], [nBottom], [nRight], [cColor],
     ^b[lLineNum], [lSpecial], [lPrintMag], [lRestore]) -> NIL
         or
   ^b#INCLUDE "GHOST.CH"
   ^bGWTXTBROWSE                                (or TXTBROWSE)
   ^b  FILE <cFile>
   ^b  [AT <nTop>,<nLeft>,<nBottom>,<nRight>]
   ^b  [COLOR <cColor>]
   ^b  [LINENUM]
   ^b  [SPECIAL]
   ^b  [PRINT]
   ^b  [RESTORE]

!seealso: 
'------------------------------------------------------------------------------



!short: GWCrLf()        ^bReturns a Carriage Return and Line Feed
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWCrLf()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Returns a Carriage Return and Line Feed string. This string can be added
   to a string that will be displayed with the functions MESSAGE() and
   GWAsk(). This way it is possible to display parts of the messages on the
   next line.

 ^bSyntax
   ^bGWCrLf() Ä> cResult

!seealso: gw23_010.ngo:"GWAsk()" gw23_014.ngo:"GWMessage()" 
'------------------------------------------------------------------------------



!short: GWDelay()       ^bWait for certain time period
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWDelay()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Wait for certain time period before continuing with your program. The
   number of seconds can de given in decimals, e.g. 2.5 seconds.

 ^bSyntax
   ^bGWDelay([nSeconds]) Ä> NIL

!seealso: 
'------------------------------------------------------------------------------



!short: GWFakeKey()     ^bChange the action of a key
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWFakeKey()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Change the action of a key. If you for example don't want the user to
   exit a GETLIST with the PaGeDowN key you can change it's action into
   ENTER.

 ^bSyntax
   ^bGWFakeKey(nKey, nNewKey) Ä> bResult
   ^b .
   ^b .
   ^bSETKEY(nKey, NIL) or SETKEY(nKey, bResult)

!seealso: 
'------------------------------------------------------------------------------



!short: GWHelp()        ^bActivate a helpsystem
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWHelp()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   With this function help messages for GET-fields can be made. To make
   help messages a environment variable must be available. You can do this
   with the DOS command ^bSET GWHELP=.T.^b. After this when the F1-key is
   pressed the new help files (GWHELP.DBF, .NTX en .DBT) are created and
   the help message can be made in a small window. After typing in all help
   messages the environment variable must be eliminated with the DOS
   command ^bSET GWHELP=^b.

 ^bSyntax
   ^bGWHelp(cFunction, nLine, cGetName, [nKey]) Ä> NIL

   in combination with the SETKEY-function :
         ^b#INCLUDE 'INKEY.CH'
         ^bSETKEY( K_F1, {|cFunction, nLine, cGetName| GWHelp(cFunction,
         ^bnLine, cGetName, K_F1) } )

!seealso: "GWWaitKey()" 
'------------------------------------------------------------------------------



!short: GWKeyboard()    ^bStuff a key value into the keyboard buffer
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWKeyboard()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Stuff a key value into the keyboard buffer.

 ^bSyntax
   ^bGWKeyboard(nKey) Ä> NIL

!seealso: 
'------------------------------------------------------------------------------



!short: GWMemoDisplay() ^bDisplay a long character string/memo field                  ^A4FM
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWMemoDisplay()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Display a long character string/memo field in a window. The string is
   only displayed, so no editing can be done. Also scrolling up and down is
   not possible. Only the first few lines of the string are displayed; if
   the string is bigger than the capacity of the window, the rest is not
   displayed.

 ^bSyntax
   ^bGWMemoDisplay([cString], [nTop], [nLeft], [nBottom], [nRight],
   ^b              [cTitle], [cColor], [lSave]) -> aResult

!seealso: 
'------------------------------------------------------------------------------



!short: GWMemoEdit()    ^bDisplay or edit character strings and memo fields
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWMemoEdit()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   GWMemoEdit() is a user-interface and general purpose text editing
   function that can be used to edit memo fields and long character
   strings.  Editing occurs within a specified window region placed
   anywhere on the screen.

 ^bSyntax
   ^bGWMemoEdit([cString], [nTop], [nLeft], [nBottom], [nRight],
   ^b           [lEditMode], [cTitle], [cUserFunction], [nLineLength],
   ^b           [nTabSize],  [nTextBufferRow], [nTextBufferColumn],
   ^b           [nWindowRow],[nWindowColumn]) -> cResult

!seealso: 
'------------------------------------------------------------------------------



!short: GWMusic()       ^bPlay some tones
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWMusic()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Play some tones. e.g. if the user makes a mistake or something is
   finished.

 ^bSyntax
   ^bGWMusic(nTone) Ä> NIL

!seealso: 
'------------------------------------------------------------------------------



!short: GWPassword()    ^bAsk an user for a password                                  ^A5FO
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWPassword()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Ask an user for a password. This password isn't displayed on the screen.

 ^bSyntax
   ^bGWPassword([nMaxLen], [cChars], [cColors]) Ä> cResult

!seealso: 
'------------------------------------------------------------------------------



!short: GWRandom()      ^bGenerates a random number
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWRandom()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Generates a random number.

 ^bSyntax
   ^bGWRandom() Ä> nResult

!seealso: 
'------------------------------------------------------------------------------



!short: GWSpeed()       ^bDetermine the relative speed of the computer
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWSpeed()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Determine the relative speed of the computer on which the application is
   executed. This useful when you want to adjust the speed of your
   application for different machines. The functions GWExplode() and
   GWImplode() use this function to let the ex- and implosion act the same
   on different machines.

 ^bSyntax
   ^bGWSpeed() Ä> nResult

!seealso: gw23_014.ngo:"GWExplode()" 
'------------------------------------------------------------------------------



!short: GWTrace()       ^bCreate or view an array with the program's call stack
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWTrace()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Create or view an array with the program's call stack. This is very
   useful during application development. If assigned to a key (with
   SETKEY) you can constantly monitor the program's call stack.

 ^bSyntax
   ^bGWTrace([lBrowse]) -> aResult
   or
   ^bSETKEY(<nKey>, {|| aResult := GWTrace([lBrowse]) })

!seealso: 
'------------------------------------------------------------------------------



!short: GWVarExist()    ^bCheck if a variable exists
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWVarExist()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Check if a variable exists. This is very useful when you restore a
   MEM-file and your application uses the variables from this MEM-file.
   With GWVarExist you can check if all the variables are there and if not
   initialize them yourself.

 ^bSyntax
   ^bGWVarExist(bVar) Ä> lResult

!seealso: 
'------------------------------------------------------------------------------



!short: GWWaitKey()     ^bReplacement for INKEY(), respond also on SETKEY()
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWWaitKey()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Replacement for INKEY() that also respond on SETKEY() redefines.

 ^bSyntax
   ^bGWWaitKey([nWaitTime], [bFunc], [nSeconds]) Ä> nResult

!seealso: "GWHelp()" gw23_014.ngo:"GWScreenSavers" 
'------------------------------------------------------------------------------



!short: GWaSearch()     ^bSearch for a value in a column of a 2 dimensional array     ^A4FM
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWaSearch()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Search for a value in a column of a 2 dimensional array.

 ^bSyntax
   ^bGWaSearch(aArray, nColumn, xVar) Ä> nResult

!seealso: 
'------------------------------------------------------------------------------



