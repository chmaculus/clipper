!short: GWAJoin()       ^bJoin 2 arrays of the same dimension
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWAJoin()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Join 2 arrays of the same dimension.

 ^bSyntax
   ^bGWAJoin(aArray1, aArray2) Ä> aResult

!seealso: 
'------------------------------------------------------------------------------



!short: GWAddM2Date()   ^bAdd a number of months to a date
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWAddM2Date()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Adds a number of months to a date.

 ^bSyntax
   ^bGWAddM2Date([dDate], [nMonths]) Ä> dResult

!seealso: "GWAddY2Date()" 
'------------------------------------------------------------------------------



!short: GWAddY2Date()   ^bAdd a number of years to a date
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWAddY2Date()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Adds a number of years to a date.

 ^bSyntax
   ^bGWAddY2Date([dDate], [nYears]) Ä> dResult

!seealso: "GWAddM2Date()" 
'------------------------------------------------------------------------------



!short: GWArray2String( ^bConvert an array to a delimited string
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWArray2String(^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Convert an array to a delimited string.

 ^bSyntax
   ^bGWArray2String(aArray, [cDelimiter]) Ä> cResult

!seealso: "GWString2Array(" 
'------------------------------------------------------------------------------



!short: GWBoM()         ^bReturn the beginning date of a month
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWBoM()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Return the beginning date of a month.

 ^bSyntax
   ^bGWBoM([dDate]) -> dResult

!seealso: 
'------------------------------------------------------------------------------



!short: GWDate2Week()   ^bCalculate the week number of a date
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWDate2Week()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Calculate the week number of a given date.

 ^bSyntax
   ^bGWDate2Week([dDate]) Ä> nResult

!seealso: "GWWeek2Date()" 
'------------------------------------------------------------------------------



!short: GWDec2Base()    ^bConver a BASE 10 number to any base
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWDec2Base()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Convert a BASE 10 number to another base. This can be any base from 2
   upto 53.

 ^bSyntax
   ^bGWDec2Base(nNumber, nBase) Ä> cResult

!seealso: 
'------------------------------------------------------------------------------



!short: GWDecrypt()     ^bDecrypt an encrypted string
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWDecrypt()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Decrypt a string that was encrypted with the function GWEncrypt().

 ^bSyntax
   ^bGWDecrypt(cString, cKey) Ä> cResult

!seealso: "GWEncrypt()" 
'------------------------------------------------------------------------------



!short: GWEncrypt()     ^bEncrypt a string
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWEncrypt()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Encrypt a string that can be decrypted with the function GWDecrypt().

 ^bSyntax
   ^bGWEncrypt(cString, cKey) Ä> cResult

!seealso: "GWDecrypt()" 
'------------------------------------------------------------------------------



!short: GWExpandString( ^bExpand a string with a number of characters
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWExpandString(^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Expand a string with a number of characters. The characters will be
   placed between all original characters.

 ^bSyntax
   ^bGWExpandString(cString,[cChars]) Ä> cResult

!seealso: 
'------------------------------------------------------------------------------



!short: GWIsLeapYear()  ^bCheck if a year is a leap year
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWIsLeapYear()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Check if the year (of a date) is a leap year.

 ^bSyntax
   ^bGWIsLeapYear(xInput) -> lResult

!seealso: 
'------------------------------------------------------------------------------



!short: GWIsNumeric()   ^bDetermine if a string contains only numeric characters
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWIsNumeric()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Determine if a string contains only numeric characters. If the string is
   completely numeric you can use VAL() to make it numeric. Characters that
   are recognized as numeric : '1234567890. -+'

 ^bSyntax
   ^bGWIsNumeric(cString) Ä> lResult

!seealso: 
'------------------------------------------------------------------------------



!short: GWNedAmount()   ^bConvert a numeric value into a Dutch amount string
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWNedAmount()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Converts a numeric value into a Dutch amount string, with points between
   thousands, a decimal comma and the currency symbol 'fl'.

 ^bSyntax
   ^bGWNedAmount([nAmount], [nLength], [nDecimals]) Ä> cResult

!seealso: 
'------------------------------------------------------------------------------



!short: GWNedDate()     ^bConvert a date into a Dutch date string
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWNedDate()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Converts a date into a Dutch date string. The month is displayed as text
   of <nMonthLength> characters.

 ^bSyntax
   ^bGWNedDate([dDate], [nMonthLength], [lJustify]) Ä> cResult

!seealso: 
'------------------------------------------------------------------------------



!short: GWNedPercent()  ^bConvert a numeric value into a Dutch percentage string
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWNedPercent()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Converts a numeric value into a Dutch percentage string with points
   between thousands, a decimal comma and '%' at the end.

 ^bSyntax
   ^bGWNedPercent([nPerc], [nLength], [nDecimals]) Ä> cResult

!seealso: 
'------------------------------------------------------------------------------



!short: GWPeriod()      ^bCalculate several figures for 2 dates
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWPeriod()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Calculate several period figures for 2 dates.

 ^bSyntax
   ^bGWPeriod([dBegin], [dEnd]) Ä> aResult

!seealso: 
'------------------------------------------------------------------------------



!short: GWStrTran()     ^bTranslate delimited string parts
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWStrTran()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Search and replace one or more a delimited parts of a string with
   another string. The original string may contain more than one delimited
   string part.

 ^bSyntax
   ^bGWStrTran(cInString, aTrans, [cDelimeter]) -> cResult

!seealso: 
'------------------------------------------------------------------------------



!short: GWString2Array( ^bConvert a delimited string to an array
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWString2Array(^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Converts a delimited string to an array.

 ^bSyntax
   ^bGWString2Array(cString, [cDelimiter]) Ä> aResult

!seealso: "GWArray2String(" 
'------------------------------------------------------------------------------



!short: GWUnique()      ^bCalculate a unique name based on date and time
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWUnique()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Calculate a unique 'name' based on the current date and time. This
   'name' is up to 8 characters long. This 'name' can be used as a unique
   name for a temporary file.

 ^bSyntax
   ^bGWUnique() Ä> cResult

!seealso: 
'------------------------------------------------------------------------------



!short: GWWeek2Date()   ^bCalculate the date of the monday of the given week
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWWeek2Date()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Calculate the date of the monday of the give week.

 ^bSyntax
   ^bGWWeek2Date([nWeek], [nYear]) Ä> dResult

!seealso: "GWDate2Week()" 
'------------------------------------------------------------------------------



!short: GWWorkdays()    ^bCalculate the number of working days between 2 dates
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWWorkdays()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Determine the number of workingdays between two dates.

 ^bSyntax
   ^bGWWorkDays(dStart, dEnd) -> nResult

!seealso: 
'------------------------------------------------------------------------------



