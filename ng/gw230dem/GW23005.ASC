!Short: GWAddRec()      ^bNetwork version of append blank
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWAddRec()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Network version of APPEND BLANK.
   Append a record to the active file. If the append fails then the
   function retries to append a record for <nWaitSeconds>. If the append is
   successful than the new record will be locked.

 ^bSyntax
   ^bGWAddRec([nWaitSeconds]) Ä> lResult

!Seealso:"GWFileLock()"  "GWNetUse()"  "GWRecLock()"  
!Short: GWArray2DBF()   ^bCreate a DBF from an array                                  ^A2FN
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWArray2DBF()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Create a DBF from a 2 dimensional array. The array must look like a
   DBF-file. This means that the array must contains arrays of the same
   length and the types of each column must be the same, e.g.
   {{"Text 1", 1.2, .T.}, {"Text 2", 2.34, .F.}}. The file created will
   have this structure :
   FIELD TYPE      LENGTH DECIMALS
   ----- --------- ------ --------
   F1    CHARACTER    6       0
   F2    NUMERIC     10       2
   F3    LOGICAL      1       0

   If the types in a column differ then the values of data in that column
   are converted to character.

 ^bSyntax
   ^bGWArray2DBF(aData, cFile, [aFields]) -> lResult

!Short: GWBrowseDBF()   ^bBrowse one or more files with TBROWSE class                 ^A4FM
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWBrowseDBF()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Browse a file with TBROWSE-class.
   The file can be edited and printed, if the user is allowed to do this.

 ^bSyntax
   ^bGWBrowseDBF([nTop], [nLeft], [nBottom], [nRight], aFields,
     ^b[aFieldTitles], [nFreezeCol], [lEdit], [lDel], [lAdd], [cColors],
     ^b[lRecIndicator], [lSlidervert], [lSliderhor], [lEnterIsChoice],
     ^b[bEditFunction], [aSynchroWindow], [lSpecial], [lSpaceEdit],
     ^b[lPrint], [aKeys], [lRestore], [lStableBlock], [lHelpLine],
     ^b[aSeparators], [lNoConfirm]) -> lResult
         or
   ^b#INCLUDE 'GHOST.CH'
   ^bGWDBFBROWSE                             (or DBFBROWSE)
     ^b[AT <nTop>, <nLeft>, <nBottom>, <nRight>]
     ^b[FIELDS <aFields>]
     ^b[TITLES <aFieldtitles>]
     ^b[FREEZE <nFreezeCol>]
     ^b[EDIT]
     ^b[DEL]
     ^b[ADD]
     ^b[COLOR <cColors>]
     ^b[COUNTER]
     ^b[VERTICAL]
     ^b[HORIZONTAL]
     ^b[ENTERISCHOICE]
     ^b[FUNCTION <bEditfunction>]
     ^b[[SAT <nSWtop>, <nSWleft>, <nSWbottom>, <nSWright>]
     ^b [SFIELDS <aSWfields>]
     ^b [STITLES <aSWfieldtitles>] ]
     ^b[SPECIAL]
     ^b[SPACEEDIT]
     ^b[PRINT]
     ^b[KEYS <aKeys>]
     ^b[RESTORE]
     ^b[STABLEBLOCK <bStableBlock>]
     ^b[HELPLINE]
     ^b[SEPARATORS <aSeparators>]
     ^b[NOCONFIRM]

!Short: GWDBF2Array()   ^bWrite the contents of 1 or more DBF's to an array
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWDBF2Array()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Write the contents of one or more related DBFs to an array. The
   resulting 2 dimensional array can be browsed with GWBrowseArray().

 ^bSyntax
   ^bGWDBF2Array(aFields) Ä> aResult

!Seealso:GW23011.NGO:"GWBrowseArray()"  
!Short: GWDBStruct()    ^bCreate an array containing the structure of all open DBF's
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWDBStruct()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Create an array containing the structure of all open DBFs.

 ^bSyntax
   ^bGWDBStruct([nMaxWorkArea]) Ä> aResult

!Seealso:GW23011.NGO:"GWBrowseArray()"  
!Short: GWFileLock()    ^bLock a file on a network
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWFileLock()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Lock a file on a network. If the lock fails then the function retries to
   lock the file for <nWaitSeconds>.

 ^bSyntax
   ^bGWFileLock([nWaitSeconds]) Ä> lResult

!Seealso:"GWAddRec()"  "GWNetUse()"  "GWRecLock()"  
!Short: GWNetUse()      ^bOpen a file on a network                                    ^A4FM
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWNetUse()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Open a file on a network. If opening fails then the function retries to
   open the file for <nWaitSeconds>.

 ^bSyntax
   ^bGWNetUse(cDatabase,[cIndex],[cOpenMode],[cNew],[nWaitSeconds],
   ^b         [cAlias], [cDriver]) Ä> lResult

!Seealso:"GWAddRec()"  "GWFileLock()"  "GWRecLock()"  
!Short: GWOpenDBF()     ^bShow a browse with information of all open DBF's
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWOpenDBF()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Show a browse with information of all open DBF's. This is very useful
   during application development. If assigned to a key (with SETKEY) you
   can constantly monitor which database and index files are open.
   ^uWorks only with Clipper 5.2 !

 ^bSyntax
   ^bGWOpenDBF([lBrowse]) -> aResult
     or
   ^bSETKEY(<nKey>, {|| aResult := GWOpenDBF([lBrowse]) })

!Short: GWRecLock()     ^bLock a record on a network
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWRecLock()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Lock a record in a file on a network. If the lock fails then the
   function retries to lock the record for <nWaitSeconds>.

 ^bSyntax
   ^bGWRecLock([nWaitSeconds]) Ä> lResult

!Seealso:"GWAddRec()"  "GWFileLock()"  "GWNetUse()"  
!Short: STATISTIC ...   ^bSimple statistic commands                                   ^A2FN
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1ESTATISTIC ...^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Perform some simple statistic calculations on the data in a database.
   You can set breakpoints for which totals of numeric fields can be
   calculated and for which the number of records can be determined. An
   overall total can be calculated too. The results are placed in a
   separate file.

 ^bSyntax
   // Initialize the statistic system
   ^bSTATISTIC [TO] FILE cFile BREAK [ON] cBreak [INDEX]

   // Add columns with the data of the breakpoints
   ^bSTATISTIC LABEL cLabel TO cField

   // Add a column for the number of records per breakpoint
   ^bSTATISTIC COUNT TO cField               ;
   ^b          [LENGTH nLength[, nDecimals]] ;
   ^b          [FOR cExpression]

   // Add a column for the totals of a field per breakpoint
   ^bSTATISTIC SUM cSum TO cField            ;
   ^b          [LENGTH nLength[, nDecimals]] ;
   ^b          [FOR cExpression]

   // Perform the statistic calculations and fill the statistic file
   ^bSTATISTIC GO [or EXECUTE]      ;
   ^b          [TOTALS]             ;
   ^b          [COUNTER]            ;
   ^b          [FUNCTION cFunction]

