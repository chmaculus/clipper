!short: ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
'------------------------------------------------------------------------------
 ^A3E What did you expect to see here? ^A3E
!seealso: 
'------------------------------------------------------------------------------



!short: ^A1F³  ^A1EColor functions                         ^A10  ³^A10
'------------------------------------------------------------------------------
 ^A5F This screen is left blank intentionally... ^A5F
!seealso: 
'------------------------------------------------------------------------------



!short: ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
'------------------------------------------------------------------------------
 ^A4E Press every key to continue... ^A4E
!seealso: 
'------------------------------------------------------------------------------



!short: GWBorder()      ^bGet/set the border color
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWBorder()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Get/set the border color. If a new color is supplied this will be used
   for subsequent screen painting. The current color setting is returned as
   a character string.

 ^bSyntax
   ^bGWBorder([cColor]) Ä> cResult

!seealso: "GWEnhanced()" "GWStandard()" "GWUnselected()" 
'------------------------------------------------------------------------------



!short: GWChangeColor() ^bChoose a color with cursor keys of a mouse
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWChangeColor()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Choose a color with the cursor keys or a mouse.
   On the screen a window is displayed in which the user can move a cursor
   with the cursor keys or with a mouse. If the desired color is found the
   user can press the ENTER key or the left mouse button. The chosen color
   string is returned. If the ESCAPE key or the right button is pressed the
   default color string is returned.

 ^bSyntax
   ^bGWChangeColor([cText], [nTop], [nLeft], [cDefColor]) Ä> cResult

!seealso: 
'------------------------------------------------------------------------------



!short: GWColor2Num()   ^bConvert a color string into a numeric value
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWColor2Num()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Convert a color string into a numeric value. This value is the same as
   the attribute byte of a character on the screen.

 ^bSyntax
   ^bGWColor2Num(cColor) Ä> nResult

!seealso: "GWNum2Color()" 
'------------------------------------------------------------------------------



!short: GWEnhanced()    ^bGet/set the enhanced color
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWEnhanced()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Get/set the enhanced color. If a new color is supplied this will be used
   for subsequent screen painting. The current color setting is returned as
   a character string.

 ^bSyntax
   ^bGWEnhanced([cColor]) Ä> cResult

!seealso: "GWBorder()" "GWSplitColor()" "GWStandard()" "GWUnselected()" 
'------------------------------------------------------------------------------



!short: GWNum2Color()   ^bConvert a numeric value into a color string
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWNum2Color()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Convert a numeric value into a color string. This numeric value is the
   same as the attribute byte of a character on the screen.

 ^bSyntax
   ^bGWNum2Color(nColor) Ä> cResult

!seealso: "GWColor2Num()" 
'------------------------------------------------------------------------------



!short: GWSplitColor()  ^bSplit a color string into 5 seperate colors strings
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWSplitColor()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Split a color string into 5 seperate color strings.

 ^bSyntax
   ^bGWSplitColor([cColor]) Ä> aResult

!seealso: "GWBorder()" "GWEnhanced()" "GWStandard()" "GWUnselected()" 
'------------------------------------------------------------------------------



!short: GWStandard()    ^bSet/get the standard color
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWStandard()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Get/set the standard color. If a new color is supplied this will be used
   for subsequent screen painting. The current color setting is returned as
   a character string.

 ^bSyntax
   ^bGWStandard([cColor]) Ä> cResult

!seealso: "GWBorder()" "GWEnhanced()" "GWSplitColor()" "GWUnselected()" 
'------------------------------------------------------------------------------



!short: GWUnselected()  ^bGet/set the unselected color
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWUnselected()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Get/set the unselected color. If a new color is supplied this will be
   used for subsequent screen painting. The current color setting is
   returned as a character string.

 ^bSyntax
   ^bGWUnselected([cColor]) Ä> cResult

!seealso: "GWBorder()" "GWEnhanced()" "GWSplitColor()" "GWStandard()" 
'------------------------------------------------------------------------------



!short: GWcActive()     ^bCheck if the GhostWare Color System is activated
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWcActive()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Check if the GhostWare color system is activated.

 ^bSyntax
   ^bGWcActive() Ä> lResult

!seealso: "GWcInit()" 
'------------------------------------------------------------------------------



!short: GWcArray()      ^bSave and restore the GhostWare Color System array
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWcArray()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Save and restore the GhostWare color system array. This way the color
   array can be saved for later use, for example in a database. The array
   can be restored to the GhostWare color system too. This makes it
   possible to save a color setting for each user to a file.

 ^bSyntax
   ^bGWcArray([aColor]) Ä> aResult

!seealso: "GWcDefine()" 
'------------------------------------------------------------------------------



!short: GWcChange()     ^bChange a color from the GhostWare Color System
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWcChange()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Change a color from the GhostWare color system.
   On the screen a window is displayed in which the user can move a cursor
   with the cursor keys or with a mouse. If the desired color is found the
   user can press the ENTER key or the left mouse button. The changed color
   will be saved in the GhostWare color system array. If the ESCAPE key or
   the right button the color setting will not be changed.
   PS. This function uses GWChangeColor().

 ^bSyntax
   ^bGWcChange(cShortName) Ä> cResult

!seealso: 
'------------------------------------------------------------------------------



!short: GWcDefine()     ^bDefine a color in the GhostWare Color System
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWcDefine()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Define a color in the GhostWare color system. The color setting is
   stored for later use.

 ^bSyntax
   ^bGWcDefine(cShortName, [cColor], [cLongText]) Ä> cResult or NIL

!seealso: "GWcInit()" 
'------------------------------------------------------------------------------



!short: GWcDelete()     ^bDelete a color from the GhostWare Color System
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWcDelete()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bSyntax
   ^bGWcDelete(cShortName) Ä> lResult

!seealso: "GWcDefine()" 
'------------------------------------------------------------------------------



!short: GWcExist()      ^bCheck if a color exists in the GhostWare Color System array
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWcExist()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Check if a color exists in the GhostWare color system array.

 ^bSyntax
   ^bGWcExist(cShortName) Ä> lResult

!seealso: 
'------------------------------------------------------------------------------



!short: GWcInit()       ^bInitialize the GhostWare Color System
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWcInit()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Initialize the GhostWare color system. The color setting will be saved
   in a STATIC array.
   GhostWare Color system array contains arrays with following elements:
     [1] - Short name
     [2] - Color string
     [3] - Long name (max. 36 characters)

 ^bSyntax
   ^bGWcInit() Ä> NIL

!seealso: "GWcActive()" "GWcDefine()" 
'------------------------------------------------------------------------------



!short: GWcKill()       ^bEmpty the GhostWare Color System array
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWcKill()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Empty the GhostWare color system array.

 ^bSyntax
   ^bGWcKill() Ä> aResult

!seealso: "GWcDefine()" 
'------------------------------------------------------------------------------



!short: GWcSetColor()   ^bSet the colors using the GhostWare Color System
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWcSetColor()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Set the colors for subsequent screen painting using the GhostWare color
   system.

 ^bSyntax
   ^bGWcSetColor(cColors) Ä> cResult

!seealso: "GWcDefine()" "GWcInit()" "GWcString()" 
'------------------------------------------------------------------------------



!short: GWcString()     ^bCompose a color string to be used in function calls
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWcString()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Compose a color string to be used in function calls, e.g. GWAsk(),
   SETCOLOR() and so on.

 ^bSyntax
   ^bGWcString(cColors) Ä> cResult

!seealso: "GWcDefine()" "GWcInit()" "GWcSetColor()" 
'------------------------------------------------------------------------------



!short: ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
'------------------------------------------------------------------------------
 ^A3E What did you expect to see here? ^A3E
!seealso: 
'------------------------------------------------------------------------------



!short: ^A1F³  ^A1EConversion functions                    ^A10  ³^A10
'------------------------------------------------------------------------------
 ^A5F This screen is left blank intentionally... ^A5F
!seealso: 
'------------------------------------------------------------------------------



!short: ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
'------------------------------------------------------------------------------
 ^A4E Press every key to continue... ^A4E
!seealso: 
'------------------------------------------------------------------------------



!short: GWAJoin()       ^bJoin 2 arrays of the same dimension
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWAJoin()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Join 2 arrays of the same dimension.

 ^bSyntax
   ^bGWAJoin(aArray1, aArray2) Ä> aResult

!seealso: 
'------------------------------------------------------------------------------



!short: GWAddM2Date()   ^bAdd a number of months to a date
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWAddM2Date()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Adds a number of months to a date.

 ^bSyntax
   ^bGWAddM2Date([dDate], [nMonths]) Ä> dResult

!seealso: "GWAddY2Date()" 
'------------------------------------------------------------------------------



!short: GWAddY2Date()   ^bAdd a number of years to a date
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWAddY2Date()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Adds a number of years to a date.

 ^bSyntax
   ^bGWAddY2Date([dDate], [nYears]) Ä> dResult

!seealso: "GWAddM2Date()" 
'------------------------------------------------------------------------------



!short: GWArray2String( ^bConvert an array to a delimited string
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWArray2String(^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Convert an array to a delimited string.

 ^bSyntax
   ^bGWArray2String(aArray, [cDelimiter]) Ä> cResult

!seealso: "GWString2Array(" 
'------------------------------------------------------------------------------



!short: GWBoM()         ^bReturn the beginning date of a month
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWBoM()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Return the beginning date of a month.

 ^bSyntax
   ^bGWBoM([dDate]) -> dResult

!seealso: 
'------------------------------------------------------------------------------



!short: GWDate2Week()   ^bCalculate the week number of a date
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWDate2Week()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Calculate the week number of a given date.

 ^bSyntax
   ^bGWDate2Week([dDate]) Ä> nResult

!seealso: "GWWeek2Date()" 
'------------------------------------------------------------------------------



!short: GWDec2Base()    ^bConver a BASE 10 number to any base
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWDec2Base()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Convert a BASE 10 number to another base. This can be any base from 2
   upto 53.

 ^bSyntax
   ^bGWDec2Base(nNumber, nBase) Ä> cResult

!seealso: 
'------------------------------------------------------------------------------



!short: GWDecrypt()     ^bDecrypt an encrypted string
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWDecrypt()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Decrypt a string that was encrypted with the function GWEncrypt().

 ^bSyntax
   ^bGWDecrypt(cString, cKey) Ä> cResult

!seealso: "GWEncrypt()" 
'------------------------------------------------------------------------------



!short: GWEncrypt()     ^bEncrypt a string
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWEncrypt()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Encrypt a string that can be decrypted with the function GWDecrypt().

 ^bSyntax
   ^bGWEncrypt(cString, cKey) Ä> cResult

!seealso: "GWDecrypt()" 
'------------------------------------------------------------------------------



!short: GWExpandString( ^bExpand a string with a number of characters
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWExpandString(^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Expand a string with a number of characters. The characters will be
   placed between all original characters.

 ^bSyntax
   ^bGWExpandString(cString,[cChars]) Ä> cResult

!seealso: 
'------------------------------------------------------------------------------



!short: GWIsLeapYear()  ^bCheck if a year is a leap year
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWIsLeapYear()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Check if the year (of a date) is a leap year.

 ^bSyntax
   ^bGWIsLeapYear(xInput) -> lResult

!seealso: 
'------------------------------------------------------------------------------



!short: GWIsNumeric()   ^bDetermine if a string contains only numeric characters
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWIsNumeric()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Determine if a string contains only numeric characters. If the string is
   completely numeric you can use VAL() to make it numeric. Characters that
   are recognized as numeric : '1234567890. -+'

 ^bSyntax
   ^bGWIsNumeric(cString) Ä> lResult

!seealso: 
'------------------------------------------------------------------------------



!short: GWNedAmount()   ^bConvert a numeric value into a Dutch amount string
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWNedAmount()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Converts a numeric value into a Dutch amount string, with points between
   thousands, a decimal comma and the currency symbol 'fl'.

 ^bSyntax
   ^bGWNedAmount([nAmount], [nLength], [nDecimals]) Ä> cResult

!seealso: 
'------------------------------------------------------------------------------



!short: GWNedDate()     ^bConvert a date into a Dutch date string
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWNedDate()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Converts a date into a Dutch date string. The month is displayed as text
   of <nMonthLength> characters.

 ^bSyntax
   ^bGWNedDate([dDate], [nMonthLength], [lJustify]) Ä> cResult

!seealso: 
'------------------------------------------------------------------------------



!short: GWNedPercent()  ^bConvert a numeric value into a Dutch percentage string
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWNedPercent()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Converts a numeric value into a Dutch percentage string with points
   between thousands, a decimal comma and '%' at the end.

 ^bSyntax
   ^bGWNedPercent([nPerc], [nLength], [nDecimals]) Ä> cResult

!seealso: 
'------------------------------------------------------------------------------



!short: GWPeriod()      ^bCalculate several figures for 2 dates
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWPeriod()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Calculate several period figures for 2 dates.

 ^bSyntax
   ^bGWPeriod([dBegin], [dEnd]) Ä> aResult

!seealso: 
'------------------------------------------------------------------------------



!short: GWStrTran()     ^bTranslate delimited string parts
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWStrTran()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Search and replace one or more a delimited parts of a string with
   another string. The original string may contain more than one delimited
   string part.

 ^bSyntax
   ^bGWStrTran(cInString, aTrans, [cDelimeter]) -> cResult

!seealso: 
'------------------------------------------------------------------------------



!short: GWString2Array( ^bConvert a delimited string to an array
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWString2Array(^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Converts a delimited string to an array.

 ^bSyntax
   ^bGWString2Array(cString, [cDelimiter]) Ä> aResult

!seealso: "GWArray2String(" 
'------------------------------------------------------------------------------



!short: GWUnique()      ^bCalculate a unique name based on date and time
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWUnique()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Calculate a unique 'name' based on the current date and time. This
   'name' is up to 8 characters long. This 'name' can be used as a unique
   name for a temporary file.

 ^bSyntax
   ^bGWUnique() Ä> cResult

!seealso: 
'------------------------------------------------------------------------------



!short: GWWeek2Date()   ^bCalculate the date of the monday of the given week
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWWeek2Date()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Calculate the date of the monday of the give week.

 ^bSyntax
   ^bGWWeek2Date([nWeek], [nYear]) Ä> dResult

!seealso: "GWDate2Week()" 
'------------------------------------------------------------------------------



!short: GWWorkdays()    ^bCalculate the number of working days between 2 dates
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWWorkdays()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Determine the number of workingdays between two dates.

 ^bSyntax
   ^bGWWorkDays(dStart, dEnd) -> nResult

!seealso: 
'------------------------------------------------------------------------------



!short: ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
'------------------------------------------------------------------------------
 ^A3E What did you expect to see here? ^A3E
!seealso: 
'------------------------------------------------------------------------------



!short: ^A1F³  ^A1EDatabase functions                      ^A10  ³^A10
'------------------------------------------------------------------------------
 ^A5F This screen is left blank intentionally... ^A5F
!seealso: 
'------------------------------------------------------------------------------



!short: ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
'------------------------------------------------------------------------------
 ^A4E Press every key to continue... ^A4E
!seealso: 
'------------------------------------------------------------------------------



!short: GWAddRec()      ^bNetwork version of append blank
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWAddRec()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Network version of APPEND BLANK.
   Append a record to the active file. If the append fails then the
   function retries to append a record for <nWaitSeconds>. If the append is
   successful than the new record will be locked.

 ^bSyntax
   ^bGWAddRec([nWaitSeconds]) Ä> lResult

!seealso: "GWFileLock()" "GWNetUse()" "GWRecLock()" 
'------------------------------------------------------------------------------



!short: GWArray2DBF()   ^bCreate a DBF from an array                                  ^A2FN
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWArray2DBF()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Create a DBF from a 2 dimensional array. The array must look like a
   DBF-file. This means that the array must contains arrays of the same
   length and the types of each column must be the same, e.g.
   {{"Text 1", 1.2, .T.}, {"Text 2", 2.34, .F.}}. The file created will
   have this structure :
   FIELD TYPE      LENGTH DECIMALS
   ----- --------- ------ --------
   F1    CHARACTER    6       0
   F2    NUMERIC     10       2
   F3    LOGICAL      1       0

   If the types in a column differ then the values of data in that column
   are converted to character.

 ^bSyntax
   ^bGWArray2DBF(aData, cFile, [aFields]) -> lResult

!seealso: 
'------------------------------------------------------------------------------



!short: GWBrowseDBF()   ^bBrowse one or more files with TBROWSE class                 ^A4FM
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWBrowseDBF()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Browse a file with TBROWSE-class.
   The file can be edited and printed, if the user is allowed to do this.

 ^bSyntax
   ^bGWBrowseDBF([nTop], [nLeft], [nBottom], [nRight], aFields,
     ^b[aFieldTitles], [nFreezeCol], [lEdit], [lDel], [lAdd], [cColors],
     ^b[lRecIndicator], [lSlidervert], [lSliderhor], [lEnterIsChoice],
     ^b[bEditFunction], [aSynchroWindow], [lSpecial], [lSpaceEdit],
     ^b[lPrint], [aKeys], [lRestore], [lStableBlock], [lHelpLine],
     ^b[aSeparators], [lNoConfirm]) -> lResult
         or
   ^b#INCLUDE 'GHOST.CH'
   ^bGWDBFBROWSE                             (or DBFBROWSE)
     ^b[AT <nTop>, <nLeft>, <nBottom>, <nRight>]
     ^b[FIELDS <aFields>]
     ^b[TITLES <aFieldtitles>]
     ^b[FREEZE <nFreezeCol>]
     ^b[EDIT]
     ^b[DEL]
     ^b[ADD]
     ^b[COLOR <cColors>]
     ^b[COUNTER]
     ^b[VERTICAL]
     ^b[HORIZONTAL]
     ^b[ENTERISCHOICE]
     ^b[FUNCTION <bEditfunction>]
     ^b[[SAT <nSWtop>, <nSWleft>, <nSWbottom>, <nSWright>]
     ^b [SFIELDS <aSWfields>]
     ^b [STITLES <aSWfieldtitles>] ]
     ^b[SPECIAL]
     ^b[SPACEEDIT]
     ^b[PRINT]
     ^b[KEYS <aKeys>]
     ^b[RESTORE]
     ^b[STABLEBLOCK <bStableBlock>]
     ^b[HELPLINE]
     ^b[SEPARATORS <aSeparators>]
     ^b[NOCONFIRM]

!seealso: 
'------------------------------------------------------------------------------



!short: GWDBF2Array()   ^bWrite the contents of 1 or more DBF's to an array
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWDBF2Array()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Write the contents of one or more related DBFs to an array. The
   resulting 2 dimensional array can be browsed with GWBrowseArray().

 ^bSyntax
   ^bGWDBF2Array(aFields) Ä> aResult

!seealso: gw23_011.ngo:"GWBrowseArray()" 
'------------------------------------------------------------------------------



!short: GWDBStruct()    ^bCreate an array containing the structure of all open DBF's
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWDBStruct()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Create an array containing the structure of all open DBFs.

 ^bSyntax
   ^bGWDBStruct([nMaxWorkArea]) Ä> aResult

!seealso: gw23_011.ngo:"GWBrowseArray()" 
'------------------------------------------------------------------------------



!short: GWFileLock()    ^bLock a file on a network
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWFileLock()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Lock a file on a network. If the lock fails then the function retries to
   lock the file for <nWaitSeconds>.

 ^bSyntax
   ^bGWFileLock([nWaitSeconds]) Ä> lResult

!seealso: "GWAddRec()" "GWNetUse()" "GWRecLock()" 
'------------------------------------------------------------------------------



!short: GWNetUse()      ^bOpen a file on a network                                    ^A4FM
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWNetUse()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Open a file on a network. If opening fails then the function retries to
   open the file for <nWaitSeconds>.

 ^bSyntax
   ^bGWNetUse(cDatabase,[cIndex],[cOpenMode],[cNew],[nWaitSeconds],
   ^b         [cAlias], [cDriver]) Ä> lResult

!seealso: "GWAddRec()" "GWFileLock()" "GWRecLock()" 
'------------------------------------------------------------------------------



!short: GWOpenDBF()     ^bShow a browse with information of all open DBF's
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWOpenDBF()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Show a browse with information of all open DBF's. This is very useful
   during application development. If assigned to a key (with SETKEY) you
   can constantly monitor which database and index files are open.
   ^uWorks only with Clipper 5.2 !

 ^bSyntax
   ^bGWOpenDBF([lBrowse]) -> aResult
     or
   ^bSETKEY(<nKey>, {|| aResult := GWOpenDBF([lBrowse]) })

!seealso: 
'------------------------------------------------------------------------------



!short: GWRecLock()     ^bLock a record on a network
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWRecLock()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Lock a record in a file on a network. If the lock fails then the
   function retries to lock the record for <nWaitSeconds>.

 ^bSyntax
   ^bGWRecLock([nWaitSeconds]) Ä> lResult

!seealso: "GWAddRec()" "GWFileLock()" "GWNetUse()" 
'------------------------------------------------------------------------------



!short: STATISTIC ...   ^bSimple statistic commands                                   ^A2FN
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1ESTATISTIC ...^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Perform some simple statistic calculations on the data in a database.
   You can set breakpoints for which totals of numeric fields can be
   calculated and for which the number of records can be determined. An
   overall total can be calculated too. The results are placed in a
   separate file.

 ^bSyntax
   // Initialize the statistic system
   ^bSTATISTIC [TO] FILE cFile BREAK [ON] cBreak [INDEX]

   // Add columns with the data of the breakpoints
   ^bSTATISTIC LABEL cLabel TO cField

   // Add a column for the number of records per breakpoint
   ^bSTATISTIC COUNT TO cField               ;
   ^b          [LENGTH nLength[, nDecimals]] ;
   ^b          [FOR cExpression]

   // Add a column for the totals of a field per breakpoint
   ^bSTATISTIC SUM cSum TO cField            ;
   ^b          [LENGTH nLength[, nDecimals]] ;
   ^b          [FOR cExpression]

   // Perform the statistic calculations and fill the statistic file
   ^bSTATISTIC GO [or EXECUTE]      ;
   ^b          [TOTALS]             ;
   ^b          [COUNTER]            ;
   ^b          [FUNCTION cFunction]

!seealso: 
'------------------------------------------------------------------------------



!short: ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
'------------------------------------------------------------------------------
 ^A3E What did you expect to see here? ^A3E
!seealso: 
'------------------------------------------------------------------------------



!short: ^A1F³  ^A1EDOS functions                           ^A10  ³^A10
'------------------------------------------------------------------------------
 ^A5F This screen is left blank intentionally... ^A5F
!seealso: 
'------------------------------------------------------------------------------



!short: ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
'------------------------------------------------------------------------------
 ^A4E Press every key to continue... ^A4E
!seealso: 
'------------------------------------------------------------------------------



!short: GWChDir()       ^bChange to another directory
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWChDir()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Change to another directory. If an error occurs an optional message will
   be displayed.

 ^bSyntax
   ^bGWChDir(cDir, [lError]) -> nResult

!seealso: "GWMkDir()" "GWRmDir()" 
'------------------------------------------------------------------------------



!short: GWCopyFile()    ^bCopy 1 or more files
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWCopyFile()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Copy 1 or more files and show the status of the copy proces on one or
   two statusbars. The use of wildcards is allowed.

 ^bSyntax
   ^bGWCopyFile([xFromDir], [cTo], [xExcludeFiles], [lStatusbar],
   ^b[lPrompt]) -> NIL

!seealso: "GWIsValid()" 
'------------------------------------------------------------------------------



!short: GWDrive()       ^bSet/get the default drive
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWDrive()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Set/get the default drive. With this function the current drive can be
   determined and/or the current drive can be changed.

 ^bSyntax
   ^bGWDrive(cDrive, [@nError]) -> cResult

!seealso: 
'------------------------------------------------------------------------------



!short: GWGetDir()      ^bGet directory information with exclusion option
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWGetDir()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Get an array with directory-information with the possibility to exclude
   file from the array. It's possible to get all the files excluding the
   EXE- and COM-files. The filenames can contain the full path.

 ^bSyntax
   ^bGWGetDir([xFromDir], [xExcludeFiles], [cAttributes], [cSort],
   ^b       [cOrder], [lFullPath], [lStatus]) Ä> aResult

!seealso: 
'------------------------------------------------------------------------------



!short: GWGetTree()     ^bGet an array with tree-information
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWGetTree()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Get an array with tree-information.

 ^bSyntax
   ^bGWGetTree([cPath], [lSize], [lDisplay], [lGraphic]) Ä> aResult

!seealso: 
'------------------------------------------------------------------------------



!short: GWIsRAMDisk()   ^bCheck if there is a RAM-disk available
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWIsRAMDisk()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Check if there is a RAM-disk available on the system. This function
   looks for the existence of a drive which volume name contains either
   "VDISK" or "RAMDISK".

 ^bSyntax
   ^bGWIsRAMDisk() Ä> lResult

!seealso: "GWCopyFile()" "GWRAMDisk()" 
'------------------------------------------------------------------------------



!short: GWIsValid()     ^bCheck if a drive, directory or file exists
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWIsValid()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Check if a drive, directory or file exists. If not an error message is
   displayed.

 ^bSyntax
   ^bGWIsValid([cName], [lFile], [lMessage]) Ä> aResult

!seealso: "GWCopyFile()" "GWWhatIsThis()" 
'------------------------------------------------------------------------------



!short: GWIsValid()     ^bCheck if a drive, directory or file exists
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWIsValid()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Check if a drive, directory or file exists. If not an error message is
   displayed.

 ^bSyntax
   ^bGWIsValid([cName], [lFile], [lMessage]) Ä> aResult

!seealso: "GWCopyFile()" "GWWhatIsThis()" 
'------------------------------------------------------------------------------



!short: GWMemory()      ^bDisplay the status of free memory
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWMemory()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Display the status of free memory in a window. If assigned to a key
   (with SETKEY()) you can use this function during development.

 ^bSyntax
   ^bGWMemory() Ä> NIL
    or
   ^bSETKEY(<nKey>, {|| GWMemory() })

!seealso: 
'------------------------------------------------------------------------------



!short: GWMkDir()       ^bMake a directory
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWMkDir()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Make a directory. If an error occurs an optional message will be
   displayed.

 ^bSyntax
   ^bGWMkDir(cDir, [lError]) -> nResult

!seealso: "GWChDir()" "GWRmDir()" 
'------------------------------------------------------------------------------



!short: GWRAMDisk()     ^bGet the drive letter of a RAM-disk
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWRAMDisk()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Get the drive-letter of a RAM-disk. This functions looks for a drive
   which volume name contains either "VDISK" or "RAMDISK".
   This is very useful if you want to copy files (or whatever) to a
   RAM-disk.

 ^bSyntax
   ^bGWRAMDisk() Ä> cResult

!seealso: "GWIsRAMDisk()" 
'------------------------------------------------------------------------------



!short: GWRestEnv()     ^bRestore the OS environment
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWRestEnv()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Restore the operating system environment before the application is
   exited. The environment must be saved first with GWSaveEnv().

 ^bSyntax
   ^bGWRestEnv() Ä> NIL

!seealso: "GWSaveEnv()" 
'------------------------------------------------------------------------------



!short: GWRmDir()       ^bRemove a directory
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWRmDir()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Remove a directory. If an error occurs an optional message will be
   displayed.

 ^bSyntax
   ^bGWRmDir(cDir, [lError]) -> nResult

!seealso: "GWChDir()" "GWMkDir()" 
'------------------------------------------------------------------------------



!short: GWSaveEnv()     ^bSave the OS environment                                     ^A4FM
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWSaveEnv()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Save the operating system environment when the application is started.
   The following 'things' are saved :
   - the screen ;
   - the color settings ;
   - the cursor size ;
   - the cursor location ;
   - blink state ;
   - screen mode (eg. SETMODE(25, 80) is restored) ;
   - mouse mode ;
   - mouse position.
   Before the application is exited you can restore the environment with
   GWRestEnv().
   You can use this function more than once in a program. All the
   information is stored for each call. Restoring uses the LIFO (Last In
   First Out) principle. So the last saved environment is restored first.

 ^bSyntax
   ^bGWSaveEnv() Ä> NIL

!seealso: "GWRestEnv()" 
'------------------------------------------------------------------------------



!short: GWSize()        ^bDetermine the size of a file bytes or kilobutes
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWSize()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Determine the size of a file in bytes or kilobytes.

 ^bSyntax
   ^bGWSize(cFile, [lKilo]) Ä> nResult

!seealso: 
'------------------------------------------------------------------------------



!short: GWWhatIsThis()  ^bExamine if the argument is a station, directory of file
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWWhatIsThis()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Examines if the argument is a station-, directory- or filename.

 ^bSyntax
   ^bGWWhatIsThis(cInput) Ä> cResult

!seealso: "GWIsValid()" 
'------------------------------------------------------------------------------



!short: ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
'------------------------------------------------------------------------------
 ^A3E What did you expect to see here? ^A3E
!seealso: 
'------------------------------------------------------------------------------



!short: ^A1F³  ^A1EGetlist functions                       ^A10  ³^A10
'------------------------------------------------------------------------------
 ^A5F This screen is left blank intentionally... ^A5F
!seealso: 
'------------------------------------------------------------------------------



!short: ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
'------------------------------------------------------------------------------
 ^A4E Press every key to continue... ^A4E
!seealso: 
'------------------------------------------------------------------------------



!short: GET BUTTON      ^bUse a push button in a GET                                  ^A2FN
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGET BUTTON^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Use a push button in a GET-list. The button is shown with a shadow under
   it. When the user presses the ENTER-key the pressing of the button is
   simulated. After the pressing the ENTER-key a user function can be
   executed and the getlist can be exited.

 ^bSyntax
   ^b@nRow, nCol GET cVar                               ;
   ^b            [COLOR cColor]                         ;
   ^b            BUTTON cText                           ;
   ^b            [DO | EXECUTE cFunction [STAY | KEEP]] ;
   ^b            [EXITREAD | STOPREAD]                  ;
   ^b            [WHEN bWhen]                           ;
   ^b            [VALID bValid]

!seealso: 
'------------------------------------------------------------------------------



!short: GET CALCULATOR  ^bUse a calculator in a GET                                   ^A2FN
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGET CALCULATOR^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Use a calculator in a numeric GET-field. If the user presses the ALT-K
   keys a calculator is shown. The calculated value can be copied to the
   GET-field. This only makes sense in a GET-field with a type of NUMERIC.

 ^bSyntax
   ^b@nRow, nCol [SAY cText [COLOR cColor]]  ;
   ^b            GET cVar                    ;
   ^b            CALCULATOR                  ;
   ^b            [WHEN bWhen]                ;
   ^b            [VALID bValid]

!seealso: 
'------------------------------------------------------------------------------



!short: GET CALENDER    ^bUse a calender in a GET                                     ^A2FN
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGET CALENDER^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Use a calender in a date GET-field. If the user presses the ALT-K keys a
   calender is shown. After pressing the ENTER-key the date is copied to
   the GET-field. This only makes sense in GET-field with a type of DATE.

 ^bSyntax
   ^b@nRow, nCol [SAY cText [COLOR cColor]]  ;
   ^b            GET cVar                    ;
   ^b            CALENDER                    ;
   ^b            [WHEN bWhen]                ;
   ^b            [VALID bValid]

!seealso: 
'------------------------------------------------------------------------------



!short: GET CHECKBOX    ^bUse checkboxes within a GETlist                             ^A4FM
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGET CHECKBOX^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Use CheckBoxes within a GETlist. The user can select answers by pressing
   the spacebar.

 ^bSyntax
   ^b@nRow, nCol GET cVar                   ;
   ^b            CHECKBOX <aOptions>        ;
   ^b            [CHECKCOLOR <cColCheck>]   ;
   ^b            [ANSWERS <aAnswers>]       ;
   ^b            [HORIZONTAL>]              ;
   ^b            [CHECK <cCheck>]

!seealso: 
'------------------------------------------------------------------------------



!short: GET HISTORY     ^bStore the entered data in a GET into a history list
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGET HISTORY^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Store the entered data in a history list. This means that all the data
   that is entered in the GET-field is stored into an array. The data will
   be showed in a history list when the user presses on the downarrow key.
   In this list the user can make his choice by pressing the enter key.
   The last entered data will be placed in the first position of the
   history list.

 ^bSyntax
   ^b@nRow, nCol [SAY cText [COLOR cColor]]  ;
   ^b            GET cVar                    ;
   ^b            HISTORY nMaxHistory         ;
   ^b            [WHEN bWhen]                ;
   ^b            [VALID bValid]

!seealso: 
'------------------------------------------------------------------------------



!short: GET INITIALS    ^bEnter a initials in a GET                                   ^A2FN
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGET INITIALS^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Enter a initials in a GET-field with using the shift or caps lock key.
   The first character and any character following a '.' will be converted
   to uppercase. For example if the user typed 'r.th.r.' the screen will
   display 'R.Th.R.'

 ^bSyntax
   ^b@nRow, nCol [SAY cText [COLOR cColor]]  ;
   ^b            GET cVar                    ;
   ^b            INITIALS                    ;
   ^b            [WHEN bWhen]                ;
   ^b            [VALID bValid]

!seealso: 
'------------------------------------------------------------------------------



!short: GET MEMO        ^bEdit a memo-string within a GET
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGET MEMO^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Edit a memo-string within a GET. If the cursor is located on the GETMEMO
   field the user can press a given key to edit the memo in a window.

 ^bSyntax
   ^b@nRow, nCol [SAY cText [COLOR cColor]]         ;
   ^b            GET MEMO cVar                      ;
   ^b            [AT nTop, nLeft, nBottom, nRight]  ;
   ^b            [COLOR cColor]                     ;
   ^b            [KEY aKey]                         ;
   ^b            [TITLE cTitle]                     ;
   ^b            [WHEN bWhen]                       ;
   ^b            [VALID bValid]
   ^b            [BLOCK bBlock]

!seealso: 
'------------------------------------------------------------------------------



!short: GET PASSWORD    ^bEnter a password in a GET                                   ^A2FN
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGET PASSWORD^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Enter a password in a GET-field. Of course the password is not shown
   during entry.

 ^bSyntax
   ^b@nRow, nCol [SAY cText [COLOR cColor]]  ;
   ^b            GET cVar                    ;
   ^b            PASSWORD                    ;
   ^b            [WHEN bWhen]                ;
   ^b            [VALID bValid]

!seealso: 
'------------------------------------------------------------------------------



!short: GET PICK        ^bShow a picklist in a GET field                              ^A2FN
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGET PICK^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Show a picklist when a GET-field is entered. After making a choice the
   answer is stuffed in the GET-field. The picklist is displayed as soon as
   the cursor enters the GET-field.

 ^bSyntax
   ^b@nRow, nCol [SAY cText [COLOR cColor]] ;
   ^b            GET cVar PICK aAnswers     ;
   ^b            [QUESTION cQuestion]       ;
   ^b            [WHEN bWhen]               ;
   ^b            [VALID bValid]

!seealso: 
'------------------------------------------------------------------------------



!short: GET RADIO       ^bUse radiobuttons within a GETlist                           ^A4FM
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGET RADIO^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Use radiobuttons within a GETlist.

 ^bSyntax
   ^b@nRow, nCol GET cVar                   ;
   ^b            RADIO aOptions             ;
   ^b            [RADIOCOLOR cColRadio]     ;
   ^b            [ANSWERS aAnswers]         ;
   ^b            [HORIZONTAL]               ;
   ^b            [CHECK cCheck]

!seealso: 
'------------------------------------------------------------------------------



!short: GWAsciiTable()  ^bShow an ASCII table
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWAsciiTable()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Show an ASCII-table. This function is used in the GETSYStem and in
   GWMemoEdit(). After pressing the ENTER key, the current character is
   returned.

 ^bSyntax
   ^bGWAsciiTable() -> cResult or NIL

!seealso: 
'------------------------------------------------------------------------------



!short: GWCalender()    ^bShow a calender of the current month
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWCalender()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Show a calender of the current month. In a Getlist date-field the user
   can call this calender by pressing a key-combination. After pressing the
   ENTER key, the date is placed in the date-field. After pressing the
   ESCape key the original date will remain the same.

 ^bSyntax
   ^bGWCalender([lSpecial]) -> NIL

   in combination with the SETKEY-function :
   ^b#INCLUDE 'INKEY.CH'
   ^bSETKEY( nKey, {||GWCalender(lSpecial)} ) - NIL

!seealso: 
'------------------------------------------------------------------------------



!short: GWGetFill()     ^bFill a field of a GETlist with a value
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWGetFill()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Fill a field of a GetList array with a value.

 ^bSyntax
   ^bGWGetFill(@aGetList, nGetNumber, xInfo) Ä> NIL

!seealso: "GWGetNumber()" 
'------------------------------------------------------------------------------



!short: GWGetNumber()   ^bGet the number of a GET field in a GETlist
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWGetNumber()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Get the number of a GET-field in a GETlist.

 ^bSyntax
   ^bGWGetNumber(aGetList, cFieldName) Ä> nResult

!seealso: "GWGetFill()" 
'------------------------------------------------------------------------------



!short: GWPostPick()    ^bShow a picklist in a GET field after wrong input
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWPostPick()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Show a picklist in a GET-field after wrong input.

 ^bSyntax
   ^b.... VALID GWPostPick(cText, aAnswers, [cColors], [cBorder]) Ä> .T.

!seealso: "GWPrePick()" 
'------------------------------------------------------------------------------



!short: GWPrePick()     ^bShow a picklist or a message when a GET field is activated  ^A4FM
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWPrePick()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Show a picklist or message when a GET-field is activated. After making a
   choice the answer is stuffed in the GET-field. The picklist is displayed
   as soon as the cursor enters the GET-field. If no 'aAnswers' are given
   then cText is displayed on the bottom line of the screen. So there is a
   helptext displayed on that line.

   Note : Since version 2.3 it is recommended to use the command GET PICK
   if you want to show a picklist when a GET field is entered. Use this
   function only to display a helptext on the bottom line.

 ^bSyntax
   ^b.... WHEN GWPrePick(cText, aAnswers, [cColors], [cBorder]) Ä> .T.

!seealso: "GWPostPick()" 
'------------------------------------------------------------------------------



!short: READ VALIDATE   ^bRead command with validation when the Getlist is leaved     ^A2FN
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EREAD VALIDATE^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Addition to standard READ command. With the VALIDATE keyword the entire
   Getlist is validated. When the Getlist is exited with another key then
   ESCape all the WHEN en VALID clauses are checked. If a clause is not
   met,the cursor is positioned on the corresponding Get field. This is
   very useful when the user has the ability to jump to any Get field with
   the mouse. In that case it is possible that a WHEN or VALID clause is
   bypassed, which means that the input is not validated entirely.
   If the user presses ESCape, no validation is done since the input is
   rejected by the user.

 ^bSyntax
   ^bREAD [SAVE] [VALIDATE]

!seealso: 
'------------------------------------------------------------------------------



!short: ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
'------------------------------------------------------------------------------
 ^A3E What did you expect to see here? ^A3E
!seealso: 
'------------------------------------------------------------------------------



!short: ^A1F³  ^A1EAbout GhostWare library                 ^A10  ³^A10
'------------------------------------------------------------------------------
 ^A5F This screen is left blank intentionally... ^A5F
!seealso: 
'------------------------------------------------------------------------------



!short: ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
'------------------------------------------------------------------------------
 ^A4E Press every key to continue... ^A4E
!seealso: gw23_009.ngo:"GWErrorLog()" 
'------------------------------------------------------------------------------



!short: ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
'------------------------------------------------------------------------------
 ^A3E What did you expect to see here? ^A3E
!seealso: 
'------------------------------------------------------------------------------



!short: ^A1F³  ^A1EHotspot functions                       ^A10  ³^A10
'------------------------------------------------------------------------------
 ^A5F This screen is left blank intentionally... ^A5F
!seealso: 
'------------------------------------------------------------------------------



!short: ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
'------------------------------------------------------------------------------
 ^A4E Press every key to continue... ^A4E
!seealso: 
'------------------------------------------------------------------------------



!short: COOL ALL HOT... ^bDe-activate all defined hotspots                            ^A2FN
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1ECOOL ALL HOT...^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   De-activate all previous defined hotspots. If the 'COOL' colors were
   defined the hotspots are repainted in these colors.

 ^bSyntax
   ^bCOOL ALL HOTSPOTS

   Note : MOUSE.CH must be included in your program

!seealso: 
'------------------------------------------------------------------------------



!short: COOL HOTSPOT    ^bDe-activate a defined hotspot                               ^A2FN
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1ECOOL HOTSPOT^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   De-activate a previous defined hotspot. If the 'COOL' colors were
   defined the hotspot is repainted in these colors.

 ^bSyntax
   ^bCOOL HOTSPOT nVar

   Note : MOUSE.CH must be included in your program

!seealso: 
'------------------------------------------------------------------------------



!short: DEFINE HOTSPOT  ^bDefine a hotspot region                                     ^A2FN
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EDEFINE HOTSPOT^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Define a region of the screen that must respond to a mouse click, a so
   called HOTSPOT. The hotspot can is activated by default but can be
   de-activated temporary. The colors for activated and de-activated
   hotspots can be supplied, this way the user can see which hotspots are
   (not) active. Before defining the hotspot you must display the text for
   the hotspot in the hotspot region. When the hotspot is defined the text
   in this region is painted in the correct colors.
   A key can be attached to the hotspot, so it is possible to assign the
   same action to a hotspot and a key(value).

 ^bSyntax
   ^bDEFINE HOTSPOT nVar            ;
   ^b  [AT top, row, bottom, right] ;
   ^b  [OFF]                        ;
   ^b  [KEY nKey]                   ;
   ^b  [DO bDo]                     ;
   ^b  [WARM [COLOR] cWarmColor]    ;
   ^b  [COLD [COLOR] cColdColor]

   Note : MOUSE.CH must be included in your program

!seealso: 
'------------------------------------------------------------------------------



!short: DELETE ALL HOTS ^bDelete all defined hotspot                                  ^A2FN
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EDELETE ALL HOTS^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Delete all previous defined hotspots.

 ^bSyntax
   ^bDELETE ALL HOTSPOTS

   Note : MOUSE.CH must be included in your program

!seealso: 
'------------------------------------------------------------------------------



!short: DELETE HOTSPOT  ^bDelete a defined hotspot                                    ^A2FN
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EDELETE HOTSPOT^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Delete a previous defined hotspot.

 ^bSyntax
   ^bDELETE HOTSPOT nVar

   Note : MOUSE.CH must be included in your program

!seealso: 
'------------------------------------------------------------------------------



!short: PAINT HOTSPOTS  ^bPaint all defined hotspot                                   ^A2FN
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EPAINT HOTSPOTS^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Paint all previous defined hotspots. The hotspots are painted in the
   correct 'warm' and 'cold' colors.

 ^bSyntax
   ^bPAINT HOTSPOTS

   Note : MOUSE.CH must be included in your program

!seealso: 
'------------------------------------------------------------------------------



!short: RESTORE HOTSPOT ^bRestore the saved hotspot definitions                       ^A2FN
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1ERESTORE HOTSPOT^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Restore the saved hotspot definitions. This is useful if you want to
   redefine some (or all) hotspots temporary. And then restore the previous
   hotspots.

 ^bSyntax
   ^bRESTORE HOTSPOTS FROM aSpots [REPAINT]

   Note : MOUSE.CH must be included in your program

!seealso: 
'------------------------------------------------------------------------------



!short: SAVE HOTSPOTS   ^bSave the hotspot definitions                                ^A2FN
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1ESAVE HOTSPOTS^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Save the hotspot definitions for later use. This is useful if you want
   to redefine some (or all) hotspots temporary. And then restore the
   previous hotspots.

 ^bSyntax
   ^bSAVE HOTSPOTS TO aSpots [DELETE]

   Note : MOUSE.CH must be included in your program

!seealso: 
'------------------------------------------------------------------------------



!short: WARM ALL HOT... ^bActivate all defined hotspots                               ^A2FN
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EWARM ALL HOT...^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Activate all previous defined hotspots. If the 'WARM' colors were
   defined the hotspots are repainted in these colors.

 ^bSyntax
   ^bWARM ALL HOTSPOTS

   Note : MOUSE.CH must be included in your program

!seealso: 
'------------------------------------------------------------------------------



!short: WARM HOTSPOT    ^bActivate a defined hotspot                                  ^A2FN
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EWARM HOTSPOT^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Activate a previous defined hotspot. If the 'WARM' colors were defined
   the hotspot is repainted in these colors.

 ^bSyntax
   ^bWARM HOTSPOT nVar

   Note : MOUSE.CH must be included in your program

!seealso: 
'------------------------------------------------------------------------------



!short: ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
'------------------------------------------------------------------------------
 ^A3E What did you expect to see here? ^A3E
!seealso: 
'------------------------------------------------------------------------------



!short: ^A1F³  ^A1ELog functions                           ^A10  ³^A10
'------------------------------------------------------------------------------
 ^A5F This screen is left blank intentionally... ^A5F
!seealso: 
'------------------------------------------------------------------------------



!short: ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
'------------------------------------------------------------------------------
 ^A4E Press every key to continue... ^A4E
!seealso: 
'------------------------------------------------------------------------------



!short: GWChangePassw() ^bLet the user change his password
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWChangePassw()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Let an user change his password in file USERS.DBF. Use this function in
   combination with GWLogin().

 ^bSyntax
   ^bGWChangePassword([cUserId]) Ä> NIL

!seealso: "GWLogin()" "GWUsers()" 
'------------------------------------------------------------------------------



!short: GWErrorLog()    ^bView the error log                                          ^A4FM
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWErrorLog()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   View the files ERRORLOG.DBF and TRACE.DBF. These files contain
   information about runtime error a system runs into. A TBROWSE window is
   shown with all the runtime errors that occurred. By pressing the F10-key
   another window appears with all the names of functions and procedures
   that where active during the runtime error.

   Note : Only if the command ^bLOG ERRORS ON^b is used errors will be
   logged to the error files.

 ^bSyntax
   ^bGWErrorLog([lSpecial]) Ä> NIL

!seealso: 
'------------------------------------------------------------------------------



!short: GWLogin()       ^bProcedure to log into a network application
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWLogin()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Procedure to log into a network system. It is possible to secure a
   system with a password per user. Furthermore the use of the system is
   registered per user. This function uses 2 files : USERLOG.DBF and
   USERS.DBF. In USERLOG.DBF the use of the system is registered and
   USERS.DBF contains the data for the authorized users. The first time the
   function GWLogin() is used both files are made. In USERS.DBF a user is
   created (BEHEER in GHOSTHOL.LIB and SUPER in GHOSTUSA.LIB) and a
   password must be typed in. Then it is possible to add new users with the
   function GWUsers(). The USERLOG can be viewed with the function
   GWUserLog().
   Per user it is possible to define a securitylevel. This level is defined
   in the file USERS.DBF. Within your application you can use this level to
   prevent users to use certain functions. I always give the 'SUPER' user
   level 1 and other users level 2 or higher.

 ^bSyntax
   ^bGWLogin(cUserId, bSystem, cSystem) Ä> NIL

!seealso: 
'------------------------------------------------------------------------------



!short: GWUserlog()     ^bView the userlog file
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWUserlog()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   View the file USERLOG.DBF. This file contains information about
   activities by a user in a system. The login time and logout time are
   registered, as well as illegal attempts to use a system. Use this
   function in conjunction with the function GWLogin().

 ^bSyntax
   ^bGWUserLog([lSpecial]) Ä> NIL

!seealso: "GWLogin()" "GWUsers()" 
'------------------------------------------------------------------------------



!short: GWUsers()       ^bView and edit the users file
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWUsers()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   View and edit the file USERS.DBF. New users can be added to the file or
   users can be expelled from a system temporary by placing a .F. in the
   field 'ALLOWED_ON'. Use this function in conjunction with the function
   GWLogin().

 ^bSyntax
   ^bGWUsers([lSpecial]) Ä> NIL

!seealso: 
'------------------------------------------------------------------------------



!short: LOG ERRORS ...  ^bDetermine if runtime errors must be logged to a file        ^A2FN
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1ELOG ERRORS ...^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Determine if runtime error must be logged to a file or not. Errors are
   always displayed on the screen. The data of logged errors can be viewed
   with GWErrorLog().

 ^bSyntax
   ^bLOG ERRORS [ON | OFF]

!seealso: "GWErrorLog()" 
'------------------------------------------------------------------------------



!short: ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
'------------------------------------------------------------------------------
 ^A3E What did you expect to see here? ^A3E
!seealso: 
'------------------------------------------------------------------------------



!short: ^A1F³  ^A1EMenu Functions                          ^A10  ³^A10
'------------------------------------------------------------------------------
 ^A5F This screen is left blank intentionally... ^A5F
!seealso: 
'------------------------------------------------------------------------------



!short: ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
'------------------------------------------------------------------------------
 ^A4E Press every key to continue... ^A4E
!seealso: 
'------------------------------------------------------------------------------



!short: GWAsk()         ^bShow a menu as a replacement for ALERT()
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWAsk()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Show a menu as a replacement for ALERT().
   PS. This function is called by a lot of other functions, e.g.
   GWPostPick(), GWPrePick(), the Network-functions and so on.

 ^bSyntax
   ^bGWAsk([cText], [aAnswers], [nInitpos], [cColors], [cOrientation],
     ^b[nRow], [nCol], [cBorder], [aAllowed]) Ä> nResult
         or
   ^b#INCLUDE "GHOST.CH"
   ^bGWASKTHIS                           (or ASKTHIS)
     ^b[QUESTION <cText>]
     ^b[[WITH] ANSWERS <aAnswers>]
     ^b[INITPOSITION ,nInitPos>]
     ^b[COLOR <cColors>]
     ^b[VERTICAL or HORIZONTAL]
     ^b[AT <nRow>[, <nCol>]]
     ^b[BORDER <cBorder>]
     ^b[ALLOWED <aAllowed>]
     ^b[TO <nResult>]

!seealso: gw23_011.ngo:"GWCrLf()" gw23_014.ngo:"GWMessage()" gw23_015.ngo:"GWUseSpecial()" 
'------------------------------------------------------------------------------



!short: GWMenuArray()   ^bCreate a menu array for GWPdown()
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWMenuArray()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Create a menu array from a DBF-file for the function GWPDown().

 ^bSyntax
   ^bGWMenuArray^b(cMenu, cFile) -> aResult

!seealso: "GWPDown()" 
'------------------------------------------------------------------------------



!short: GWPDown()       ^bThe pulldown menu system with optional screensaver          ^A4FM
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWPDown()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   The pulldown menusystem, with an optional screensaver.

 ^bSyntax
   ^bGWPDown(aOptions, [cColOption], [cColHotkey], [cColActiveOption],
         ^b[cColActiveHotkey], [cBorder], [lExplode], [lWarning],
         ^b[nSeconds], [bFunc], [aRows]) -> NIL

!seealso: "GWMenuArray()" 
'------------------------------------------------------------------------------



!short: MENU commands   ^bCommands for using GWPDown()                                ^A2FN
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EMENU commands^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Commands for using the pulldown menusystem of GWPDown().

 ^bSyntax
   ^bBEGIN MENU aMenu
   ^b  OPTION cOption ;
   ^b    [ [DO|EXECUTE cDo] | [SUBMENU aSubMenu] ] ;
   ^b    [HOTKEY nHotkey] ;
   ^b    [MESSAGE cMessage] ;
   ^b    [WHEN cWhen]
   ^b    [SHORTCUT nShortCut]
   ^b  [SEPARATOR]
   ^bENDMENU aMenu
   This construction must be used for the Main menu (=Top menu) and all the
   submenus (=Pulldown menus). After defining all menus the system can be
   activated with the 'ACTIVATE MENU' command, described below.

 ^bSyntax
   ^bACTIVATE MENU <aMenu>                   ;
   ^b  [OPTION [COLOR] <cColOption>]         ;
   ^b  [HOTKEY [COLOR] <cColHotkey>]         ;
   ^b  [ACTIVEOPTION [COLOR] <cColActOption] ;
   ^b  [ACTIVEHOTKEY [COLOR] <cColActHotkey] ;
   ^b  [BORDER <cBorder>]                    ;
   ^b  [EXPLODE]                             ;
   ^b  [WARNING]                             ;
   ^b  [BLOCK <cBlock> [AFTER <nSeconds>]]   ;
   ^b  [TOPROW <nTop>]                       ;
   ^b  [MESSAGEROW <nMessage>]

!seealso: "GWPDown()" 
'------------------------------------------------------------------------------



!short: ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
'------------------------------------------------------------------------------
 ^A3E What did you expect to see here? ^A3E
!seealso: 
'------------------------------------------------------------------------------



!short: ^A1F³  ^A1EMiscellaneous functions                 ^A10  ³^A10
'------------------------------------------------------------------------------
 ^A5F This screen is left blank intentionally... ^A5F
!seealso: 
'------------------------------------------------------------------------------



!short: ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
'------------------------------------------------------------------------------
 ^A4E Press every key to continue... ^A4E
!seealso: 
'------------------------------------------------------------------------------



!short: GWBrowseArray() ^bBrowse a 2 dimensional array                                ^A4FM
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWBrowseArray()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Browse a 2 dimensional array.
   Rows can be marked (with Spacebar) and a print can be made.
   (see also HELP after F1-key is pressed)

 ^bSyntax
   ^bGWBrowseArray([nTop], [nLeft], [nBottom], [nRight], aInfo,
      ^b[aColTitles], [nFreezeCol], [cColors], [lLineInd], [lSliderVert],
      ^b[lSliderHor], [lEnterIsChoice], [lTag], [lSpecial], [lPrint],
      ^b[lRestore], [lStableBlock], [lHelpLine], [aSeparators], [aKeys])
      ^b-> aResult
          or

   ^b#INCLUDE "GHOST.CH"
   ^bGWARRBROWSE                            (or ARRBROWSE)
   ^b  [AT <nTop>,<nLeft>,<nBottom>,<nRight>]
   ^b  ARRAY <aInfo>
   ^b  [VAR <aResult>]
   ^b  [TITLES <aColTitles>]
   ^b  [FREEZE <nFreezeCol>]
   ^b  [COLOR <cColors>]
   ^b  [COUNTER]
   ^b  [VERTICAL]
   ^b  [HORIZONTAL]
   ^b  [ENTERISCHOICE]
   ^b  [TAG]
   ^b  [SPECIAL]
   ^b  [PRINT]
   ^b  [RESTORE]
   ^b  [STABLEBLOCK <bStableBlock>]
   ^b  [HELPLINE]
   ^b  [SEPARATORS <aSeparators>]
   ^b  [KEYS <aKeys>]

!seealso: 
'------------------------------------------------------------------------------



!short: GWBrowseText()  ^bBrowse through an ASCII-file
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWBrowseText()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Browse through an ASCII textfile.

 ^bSyntax
   ^bGWBrowseText(cFile, [nTop], [nLeft], [nBottom], [nRight], [cColor],
     ^b[lLineNum], [lSpecial], [lPrintMag], [lRestore]) -> NIL
         or
   ^b#INCLUDE "GHOST.CH"
   ^bGWTXTBROWSE                                (or TXTBROWSE)
   ^b  FILE <cFile>
   ^b  [AT <nTop>,<nLeft>,<nBottom>,<nRight>]
   ^b  [COLOR <cColor>]
   ^b  [LINENUM]
   ^b  [SPECIAL]
   ^b  [PRINT]
   ^b  [RESTORE]

!seealso: 
'------------------------------------------------------------------------------



!short: GWCrLf()        ^bReturns a Carriage Return and Line Feed
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWCrLf()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Returns a Carriage Return and Line Feed string. This string can be added
   to a string that will be displayed with the functions MESSAGE() and
   GWAsk(). This way it is possible to display parts of the messages on the
   next line.

 ^bSyntax
   ^bGWCrLf() Ä> cResult

!seealso: gw23_010.ngo:"GWAsk()" gw23_014.ngo:"GWMessage()" 
'------------------------------------------------------------------------------



!short: GWDelay()       ^bWait for certain time period
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWDelay()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Wait for certain time period before continuing with your program. The
   number of seconds can de given in decimals, e.g. 2.5 seconds.

 ^bSyntax
   ^bGWDelay([nSeconds]) Ä> NIL

!seealso: 
'------------------------------------------------------------------------------



!short: GWFakeKey()     ^bChange the action of a key
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWFakeKey()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Change the action of a key. If you for example don't want the user to
   exit a GETLIST with the PaGeDowN key you can change it's action into
   ENTER.

 ^bSyntax
   ^bGWFakeKey(nKey, nNewKey) Ä> bResult
   ^b .
   ^b .
   ^bSETKEY(nKey, NIL) or SETKEY(nKey, bResult)

!seealso: 
'------------------------------------------------------------------------------



!short: GWHelp()        ^bActivate a helpsystem
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWHelp()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   With this function help messages for GET-fields can be made. To make
   help messages a environment variable must be available. You can do this
   with the DOS command ^bSET GWHELP=.T.^b. After this when the F1-key is
   pressed the new help files (GWHELP.DBF, .NTX en .DBT) are created and
   the help message can be made in a small window. After typing in all help
   messages the environment variable must be eliminated with the DOS
   command ^bSET GWHELP=^b.

 ^bSyntax
   ^bGWHelp(cFunction, nLine, cGetName, [nKey]) Ä> NIL

   in combination with the SETKEY-function :
         ^b#INCLUDE 'INKEY.CH'
         ^bSETKEY( K_F1, {|cFunction, nLine, cGetName| GWHelp(cFunction,
         ^bnLine, cGetName, K_F1) } )

!seealso: "GWWaitKey()" 
'------------------------------------------------------------------------------



!short: GWKeyboard()    ^bStuff a key value into the keyboard buffer
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWKeyboard()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Stuff a key value into the keyboard buffer.

 ^bSyntax
   ^bGWKeyboard(nKey) Ä> NIL

!seealso: 
'------------------------------------------------------------------------------



!short: GWMemoDisplay() ^bDisplay a long character string/memo field                  ^A4FM
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWMemoDisplay()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Display a long character string/memo field in a window. The string is
   only displayed, so no editing can be done. Also scrolling up and down is
   not possible. Only the first few lines of the string are displayed; if
   the string is bigger than the capacity of the window, the rest is not
   displayed.

 ^bSyntax
   ^bGWMemoDisplay([cString], [nTop], [nLeft], [nBottom], [nRight],
   ^b              [cTitle], [cColor], [lSave]) -> aResult

!seealso: 
'------------------------------------------------------------------------------



!short: GWMemoEdit()    ^bDisplay or edit character strings and memo fields
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWMemoEdit()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   GWMemoEdit() is a user-interface and general purpose text editing
   function that can be used to edit memo fields and long character
   strings.  Editing occurs within a specified window region placed
   anywhere on the screen.

 ^bSyntax
   ^bGWMemoEdit([cString], [nTop], [nLeft], [nBottom], [nRight],
   ^b           [lEditMode], [cTitle], [cUserFunction], [nLineLength],
   ^b           [nTabSize],  [nTextBufferRow], [nTextBufferColumn],
   ^b           [nWindowRow],[nWindowColumn]) -> cResult

!seealso: 
'------------------------------------------------------------------------------



!short: GWMusic()       ^bPlay some tones
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWMusic()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Play some tones. e.g. if the user makes a mistake or something is
   finished.

 ^bSyntax
   ^bGWMusic(nTone) Ä> NIL

!seealso: 
'------------------------------------------------------------------------------



!short: GWPassword()    ^bAsk an user for a password                                  ^A5FO
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWPassword()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Ask an user for a password. This password isn't displayed on the screen.

 ^bSyntax
   ^bGWPassword([nMaxLen], [cChars], [cColors]) Ä> cResult

!seealso: 
'------------------------------------------------------------------------------



!short: GWRandom()      ^bGenerates a random number
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWRandom()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Generates a random number.

 ^bSyntax
   ^bGWRandom() Ä> nResult

!seealso: 
'------------------------------------------------------------------------------



!short: GWSpeed()       ^bDetermine the relative speed of the computer
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWSpeed()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Determine the relative speed of the computer on which the application is
   executed. This useful when you want to adjust the speed of your
   application for different machines. The functions GWExplode() and
   GWImplode() use this function to let the ex- and implosion act the same
   on different machines.

 ^bSyntax
   ^bGWSpeed() Ä> nResult

!seealso: gw23_014.ngo:"GWExplode()" 
'------------------------------------------------------------------------------



!short: GWTrace()       ^bCreate or view an array with the program's call stack
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWTrace()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Create or view an array with the program's call stack. This is very
   useful during application development. If assigned to a key (with
   SETKEY) you can constantly monitor the program's call stack.

 ^bSyntax
   ^bGWTrace([lBrowse]) -> aResult
   or
   ^bSETKEY(<nKey>, {|| aResult := GWTrace([lBrowse]) })

!seealso: 
'------------------------------------------------------------------------------



!short: GWVarExist()    ^bCheck if a variable exists
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWVarExist()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Check if a variable exists. This is very useful when you restore a
   MEM-file and your application uses the variables from this MEM-file.
   With GWVarExist you can check if all the variables are there and if not
   initialize them yourself.

 ^bSyntax
   ^bGWVarExist(bVar) Ä> lResult

!seealso: 
'------------------------------------------------------------------------------



!short: GWWaitKey()     ^bReplacement for INKEY(), respond also on SETKEY()
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWWaitKey()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Replacement for INKEY() that also respond on SETKEY() redefines.

 ^bSyntax
   ^bGWWaitKey([nWaitTime], [bFunc], [nSeconds]) Ä> nResult

!seealso: "GWHelp()" gw23_014.ngo:"GWScreenSavers" 
'------------------------------------------------------------------------------



!short: GWaSearch()     ^bSearch for a value in a column of a 2 dimensional array     ^A4FM
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWaSearch()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Search for a value in a column of a 2 dimensional array.

 ^bSyntax
   ^bGWaSearch(aArray, nColumn, xVar) Ä> nResult

!seealso: 
'------------------------------------------------------------------------------



!short: ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
'------------------------------------------------------------------------------
 ^A3E What did you expect to see here? ^A3E
!seealso: 
'------------------------------------------------------------------------------



!short: ^A1F³  ^A1EMouse functions                         ^A10  ³^A10
'------------------------------------------------------------------------------
 ^A5F This screen is left blank intentionally... ^A5F
!seealso: 
'------------------------------------------------------------------------------



!short: ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
'------------------------------------------------------------------------------
 ^A4E Press every key to continue... ^A4E
!seealso: 
'------------------------------------------------------------------------------



!short: GWAction()      ^bWait for a mouse button or key to be pressed                ^A4FM
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWAction()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Wait for a mouse button or keyboard to be pressed. The pressed keyboard
   value is returned. If the left mouse button is pressed K_ENTER is
   returned and if the right mouse button is pressed twice K_ESCAPE is
   returned. This function uses GWmWait().

 ^bSyntax
   ^bGWAction([bFunc], [nSeconds], [aValues]) -> nResult

!seealso: "GWLastKey()" "GWmWait()" gw23_014.ngo:"GWScreenSavers" 
'------------------------------------------------------------------------------



!short: GWLastKey()     ^bGet the GWAction() value of the last key or mouse button    ^A2FN
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWLastKey()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Get the GWAction() value of the last key or mouse button. This function
   is a replacement of LASTKEY() that can only return values from the
   keyboard. This function can also return values from the mouse buttons.
   This is useful if you gave the mouse buttons special values. For example
   if you used GWAction(,, {-50,-51}) and the user pressed the left button
   then GWLastKey() will return -50.

 ^bSyntax
   ^bGWLastKey() -> nResult

!seealso: "GWAction()" 
'------------------------------------------------------------------------------



!short: GWmCol()        ^bGet the current mouse column number
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWmCol()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Get the current mouse column number.

 ^bSyntax
   ^bGWmCol() -> nResult

!seealso: "GWmRow()" "GWmPosition()" 
'------------------------------------------------------------------------------



!short: GWmDblClick()   ^bGet/set the double click time of the mouse buttons
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWmDblClick()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Get/set double click time of the mouse buttons.

 ^bSyntax
   ^bGWmDblClick([nTime]) -> nResult

!seealso: "GWmWait()" 
'------------------------------------------------------------------------------



!short: GWmDirection()  ^bGet the direction the mouse cursor is moving in
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWmDirection()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Get the direction the mouse cursor is moving in.

 ^bSyntax
   ^bGWmDirection() -> nResult

!seealso: "GWmMotion()" 
'------------------------------------------------------------------------------



!short: GWmHRange()     ^bSet the minimum and maximum row for mouse movements
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWmHRange()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Set the minimum and maximum row for mouse movements.

 ^bSyntax
   ^bGWmHRange([nMin], [nMax]) -> NIL

!seealso: "GWmRange()" "GWmVRange()" 
'------------------------------------------------------------------------------



!short: GWmInArea()     ^bCheck if the mouse is inside an area
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWmInArea()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Check if the mouse cursor is inside an area.

 ^bSyntax
   ^bGWmInArea(nTop, nLeft, nBottom, nRight) -> lResult

!seealso: 
'------------------------------------------------------------------------------



!short: GWmInit()       ^bCheck mouse availability and number of buttons
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWmInit()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Check if there is a mouse installed and if so how many buttons are
   available.

 ^bSyntax
   ^bGWmInit(@nButtons) -> lResult

!seealso: "GWmOn()" "GWmOff()" 
'------------------------------------------------------------------------------



!short: GWmMotion()     ^bGet the number of vertical and horizontal mickeys moved
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWmMotion()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Get the number of vertical and horizontal mickeys moved since the last
   call.

 ^bSyntax
   ^bGWmMotion(aMotion) -> NIL

!seealso: "GWmDirection()" 
'------------------------------------------------------------------------------



!short: GWmOff()        ^bTurn the mouse cursor off
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWmOff()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Turn the mouse cursor off.

 ^bSyntax
   ^bGWmOff() -> NIL

!seealso: "GWmOn()" 
'------------------------------------------------------------------------------



!short: GWmOn()         ^bTurn the mouse cursor on
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWmOn()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Turn the mouse cursor on.

 ^bSyntax
   ^bGWmOn() -> NIL

!seealso: "GWmOff()" 
'------------------------------------------------------------------------------



!short: GWmPosition()   ^bGet the current mouse row and column numbers
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWmPosition()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Get the current mouse row and column numbers.

 ^bSyntax
   ^bGWmPosition() -> aResult

!seealso: "GWmCol()" "GWmRow()" 
'------------------------------------------------------------------------------



!short: GWmPresent()    ^bCheck mouse availability
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWmPresent()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Check if there a mouse installed or available. Before using this
   function be sure to activate mouse support with GWmUse(.T.).

 ^bSyntax
   ^bGWmPresent([lForce]) -> lResult

!seealso: "GWmInit()" "GWmUse()" 
'------------------------------------------------------------------------------



!short: GWmRange()      ^bSet the minimum/maximum row/column for mouse movements
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWmRange()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Set the minimum and maximum row and column for mouse movements.

 ^bSyntax
   ^bGWmRange([nTop], [nLeft], [nBottom], [nRight]) -> NIL

!seealso: "GWmHRange()" "GWmVRange()" 
'------------------------------------------------------------------------------



!short: GWmRead()       ^bRead mouse status and mouse position
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWmRead()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Read the mouse status and the mouse cursor position.

 ^bSyntax
   ^bGWmRead(aMouse) -> NIL

!seealso: "GWmCol()" "GWmRow()" "GWmPosition()" "GWmWaitButton()" 
'------------------------------------------------------------------------------



!short: GWmRow()        ^bGet the current mouse row number
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWmRow()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Get the current mouse row number.

 ^bSyntax
   ^bGWmRow() -> nResult

!seealso: "GWmCol()" "GWmPosition()" 
'------------------------------------------------------------------------------



!short: GWmSet()        ^bGet/set mouse cursor availability
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWmSet()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Check if the mouse cursor is 'on' and visible. This function can also
   make de mouse cursor invisible, but let it remain active.

 ^bSyntax
   ^bGWmSet([lMode]) -> lResult

!seealso: "GWmOn()" "GWmOff()" 
'------------------------------------------------------------------------------



!short: GWmSetPos()     ^bPosition the mouse cursor
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWmSetPos()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Position the mouse cursor somewhere on the screen.

 ^bSyntax
   ^bGWmSetPos([nRow], [nCol]) -> NIL

!seealso: 
'------------------------------------------------------------------------------



!short: GWmUse()        ^bMake an application mouse sensitive (or not)                ^A4FM
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWmUse()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Make an application mouse sensitive (or not).

 ^bSyntax
   ^bGWmUse([lUseMouse]) -> lResult
     or
   ^bSET MOUSE ON|OFF

!seealso: "GWmPresent()" 
'------------------------------------------------------------------------------



!short: GWmVRange()     ^bSet the minimum and maximum column for mouse movement
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWmVRange()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Set the minimum and maximum column for mouse movements.

 ^bSyntax
   ^bGWmVRange([nMin], [nMax]) -> NIL

!seealso: "GWmHRange()" "GWmRange()" 
'------------------------------------------------------------------------------



!short: GWmWait()       ^bWait for a button or key to be pressed, like GWWaitKey(0)   ^A4FM
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWmWait()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Wait for a button or key to be pressed. This function acts like
   WAITKEY(0).

 ^bSyntax
   ^bGWmWait([bFunc], [nSeconds]) -> aResult

!seealso: "GWAction()" "GWmWaitButton()" gw23_014.ngo:"GWScreenSavers" 
'------------------------------------------------------------------------------



!short: GWmWaitButton() ^bWait for button 1 or 2 or key to be pressed
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWmWaitButton()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Wait for button 1 or 2 or key to be pressed. This function acts like
   GWWAITKEY(0).

 ^bSyntax
   ^bGWmWaitButton(nButton) -> nResult

!seealso: "GWmRead()" "GWmWait()" 
'------------------------------------------------------------------------------



!short: SET MOUSE ...   ^bMake an application mouse sensitive (or not)                ^A2FN
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1ESET MOUSE ...^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Make an application mouse sensitive (or not).

 ^bSyntax
   ^bSET MOUSE ON|OFF
!seealso: "GWmUse()" 
'------------------------------------------------------------------------------



!short: ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
'------------------------------------------------------------------------------
 ^A3E What did you expect to see here? ^A3E
!seealso: 
'------------------------------------------------------------------------------



!short: ^A1F³  ^A1EPrinter functions                       ^A10  ³^A10
'------------------------------------------------------------------------------
 ^A5F This screen is left blank intentionally... ^A5F
!seealso: 
'------------------------------------------------------------------------------



!short: ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
'------------------------------------------------------------------------------
 ^A4E Press every key to continue... ^A4E
!seealso: 
'------------------------------------------------------------------------------



!short: GWBlank()       ^bPrint a number of blanc lines
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWBlank()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Print a number of blank lines on the screen or the printer.

 ^bSyntax
   ^bGWBlank([nNumber]) Ä> NIL

!seealso: 
'------------------------------------------------------------------------------



!short: GWHPBehavior()  ^bGet/set the behavior of the GWHP* functions
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWHPBehavior()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Get/set the behavior of the GWHP* functions. By default these functions
   print a printer control string directly to the printer (if GWPrintOn()
   is used). This behavior can be turned off with this function.

 ^bSyntax
   ^bGWHPBehavior([lBehavior]) -> lResult

!seealso: 
'------------------------------------------------------------------------------



!short: GWHPCopies()    ^bDefine the number of copies to print
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWHPCopies()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Define the number of copies to print.

 ^bSyntax
   ^bGWHPCopies([nCopies]) -> cResult

!seealso: 
'------------------------------------------------------------------------------



!short: GWHPFont()      ^bSelect a font with all kind of specifications
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWHPFont()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Select a font with all kind of specifications, e.g. Spacing, Pitch,
   Style and so on. To get a certain font out of your HP Laserjet a lot of
   specifications must be send to the it. Also see your "HP User's
   (Reference) Manual" or the "Font Test List" made by your printer. Also
   look at the header-file "HP.CH" for the #DEFINEs of Spacing, Style,
   Stroke and Typeface. This function does nothing more then calling the
   functions GWHPSpacing(), GWHPPitch(), GWHPPointSize(), GWHPStyle(),
   GWHPStroke() and HPTypeFace().

 ^bSyntax
   ^bGWHPFont([nTypeFace], [nSpacing], [nPitch], [nPoints], [nStyle],
   ^b       [nStroke]) -> cResult

!seealso: 
'------------------------------------------------------------------------------



!short: GWHPLPI()       ^bDefine the number of lines per inch
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWHPLPI()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Define the number of lines per inch.

 ^bSyntax
   ^bGWHPLPI([nLines]) -> cResult

!seealso: "GWHPPortrait()" 
'------------------------------------------------------------------------------



!short: GWHPLandscape() ^bSets landscape mode
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWHPLandscape()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Sets HP landscape mode.

 ^bSyntax
   ^bGWHPLandscape() -> cResult

!seealso: "GWHPPortrait()" 
'------------------------------------------------------------------------------



!short: GWHPLeftMargin( ^bDefine the left margin
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWHPLeftMargin(^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Define the left margin.

 ^bSyntax
   ^bGWHPLeftMargin([nLeftMargin]) -> cResult

!seealso: 
'------------------------------------------------------------------------------



!short: GWHPPitch()     ^bDefine the number of characters per inch
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWHPPitch()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Define the number of characters per inch.

 ^bSyntax
   ^bGWHPPitch([nPitch]) -> cResult

!seealso: "GWHPFont()" 
'------------------------------------------------------------------------------



!short: GWHPPointSize() ^bDefine the height of scalable typefaces
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWHPPointSize()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Define the height of scalable typefaces (e.g. typefaces CG TIMES and
   UNIVERS).

 ^bSyntax
   ^bGWHPPointSize([nPointSize]) -> cResult

!seealso: "GWHPFont()" 
'------------------------------------------------------------------------------



!short: GWHPPortrait()  ^bSets portrait mode
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWHPPortrait()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Sets HP portrait mode.

 ^bSyntax
   ^bGWHPPortrait() -> cResult

!seealso: "GWHPLandscape()" 
'------------------------------------------------------------------------------



!short: GWHPReset()     ^bReset the HP Laserjet
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWHPReset()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Reset the HP Laserjet and use default HP values.

 ^bSyntax
   ^bGWHPReset() -> cResult

!seealso: 
'------------------------------------------------------------------------------



!short: GWHPSpacing()   ^bDefine the spacing between characters
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWHPSpacing()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Define the spacing between characters.

 ^bSyntax
   ^bGWHPSpacing([nSpacing]) -> cResult

!seealso: 
'------------------------------------------------------------------------------



!short: GWHPStroke()    ^bDefine the width of the characters
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWHPStroke()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Define the width of the characters.

 ^bSyntax
   ^bGWHPStroke([nStroke]) -> cResult

!seealso: 
'------------------------------------------------------------------------------



!short: GWHPStyle()     ^bDefine the style of the characters
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWHPStyle()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Define the style of the characters.

 ^bSyntax
   ^bGWHPStyle([nStyle]) -> cResult

!seealso: 
'------------------------------------------------------------------------------



!short: GWHPSymbolSet() ^bSelect the symbol set to use
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWHPSymbolSet()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Select the symbol set that must be used.
   In the header file HP.CH there are several symbol set defined.

 ^bSyntax
   ^bGWHPSymbolSet([nSymbolSet]) -> cResult

!seealso: 
'------------------------------------------------------------------------------



!short: GWHPTopMargin() ^bDefine the top margin
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWHPTopMargin()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Define the top margin.

 ^bSyntax
   ^bGWHPTopMargin([nTopMargin]) -> cResult

!seealso: 
'------------------------------------------------------------------------------



!short: GWHPTypeFace()  ^bDefine the typeface
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWHPTypeFace()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Define the typeface (e.g. COURIER, PRESTIGE_ELITE).

 ^bSyntax
   ^bGWHPTypeface([nTypeface]) -> cResult

!seealso: 
'------------------------------------------------------------------------------



!short: GWKyoCode()     ^bSend printercontrol characters to a KYOCERA                 ^A5FO
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWKyoCode()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Send printercontrol characters to a KYOCERA. Use this function in
   conjunction with Kyo_On and GWKyoOff().
   PS. do not use the commando 'SET PRINT OFF' in the meantime.

 ^bSyntax
   ^bGWKyoCode(cPrinterChars) Ä> NIL^b

!seealso: "GWKyoOn()" "GWKyoOff()" 
'------------------------------------------------------------------------------



!short: GWKyoOff()      ^bDisable printing to a KYOCERA and clear the PRINTERSPOOLER  ^A5FO
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWKyoOff()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Disable printing to a KYOCERA and clear the PRINTERSPOOLER. Use this
   function in conjunction with Kyo_On.
   PS. this function executes the command 'SET PRINT OFF' too.

 ^bSyntax
   ^bGWKyoOff([lConsoleOn]) Ä> NIL^b

!seealso: "GWKyoCode()" "GWKyoOn()" 
'------------------------------------------------------------------------------



!short: GWKyoOn()       ^bGeneral remarks with the HP Laserjet functions              ^A5FO
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWKyoOn()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Select printer-port for a KYOCERA and set printing on. Printercontrol
   characters can be given too. Use this function in conjunction with
   GWKyoOff().
   PS. this function executes the command 'SET PRINT ON' too.

 ^bSyntax
   ^bGWKyoOn([cPrinterport], [cPrinterChars], [lConsoleOff]) Ä> NIL

!seealso: "GWKyoCode()" "GWKyoOff()" 
'------------------------------------------------------------------------------



!short: GWLPT1Check()   ^bCheck if the LPT1-port is ready
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWLPT1Check()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Check if the LPT1-port is ready to receive printcommands.

 ^bSyntax
   ^bGWLPT1Check() Ä> lResult

!seealso: "GWPrintOn()" "GWPrintOff()" 
'------------------------------------------------------------------------------



!short: GWPageFull()    ^bCheck if the lines to print fit on a page
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWPageFull()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Check if the lines to print fit on a page, if not an EJECT is send to
   the printer and a number lines is skipped as a topmargin.

 ^bSyntax
   ^bGWPageFull([nPageLength], [nToPrint], [nTopMargin]) Ä> lResult

!seealso: 
'------------------------------------------------------------------------------



!short: GWPrintOff()    ^bDisable printing and clear the PRINTERSPOOLER
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWPrintOff()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Disable printing and clear the PRINTERSPOOLER. Use this function in
   conjunction with Kyo_On.
   PS. this function executes the command 'SET PRINT OFF' too.

 ^bSyntax
   ^bGWPrintOff([lConsoleOn]) Ä> NIL^b

!seealso: "GWPrintOn()" 
'------------------------------------------------------------------------------



!short: GWPrintOn()     ^bSelect printer-port and set printing on
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWPrintOn()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Select printer-port and set printing on. Use this function in
   conjunction with GWPrintOff().
   PS. this function executes the command 'SET PRINT ON' too.

 ^bSyntax
   ^bGWPrintOn([cPrinterport], [lConsoleOff]) Ä> lResult^b

!seealso: "GWPrintOff()" 
'------------------------------------------------------------------------------



!short: GWPrintText()   ^bPrints a string to a printer using Memoline()
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWPrintText()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Prints a string to a printer using Memoline() and wrapping text to the
   next line if necessary. If the entire string doesn't fit on the page, it
   will be printed on the next page.

 ^bSyntax
   ^bGWPrintText(cText, [nLen], [nPageLength], [nTop]) -> NIL

!seealso: "GWPrintOn()" "GWPrintOff()" 
'------------------------------------------------------------------------------



!short: LABEL ...       ^bPrint labels of any size to a printer or file               ^A2FN
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1ELABEL ...^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Print labels of any size to a printer or file. With this function you
   can do more than simply print labels. In fact you can use it for simple
   reporting too (see the examples).
   Be sure to initialize the printer before using this function. It simply
   prints the information to the default output device, which is by default
   the screen.

 ^bSyntax
   ^bLABEL xFields                      ;
   ^b      [LINES nLines]               ;
   ^b      [WIDTH nWidth]               ;
   ^b      [HORIZONTAL [SPACE] nHSpace] ;
   ^b      [VERTICAL [SPACE] nVSpace]   ;
   ^b      [COLUMNS nColumns]           ;
   ^b      [PAGELENGTH nLength]         ;
   ^b      [LEFTMARGIN nLMargin]        ;
   ^b      [TOPMARGIN nTMargin]         ;
   ^b      [COPIES nCopies]             ;
   ^b      [SAMPLES]

!seealso: 
'------------------------------------------------------------------------------



!short: ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
'------------------------------------------------------------------------------
 ^A3E What did you expect to see here? ^A3E
!seealso: 
'------------------------------------------------------------------------------



!short: ^A1F³  ^A1EScreen functions                        ^A10  ³^A10
'------------------------------------------------------------------------------
 ^A5F This screen is left blank intentionally... ^A5F
!seealso: 
'------------------------------------------------------------------------------



!short: ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
'------------------------------------------------------------------------------
 ^A4E Press every key to continue... ^A4E
!seealso: 
'------------------------------------------------------------------------------



!short: GWClearScreen() ^bClear the screen
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWClearScreen()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Clear the screen with a given color and characterstring.

 ^bSyntax
   ^bGWClearScreen(cColors, [cFillchars]) Ä> NIL

!seealso: 
'------------------------------------------------------------------------------



!short: GWExplode()     ^bDisplay an 'exploded' box
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWExplode()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Display an 'exploded' box.

 ^bSyntax
   ^bGWExplode(nTop, nLeft, nBottom, nRight, [nSteps], [cExploMethod],
   ^b[cColors], [cBorder]) Ä> NIL

!seealso: gw23_011.ngo:"GWSpeed()" 
'------------------------------------------------------------------------------



!short: GWExplosion()   ^bSet/get the explosion mode of box display                   ^A2FN
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWExplosion()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Set/get the explosion mode of box display. This function determines if
   boxes created with GWShadowBox() are displayed exploded. Many functions
   use GWShadowBox() (e.g. GWPullDown(), GWBrowseDBF(), GWAsk() and so on).
   With GWExplosion() you can define the default explosion mode of these
   functions. It also defines the default implosion mode of GWRestScreen().
   If explosion is set 'on' it is still possible to override the default
   for a single function call. So if you write GWRestScreen(aScreen, .F.)
   the screen restore will not be imploded.

 ^bSyntax
   ^bGWExplosion([lExploMode]) -> lResult
     or
   ^bSET EXPLOSION ON|OFF

!seealso: "GWShadowBox()" 
'------------------------------------------------------------------------------



!short: GWMessage()     ^bShows a message in a box
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWMessage()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Shows a message in a shadowed box.

 ^bSyntax
   ^bGWMessage([cText], [cColors], [nRow], [nColumn], [cBorder]) Ä> aResult

!seealso: gw23_010.ngo:"GWAsk()" gw23_011.ngo:"GWCrLf()" "GWRestScreen()" 
'------------------------------------------------------------------------------



!short: GWRestScreen()  ^bRestore a (part of a) screen
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWRestScreen()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Restore a (part of a) screen. The data of the part to restore must be
   saved with the function GWSaveScreen() or GWShadowBox().

 ^bSyntax
   ^bGWRestScreen(aSaveScreen, [lImplode]) Ä> NIL

!seealso: "GWSaveScreen()" "GWShadowBox()" 
'------------------------------------------------------------------------------



!short: GWSaveScreen()  ^bSave a (part of a) screen
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWSaveScreen()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Save a (part of a) screen in an array that can be restored with the
   function GWRestScreen().

 ^bSyntax
   ^bGWSaveScreen(nTop,nLeft,nBottom,nRight) Ä> aResult

!seealso: "GWRestScreen()" "GWShadowBox()" 
'------------------------------------------------------------------------------



!short: GWScreen2File() ^bSaves a screen to a textfile
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWScreen2File()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Saves the current screen to an ASCII textfile. The filename is uniquely
   named SCR#####.TXT, where ##### stands for the invocation number.

 ^bSyntax
   ^bSETKEY(nKey, {||GWScreen2File()})

!seealso: 
'------------------------------------------------------------------------------



!short: GWScreenSaver() ^bActivate a screensaver after x seconds                      ^A2FN
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWScreenSaver()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Activate a screensaver after x seconds of keyboard or mouse inactivity.
   With this function you can specify a screensaver for your entire
   application with 1 line of code. After this line all functions that wait
   for an action from a user will activate a screensaver after the
   specified number of seconds. The functions from which the screensaver
   will be activated are : GWAsk(), GWBrowseDBF(), GWBrowseText(),
   GWBrowseArray, GWPDown() and many more.

 ^bSyntax
   ^bGWScreenSaver([bSaver], [nSeconds]) -> NIL
     or
   ^bSET SCREENSAVER [TO] [bSaver] [AFTER nSeconds]

!seealso: "GWScreenSavers" 
'------------------------------------------------------------------------------



!short: GWScreenSavers  ^bGhostware Screensavers                                      ^A4FM
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWScreenSavers^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   The library contains 5 screensaver :
   GWBlockDrop() - drops parts of the screen;
   GWMagic()     - removes and restores parts of the screen;
   GWShuffle()   - shuffles the screen;
   GWStars()     - displays stars on the screen.
   GWWeave()     - weaves the screen;
   The screensavers stay active until the user 'presses any key to
   continue'.
   These screensavers can be used within the functions :
     ^bGWAction(), GWmWait(), GWPDown(), GWWaitKey()
   The best way to activate the screensaver is using the function
   GWScreenSaver() (or the command SET SCREENSAVER TO...).

 ^bSyntax
   ^bGWBlockDrop(bBlock, nSeconds)
   ^bGWMagic(bBlock, nSeconds)
   ^bGWShuffle(bBlock, nSeconds)
   ^bGWStars(bBlock, nSeconds)
   ^bGWWeave(bBlock, nSeconds)

!seealso: "GWScreenSaver()" gw23_015.ngo:"GWUseSpecial()" 
'------------------------------------------------------------------------------



!short: GWShadowBox()   ^bDisplay a box with REAL shadow                              ^A4FM
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWShadowBox()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Display a box with REAL shadow. Just try to draw several boxes over each
   other to see the effect.
   ^bNote : Use SETBLINK(.F.) at the beginning of your application
   ^b       to prevent blinking of shadowed text.

 ^bSyntax
   ^bGWShadowBox(nTop, nLeft, nBottom, nRight, [cColors], [nLevels],
     ^b[cBorder], [lExplode]) Ä> aResult
         or
   ^b#INCLUDE "GHOST.CH"
   ^bGWBOX                                (or SHADOWBOX)
     ^b[AT <nTop>, <nLeft>, <nBottom>, <nRight>]
     ^b[COLOR <cColors>]
     ^b[LEVEL <nLevels>]
     ^b[BORDER <cBorder>]
     ^b[EXPLODE]
     ^b[TO <aResult>]

!seealso: "GWRestScreen()" "GWSaveScreen()" 
'------------------------------------------------------------------------------



!short: GWShadowHeight( ^bSet/get the shadow height of box                            ^A2FN
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWShadowHeight(^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Set/get the shadow height of box. This function determines if boxes
   created with GWShadowBox() must have a shadow. Many functions use
   GWShadowBox() (e.g. GWPullDown(), GWBrowseDBF(), GWAsk() and so on).
   With GWShadowHeight() you can define the default shadow height of these
   functions. If the height is set, it is still possible to override the
   default for a single function call.
   ^bNote : Use SETBLINK(.F.) at the beginning of your application to
   ^b       prevent blinking of shadowed text.

 ^bSyntax
   ^bGWShadowHeight([nHeight]) -> nResult
     or
   ^bSET SHADOWHEIGHT TO [nHeight]

!seealso: "GWShadowBox()" 
'------------------------------------------------------------------------------



!short: GWShowLogo()    ^bShow 1 or 2 (intro)screens
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWShowLogo()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Show 1 or 2 (intro)screens. On a VGA-screen 2 'normal' screens can be
   showed underneath each other in 50*80 screenmode. The system pauses for
   nWaitSeconds to go on.

 ^bSyntax
   ^bGWShowLogo(cScreen1,cScreen2,[nWaitseconds]) Ä> NIL

!seealso: 
'------------------------------------------------------------------------------



!short: GWSpin()        ^bSpin a screenpart a number of times
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWSpin()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Spin a screenpart a number of times. The ASCII characters between 179
   and 222 will be mirrored during the rotation too. So character ´ will be
   mirrored to character Ã. It's a nice effect for intro-screens.

 ^bSyntax
   ^bGWSpin(nTop, nLeft, nBottom, nRight, [cColors], [nSpins],
   [nSpeedFrom],
     ^b[nSpeedTo], [nStep]) Ä> NIL

!seealso: 
'------------------------------------------------------------------------------



!short: GWStatusBar()   ^bShow a statusbar
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWStatusBar()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Show a statusbar of the current action.

 ^bSyntax
   ^bGWStatusBar(xInput, [nRow], [cColors]) Ä> aResult of NIL

!seealso: "GWRestScreen()" 
'------------------------------------------------------------------------------



!short: GWStatusLine()  ^bShow a centered message on the bottom line
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWStatusLine()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Show a centered message on the bottom line.

 ^bSyntax
   ^bGWStatusLine(cText, [nRow], [cColors]) Ä> NIL

!seealso: 
'------------------------------------------------------------------------------



!short: GWWatch()       ^bDisplay a watch
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWWatch()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Display a watch if a user have to wait before a certain process is
   finished.

 ^bSyntax
   ^bGWWatch([nTop],[nLeft]) Ä> NIL

!seealso: 
'------------------------------------------------------------------------------



!short: SET EXPLOSION   ^bDisplay boxes exploded (or not)                             ^A2FN
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1ESET EXPLOSION^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Display boxes exploded (or not).

 ^bSyntax
   ^bSET EXPLOSION ON|OFF
!seealso: "GWExplosion()" 
'------------------------------------------------------------------------------



!short: SET SCREENSAVER ^bActivate a screensaver after x seconds                      ^A2FN
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1ESET SCREENSAVER^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Activate a screensaver after x seconds.

 ^bSyntax
   ^bSET SCREENSAVER [TO] [bSaver] [AFTER nSeconds]
!seealso: "GWScreenSaver()" 
'------------------------------------------------------------------------------



!short: SET SHADOWHEIGH ^bSet the height of the shadow for boxes                      ^A2FN
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1ESET SHADOWHEIGH^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Set the height of the shadow of boxes.

 ^bSyntax
   ^bSET SHADOWHEIGHT TO [nHeight]
!seealso: "GWShadowHeight(" 
'------------------------------------------------------------------------------



!short: ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
'------------------------------------------------------------------------------
 ^A3E What did you expect to see here? ^A3E
!seealso: 
'------------------------------------------------------------------------------



!short: ^A1F³  ^A1EVideo functions                         ^A10  ³^A10
'------------------------------------------------------------------------------
 ^A5F This screen is left blank intentionally... ^A5F
!seealso: 
'------------------------------------------------------------------------------



!short: ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
'------------------------------------------------------------------------------
 ^A4E Press every key to continue... ^A4E
!seealso: 
'------------------------------------------------------------------------------



!short: GWAllVGAColors( ^bGet/set the RGB definitions for all colors                 ^A3FX^A3F
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWAllVGAColors(^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Change the all RGB (Red, Green and Blue) definitions for all colors of a
   VGA system. With this function you can redefine the default PC colors.
   Before using this function you must first enable the color system with
   GWEnableColor(). Before ending the applications you must disable the
   color system with GWDisableColor(). This resets the colors to the
   default PC colors.

 ^bSyntax
   ^bGWAllVGAColor([cColors]) -> cResult

!seealso: "GWEnableColor()" "GWModColor()" 
'------------------------------------------------------------------------------



!short: GWDisableColor( ^bDisable the redefinition of colors                         ^A3FX^A3F
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWDisableColor(^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Disable the redefinition of the colors of a VGA system.

 ^bSyntax
   ^bGWDisableColor() -> NIL

!seealso: "GWEnableColor()" "GWVGAColor()" 
'------------------------------------------------------------------------------



!short: GWEnableColor() ^bEnable the redefinition of colors                          ^A3FX^A3F
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWEnableColor()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Enable the redefinition of the colors of a VGA system. After this
   command the colors can be changed with GWVGAColor(). To disable this
   again use GWDisableColor().

 ^bSyntax
   ^bGWEnableColor() -> lResult

!seealso: "GWDisableColor(" "GWVGAColor()" 
'------------------------------------------------------------------------------



!short: GWEnabled()     ^bCheck if the redefinition of colors is enabled
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWEnabled()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Check if the redefinition of the colors of a VGA system is enabled with
   GWEnableColor().

 ^bSyntax
   ^bGWEnabled() -> lResult

!seealso: "GWEnableColor()" "GWDisableColor(" "GWVGAColor()" 
'------------------------------------------------------------------------------



!short: GWIsCGA()       ^bCheck if CGA adapter is available                          ^A3FX^A3F
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWIsCGA()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Check if CGA adapter is available.

 ^bSyntax
   ^bGWIsCGA() -> lResult

!seealso: "GWVideo()" 
'------------------------------------------------------------------------------



!short: GWIsEGA()       ^bCheck if EGA adapter is available                          ^A3FX^A3F
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWIsEGA()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Check if EGA adapter is available.

 ^bSyntax
   ^bGWIsEGA() -> lResult

!seealso: "GWVideo()" 
'------------------------------------------------------------------------------



!short: GWIsMono()      ^bCheck if monochroom adapter is available                   ^A3FX^A3F
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWIsMono()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Check if monochroom adapter is available.

 ^bSyntax
   ^bGWIsMono() -> lResult

!seealso: "GWVideo()" 
'------------------------------------------------------------------------------



!short: GWIsVGA()       ^bCheck if VGA adapter is available                          ^A3FX^A3F
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWIsVGA()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Check if VGA adapter is available.

 ^bSyntax
   ^bGWIsVGA() -> lResult

!seealso: "GWVideo()" 
'------------------------------------------------------------------------------



!short: GWLoadFont()    ^bLoad 1 or more character designs into a font block         ^A3FX^A3F
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWLoadFont()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Load 1 or more character designs into a font block. This function makes
   it possible to change the shape of any character. This way you can make
   your screens more attractive; you can design special characters or
   icons.

 ^bSyntax
   ^bGWLoadFont(cFont, [nStartFont], [nBlock]) -> NIL

!seealso: "GWMakeChar()" "GWResetFont()" "GWScanLines()" "GWUseFonts()" 
'------------------------------------------------------------------------------



!short: GWMakeChar()    ^bMake a character string for GWLoadFont()
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWMakeChar()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Make a character string for GWLoadFont() based on a design that is
   supplied as an array.

 ^bSyntax
   ^bGWMakeChar(aFont) -> cResult

!seealso: "GWLoadFont()" "GWScanLines()" 
'------------------------------------------------------------------------------



!short: GWModColor()    ^bModify the 16 VGA colors interactively                     ^A3FX^A3F
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWModColor()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Modify the RGB (Red, Green and Blue) definitions for the 16 colors of a
   VGA system. Before using this function you must first enable the color
   system with GWEnableColor().
   The colors can be modified with the cursor keys. If you press the F4 key
   the current (modified) colors are saved in Clipper format to a file
   named GWCOLOR.xxx (xxx=sequence number). The file is a piece of Clipper
   code that can be inserted in your application. Just try it.
   Also see the sample program GW_DEMO.PRG.

 ^bSyntax
   ^bGWModColor() -> NIL

!seealso: "GWAllVGAColors(" "GWEnableColor()" 
'------------------------------------------------------------------------------



!short: GWReadFont()    ^bRead a font file and load it in a block                    ^A3FX^A3F
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWReadFont()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Read a font file and load it into a block, if it can be found and so on.

 ^bSyntax
   ^bGWReadFont(cFile, [nBlock]) -> nResult

!seealso: "GWLoadFont()" "GWUseFonts()" "GWUseSpecial()" 
'------------------------------------------------------------------------------



!short: GWResetFont()   ^bReset the redefined font to default PC font                ^A3FX^A3F
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWResetFont()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Reset the redefined font to the default PC font. This way the changed
   characters are reset to their original shape.

 ^bSyntax
   ^bGWResetFont() -> NIL

!seealso: "GWLoadFont()" "GWMakeChar()" 
'------------------------------------------------------------------------------



!short: GWScanLines()   ^bDetermine the number of scanlines per character            ^A3FX^A3F
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWScanLines()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Determine the number of scanlines per character. This is the number of
   lines that are necessary to make up a character on the screen. EGA
   characters have 14 scanlines, VGA have 16 scanlines.

 ^bSyntax
   ^bGWScanLines() -> nResult

!seealso: "GWMakeChar()" "GWLoadFont()" 
'------------------------------------------------------------------------------



!short: GWUseFonts()    ^bDefine which font blocks should be used                    ^A3FX^A3F
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWUseFonts()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Define which font blocks should be used. This makes it possible to load
   512 characters into 2 block. The 'nNormalBlock' is used for characters
   are displayed on the screen with 'normal' attributes (color string
   without the '+'). The 'nBrightBlock' is used for characters are
   displayed on the screen with bright attributes (color string with the
   '+'). By default both values are 0, so for normal and bright characters
   the used block is the same. If you want to use another block for one or
   the other you must first load a font in that block with the function
   GWLoadFont().

 ^bSyntax
   ^bGWUseFonts([nNormalBlock], [nBrightBlock]) -> NIL

!seealso: "GWLoadFont()" 
'------------------------------------------------------------------------------



!short: GWUseSpecial()  ^bGet/set the usage of the GhostWare special character set   ^A3FX^A3F^A4FM
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWUseSpecial()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Get/set the usage of the GhostWare special character set. The usage is
   completely transparant for the programmer (you) and the user. If you
   turn the usage on, all the user interface functions will automatically
   use the special font. Also see the demo program GW_DEMO.PRG.

 ^bSyntax
   ^bGWUseSpecial([lSpecial]) -> lResult
     or
   ^bSET GRAPH ON|OFF

!seealso: gw23_010.ngo:"GWAsk()" "GWReadFont()" 
'------------------------------------------------------------------------------



!short: GWVGAColor()    ^bGet/set the RGB definitions for a color                    ^A3FX^A3F
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWVGAColor()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Change a RGB (Red, Green and Blue) definition for a color of a VGA
   system. With this function you can redefine a default PC color. Before
   using this function you must first enable the color system with
   GWEnableColor(). Before ending the applications you must disable the
   color system with GWDisableColor(). This resets the colors to the
   default PC colors.

 ^bSyntax
   ^bGWVGAColor(xColor, [aColors]) -> aResult

!seealso: "GWEnableColor()" 
'------------------------------------------------------------------------------



!short: GWVideo()       ^bCheck which video adapter is available                     ^A3FX^A3F
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1EGWVideo()^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Check which video adapter is available.

 ^bSyntax
   ^bGWVideoAdapter() -> nResult

!seealso: "GWIsCGA()" "GWIsEGA()" "GWIsMono()" "GWIsVGA()" 
'------------------------------------------------------------------------------



!short: SET GRAPH ...   ^bSet the usage of the GhostWare special character set       ^A3FX^A3F^A2FN
'------------------------------------------------------------------------------
 ^A4F DEMO version! After registering you will receive a complete version! ^A4F
 ^A1FÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A10¿^A10
 ^A1F³  ^A1ESET GRAPH ...^A10  ³^A10
 ^A1FÀ^A10ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ^A10
 ^bDescription
   Set the usage of the GhostWare special character set.

 ^bSyntax
   ^bSET GRAPH ON|OFF
!seealso: "GWUseSpecial()" 
'------------------------------------------------------------------------------



