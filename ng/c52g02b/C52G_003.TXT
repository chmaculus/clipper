!short: ^bOverview -- Runtime Errors
'------------------------------------------------------------------------------
     There are four ways that a CA-Clipper program can terminate fatally.
     Each of these types of terminations represent different causes for the
     termination and need to be considered separately.

 ^bRuntime recoverable errors^b

     Runtime recoverable errors are expected to happen.  These errors
     generally occur either because of mistakes in your code (e.g. type
     mismatch, divide by zero) or because of some condition of the
     environment (e.g. out of file handles, file sharing violations, memory
     low).  These errors can be trapped in the error system and therefore do
     not necessarily terminate the application.

     If the default error system is being used in the application then
     runtime errors are reported in the following format:

     ^bError | Warning <subSystem>/<subCode> <message text>
     ^b   <filename> | <operation>

 ^bOverview on error recovery^b

     ^bError recovery failure^b

     CA-Clipper's error system depends on communication taking place between
     the error handler and the subsystem that generates the error.  The error
     handler communicates with the subsystem by returning a value indicating
     what the subsystem should attempt to do to recover from the error.  The
     legal values that can be returned are determined by the values contained
     in the error object passed to the error handler for Error:canRetry,
     Error:canDefault, and Error:canSubstitute.  If the error handler returns
     an invalid value to the subsystem (or returns to the subsystem at all
     when these values are all false), then an error recovery failure is
     reported and the application is terminated.

     This exit condition always has the same format:

     ^bError recovery failure, <operation> (<line number>)

     ^bUser abort^b

     The user can abort your application by pressing Alt-C or Ctrl-Break at
     anytime during the execution of your application unless you have
     specifically disabled this feature.  You can disable it with SETCANCEL
     (.F.) or SET(_SET_CANCEL, .F.).

     This exit condition always has the same format:

     ^bCancelled at: <operation> (<line number>)

     ^bMissing error handler^b

     If code is executed before any ERRORBLOCK() can be installed, an
     unrecoverable error will be generated that indicates that no error
     handler is present.  This usually occurs if there is code in ErrorSys()
     before the ERRORBLOCK() function is called.  All code should be moved
     after this line if possible.

     ^bNo ERRORBLOCK() for error at: <operation>
     ^b   (<line number>)

 ^bRuntime recoverable error categories^b

     This section is a summary of runtime recoverable error messages that are
     possible when executing a CA-Clipper application using the supplied
     subsystems.  The messages are divided into categories according to
     subsystem.  Each category is described below, followed by a listing of
     all messages in each category.

     ^bBASE Errors^b

     BASE error messages indicate errors generated by the Base system.  The
     general format of a BASE error message is as follows:

     ^bError | Warning BASE/xxxx <message text> <filename> |
     ^b   <operation>

     ^bTERM Errors^b

     TERM error messages indicate errors generated by the Terminal subsystem.
     The general format of a TERM error message is as follows:

     ^bError | Warning TERM/xxxx <message text> <filename> |
     ^b   <operation>

     ^bDBFNTX Errors^b

     DBFNTX error messages indicate that an error occurred during a database
     or index operation utilizing the DBFNTX database driver.  The general
     format of a DBFNTX error message is as follows:

     ^bError | Warning DBFNTX/xxxx <message text>
     ^b   <filename> |  <operation>

     ^bDBFNDX Errors^b

     DBFNDX error messages indicate that an error occurred during a database
     or index operation utilizing the DBFNDX database driver.  The general
     format of a DBFNDX error message is as follows:

     ^bError | Warning DBFNDX/xxxx <message text>
     ^b   <filename> |  <operation>

     ^bDBCMD Errors^b

     DBCMD error messages occur in the database command set and are unrelated
     to a particular driver.  They occur as a result of command usage rather
     than from a failure of the driver itself.

     ^bError | Warning DBCMD/xxxx <message text>
     ^b   <filename> | <operation>

 ^bRuntime unrecoverable errors^b

     Unrecoverable errors are runtime errors that for some reason cannot make
     use of the error system.  Like runtime errors, it is normal for these
     errors to occur.  This is usually because the system is unable to
     execute the error block.  Almost all of these errors are therefore
     related to the environment (e.g. out of memory, errors reading code to
     execute from disk) and can be fixed by making a change to the
     environment.

     Unrecoverable errors always have the same format:

     ^b<operation> (<line number>) Unrecoverable error xxxx:
     ^b   <message text>
!seealso: 
'------------------------------------------------------------------------------



!short:컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴
!short: ^bBASE Error Messages
!short:
!short: BASE/1001    Undefined function
'------------------------------------------------------------------------------
 ^bBASE/1001    Undefined function^b

     ^bExplanation:^b  You specified a function or procedure that:

     1. You did not link into the current program.

     2. You never directly referred to in the program.

     ^bAction:^b  Make sure you linked the specified function or procedure.
     If you referred to the routine in an index key or macro expression, add
     an EXTERN statement to one of your program files (.prg) for each routine
     that was not linked.

     ^bSee Also:^b  Basic Concepts chapter in the Programming and Utilities
     guide
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1002    Undefined alias
'------------------------------------------------------------------------------
 ^bBASE/1002    Undefined alias^b

     ^bExplanation:^b  You specified an alias not currently associated with
     any work area.

     ^bAction:^b  Make sure the appropriate database file is open. Check to
     see if more than one work area uses the same alias at the same time.  If
     so, designate a unique alias for each work area.  The SELECT() function
     can be used to see if an alias is currently associated with any work
     area.

     ^bSee Also: ^b Basic Concepts chapter in the Programming and Utilities
     guide
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1003    Undefined variable
'------------------------------------------------------------------------------
 ^bBASE/1003    Undefined variable^b

     ^bExplanation:^b  You specified a variable that does not exist or is not
     visible.

     ^bAction:^b

     1. If you specified a database field, make sure you opened the
        appropriate database file and selected the appropriate work area.  If
        you don't want to select another work area, preface the field
        variable reference with the target work area alias.

     2. If you specified a private or public variable, make sure you created
        the variable using either a PRIVATE or PUBLIC statement.

     3. If you specified a local or static variable reference within a macro
        variable, rearrange the code to refer to the variable directly (local
        and static variables are not visible within macro variables).

     The /W compiler option is useful in finding mispelled or incorrectly
     specified variable references.

     ^bSee Also: ^b Basic Concepts chapter in the Programming and Utilities
     guide
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1004    No exported method
'------------------------------------------------------------------------------
 ^bBASE/1004    No exported method^b

     ^bExplanation:^b

     1. You sent a message using the send operator (:), but the left operand
        was not a reference to an object or the receiving object has no
        method with the specified name.

     2. You called the EVAL() function and did not pass a code block as the
        first argument.

     3. You specified a value other than a code block in a context where a
        code block was required.

     ^bAction:^b

     1. Check to make sure that the value being operated on is of the proper
        type or class.

     2. If the error occurs on the send operator (:), make sure the message
        is one of the messages defined for the class.

     3. If the missing method is "EVAL," make sure that code blocks have been
        supplied where required.

     ^bSee Also:^b  Basic Concepts chapter in the Programming and Utilities
     guide, Language Reference chapter of the Reference guide
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1005    No exported variable
'------------------------------------------------------------------------------
 ^bBASE/1005    No exported variable^b

     ^bExplanation:^b  You attempted to assign an exported instance variable
     using the send operator (:), but the left operand was not an object or
     the object has no exported variable with the specified name.

     ^bAction:^b

     1. Check to make sure that the value being operated on is of the proper
        type or class.

     2. Make sure the name of the instance variable is spelled properly.

     ^bSee Also: ^b Basic Concepts chapter in the Programming and Utilities
     guide, Language Reference chapter of the Reference guide
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1065    Argument error: &
'------------------------------------------------------------------------------
 ^bBASE/1065    Argument error: &^b

     ^bExplanation:^b  You specified an argument to the macro operator (&)
     that was not a character value.

     ^bAction:^b  Correct the program.

     ^bSee Also: ^b Language Reference chapter in the Reference guide
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1066    Argument error: conditional
'------------------------------------------------------------------------------
 ^bBASE/1066    Argument error: conditional^b

     ^bExplanation:^b

     1. You specified an argument for a conditional statement such as IF or
        DO WHILE that did not return a logical value.

     2. You specified the IF() function and the first argument did not return
        a logical value.

     ^bAction:^b  Correct the program.

     ^bSee Also: ^b Basic Concepts chapter in the Programming and Utilities
     guide
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1067    Argument error: array dimension
'------------------------------------------------------------------------------
 ^bBASE/1067    Argument error: array dimension^b

     ^bExplanation:^b  The value specifying the length of a new array was
     missing or non-numeric.

     ^bAction:^b  Correct the program.

     ^bSee Also: ^b Basic Concepts chapter in the Programming and Utilities
     guide
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1068    Argument error: array access
'------------------------------------------------------------------------------
 ^bBASE/1068    Argument error: array access ^b

     ^bExplanation:^b  When attempting to retrieve the value of an array
     element, the subscript value was non-numeric or the variable being
     subscripted was not an array.

     ^bAction:^b  Correct the program.

     ^bSee Also: ^b Basic Concepts chapter in the Programming and Utilities
     guide
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1069    Argument error: array assign
'------------------------------------------------------------------------------
 ^bBASE/1069    Argument error: array assign^b

     ^bExplanation:^b

     1. When assigning a new value to an array element, you specified a
        non-numeric subscript.

     2. The variable you applied a subscript to was not an array.

     ^bAction:^b  Correct the program.

     ^bSee Also: ^b Language Reference chapter in the Reference guide
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1070    Argument error: ==
'------------------------------------------------------------------------------
 ^bBASE/1070    Argument error: ==^b

     ^bExplanation:^b  The arguments to the == operator were of incompatible
     types.

     ^bAction:^b  Correct the program.

     ^bSee Also: ^b Language Reference chapter in the Reference guide
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1071    Argument error: =
'------------------------------------------------------------------------------
 ^bBASE/1071    Argument error: =^b

     ^bExplanation:^b  The arguments to the = operator were of incompatible
     types.

     ^bAction:^b  Correct the program.

     ^bSee Also: ^b Language Reference chapter in the Reference guide
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1072    Argument error: <>
'------------------------------------------------------------------------------
 ^bBASE/1072    Argument error: <>^b

     ^bExplanation:^b  The arguments to the <>, #, or != operator were of
     incompatible types.

     ^bAction:^b  Correct the program.

     ^bSee Also: ^b Language Reference chapter in the Reference guide
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1073    Argument error: <
'------------------------------------------------------------------------------
 ^bBASE/1073    Argument error: <^b

     ^bExplanation:^b  The arguments to the < operator were of incompatible
     types.

     ^bAction:^b  Correct the program.

     ^bSee Also: ^b Language Reference chapter in the Reference guide
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1074    Argument error: <=
'------------------------------------------------------------------------------
 ^bBASE/1074    Argument error: <=^b

     ^bExplanation:^b  The arguments to the <= operator were of incompatible
     types.

     ^bAction:^b  Correct the program.

     ^bSee Also: ^b Language Reference chapter in the Reference guide
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1075    Argument error: >
'------------------------------------------------------------------------------
 ^bBASE/1075    Argument error: >^b

     ^bExplanation:^b  The arguments to the > operator were of incompatible
     types.

     ^bAction:^b  Correct the program.

     ^bSee Also: ^b Language Reference chapter in the Reference guide
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1076    Argument error: >=
'------------------------------------------------------------------------------
 ^bBASE/1076    Argument error: >=^b

     ^bExplanation:^b  The arguments to the >= operator were of incompatible
     types.

     ^bAction:^b  Correct the program.

     ^bSee Also: ^b Language Reference chapter in the Reference guide
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1077    Argument error: .NOT.
'------------------------------------------------------------------------------
 ^bBASE/1077    Argument error: .NOT.^b

     ^bExplanation:^b  The argument to the .NOT. or ! operator was not a
     logical value.

     ^bAction:^b  Correct the program.

     ^bSee Also: ^b Language Reference chapter in the Reference guide
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1078    Argument error: .AND.
'------------------------------------------------------------------------------
 ^bBASE/1078    Argument error: .AND.^b

     ^bExplanation:^b  One or both of the arguments to the .AND. operator
     were not logical values.

     ^bAction:^b  Correct the program.

     ^bSee Also: ^b Language Reference chapter in the Reference guide
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1079    Argument error: .OR.
'------------------------------------------------------------------------------
 ^bBASE/1079    Argument error: .OR.^b

     ^bExplanation:^b  One or both of the arguments to the .OR. operator were
     not logical values.

     ^bAction:^b  Correct the program.

     ^bSee Also: ^b Language Reference chapter in the Reference guide
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1080    Argument error: -
'------------------------------------------------------------------------------
 ^bBASE/1080    Argument error: -^b

     ^bExplanation:^b  The argument to the unary minus operator (-) was not a
     numeric value.

     ^bAction:^b  Correct the program.

     ^bSee Also: ^b Language Reference chapter in the Reference guide
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1081    Argument error: +
'------------------------------------------------------------------------------
 ^bBASE/1081    Argument error: +^b

     ^bExplanation:^b  The arguments to the + operator were of incompatible
     types.

     ^bAction:^b  Correct the program.

     ^bSee Also: ^b Language Reference chapter in the Reference guide
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1082    Argument error: -
'------------------------------------------------------------------------------
 ^bBASE/1082    Argument error: -^b

     ^bExplanation:^b  The arguments to the - operator were of incompatible
     types.

     ^bAction:^b  Correct the program.

     ^bSee Also: ^b Language Reference chapter in the Reference guide
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1083    Argument error: *
'------------------------------------------------------------------------------
 ^bBASE/1083    Argument error: *^b

     ^bExplanation:^b  One or both of the arguments to the * operator were
     not numeric values.

     ^bAction:^b  Correct the program.

     ^bSee Also: ^b Language Reference chapter in the Reference guide
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1084    Argument error: /
'------------------------------------------------------------------------------
 ^bBASE/1084    Argument error: /^b

     ^bExplanation:^b  One or both of the arguments to the / operator were
     not numeric values.

     ^bAction:^b  Correct the program.

     ^bSee Also: ^b Language Reference chapter in the Reference guide
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1085    Argument error: %
'------------------------------------------------------------------------------
 ^bBASE/1085    Argument error: %^b

     ^bExplanation:^b  One or both of the arguments to the % operator were
     not numeric values.

     ^bAction:^b  Correct the program.

     ^bSee Also: ^b Language Reference chapter in the Reference guide
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1086    Argument error: ++
'------------------------------------------------------------------------------
 ^bBASE/1086    Argument error: ++^b

     ^bExplanation:^b  The ++ operator was applied to a variable or array
     element whose value was not numeric.

     ^bAction:^b  Correct the program.

     ^bSee Also: ^b Language Reference chapter in the Reference guide
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1087    Argument error: --
'------------------------------------------------------------------------------
 ^bBASE/1087    Argument error: --^b

     ^bExplanation:^b  The -- operator was applied to a variable or array
     element whose value was not numeric.

     ^bAction:^b  Correct the program.

     ^bSee Also: ^b Language Reference chapter in the Reference guide
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1088    Argument error: ^^
'------------------------------------------------------------------------------
 ^bBASE/1088    Argument error: ^^^b

     ^bExplanation:^b  One or both of the arguments to the ^^ operator were
     not numeric values.

     ^bAction:^b  Correct the program.

     ^bSee Also: ^b Language Reference chapter in the Reference guide
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1089    Argument error: ABS
'------------------------------------------------------------------------------
 ^bBASE/1089    Argument error: ABS^b

     ^bExplanation:^b  The argument to ABS() was non-numeric.

     ^bAction:^b  Correct the program.

     ^bSee Also:^b  ABS() function
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1090    Argument error: INT
'------------------------------------------------------------------------------
 ^bBASE/1090    Argument error: INT^b

     ^bExplanation:^b  The argument to INT() was non-numeric.

     ^bAction:^b  Correct the program.

     ^bSee Also:^b  INT() function
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1091    Argument error: WORD
'------------------------------------------------------------------------------
 ^bBASE/1091    Argument error: WORD^b

     ^bExplanation:^b  The argument to WORD() was non-numeric.

     ^bAction:^b  Correct the program.

     ^bSee Also:^b  WORD() function
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1092    Argument error: MIN
'------------------------------------------------------------------------------
 ^bBASE/1092    Argument error: MIN^b

     ^bExplanation:^b  The arguments to MIN() were of incompatible types.

     ^bAction:^b  Correct the program.

     ^bSee Also:^b  MIN() function
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1093    Argument error: MAX
'------------------------------------------------------------------------------
 ^bBASE/1093    Argument error: MAX^b

     ^bExplanation:^b  The arguments to MAX() were of incompatible types.

     ^bAction:^b  Correct the program.

     ^bSee Also:^b  MAX() function
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1094    Argument error: ROUND
'------------------------------------------------------------------------------
 ^bBASE/1094    Argument error: ROUND^b

     ^bExplanation:^b  One or more of the arguments to ROUND() was
     non-numeric.

     ^bAction:^b  Correct the program.

     ^bSee Also:^b  ROUND() function
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1095    Argument error: LOG
'------------------------------------------------------------------------------
 ^bBASE/1095    Argument error: LOG^b

     ^bExplanation:^b  The argument to LOG() was non-numeric.

     ^bAction:^b  Correct the program.

     ^bSee Also:^b  LOG() function
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1096    Argument error: EXP
'------------------------------------------------------------------------------
 ^bBASE/1096    Argument error: EXP^b

     ^bExplanation:^b  The argument to EXP() was non-numeric.

     ^bAction:^b  Correct the program.

     ^bSee Also:^b  EXP() function
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1097    Argument error: SQRT
'------------------------------------------------------------------------------
 ^bBASE/1097    Argument error: SQRT^b

     ^bExplanation:^b  The argument to SQRT() was non-numeric.

     ^bAction:^b  Correct the program.

     ^bSee Also:^b  SQRT() function
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1098    Argument error: VAL
'------------------------------------------------------------------------------
 ^bBASE/1098    Argument error: VAL^b

     ^bExplanation:^b  The argument to VAL() was not a character value.

     ^bAction:^b  Correct the program.

     ^bSee Also:^b  VAL() function
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1099    Argument error: STR
'------------------------------------------------------------------------------
 ^bBASE/1099    Argument error: STR^b

     ^bExplanation:^b  One or more of the arguments to STR() was of the wrong
     type.

     ^bAction:^b  Correct the program.

     ^bSee Also:^b  STR() function
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1100    Argument error: TRIM
'------------------------------------------------------------------------------
 ^bBASE/1100    Argument error: TRIM^b

     ^bExplanation:^b  The argument to RTRIM() was not a character value.

     ^bAction:^b  Correct the program.

     ^bSee Also:^b  RTRIM() function
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1101    Argument error: LTRIM
'------------------------------------------------------------------------------
 ^bBASE/1101    Argument error: LTRIM^b

     ^bExplanation:^b  The argument to LTRIM() was not a character value.

     ^bAction:^b  Correct the program.

     ^bSee Also:^b  LTRIM() function
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1102    Argument error: UPPER
'------------------------------------------------------------------------------
 ^bBASE/1102    Argument error: UPPER^b

     ^bExplanation:^b  The argument to UPPER() was not a character value.

     ^bAction:^b  Correct the program.

     ^bSee Also:^b  UPPER() function
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1103    Argument error: LOWER
'------------------------------------------------------------------------------
 ^bBASE/1103    Argument error: LOWER^b

     ^bExplanation:^b  The argument to LOWER() was not a character value.

     ^bAction:^b  Correct the program.

     ^bSee Also:^b  LOWER() function
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1104    Argument error: CHR
'------------------------------------------------------------------------------
 ^bBASE/1104    Argument error: CHR^b

     ^bExplanation:^b  The argument to CHR() was non-numeric.

     ^bAction:^b  Correct the program.

     ^bSee Also:^b  CHR() function
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1105    Argument error: SPACE
'------------------------------------------------------------------------------
 ^bBASE/1105    Argument error: SPACE^b

     ^bExplanation:^b  The argument to SPACE() was non-numeric.

     ^bAction:^b  Correct the program.

     ^bSee Also:^b  SPACE() function
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1106    Argument error: REPLICATE
'------------------------------------------------------------------------------
 ^bBASE/1106    Argument error: REPLICATE^b

     ^bExplanation:^b  One or more of the arguments to REPLICATE() was of the
     wrong type.

     ^bAction:^b  Correct the program.

     ^bSee Also:^b  REPLICATE() function
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1107    Argument error: ASC
'------------------------------------------------------------------------------
 ^bBASE/1107    Argument error: ASC^b

     ^bExplanation:^b  The argument to ASC() was not a character value.

     ^bAction:^b  Correct the program.

     ^bSee Also:^b  ASC() function
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1108    Argument error: AT
'------------------------------------------------------------------------------
 ^bBASE/1108    Argument error: AT^b

     ^bExplanation:^b  One or more of the arguments to AT() was not a
     character value.

     ^bAction:^b  Correct the program.

     ^bSee Also:^b  AT() function
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1109    Argument error: $
'------------------------------------------------------------------------------
 ^bBASE/1109    Argument error: $^b

     ^bExplanation:^b  One of the arguments to the $ operator was not a
     character value.

     ^bAction:^b  Correct the program.

     ^bSee Also: ^b Basic Concepts chapter of the Programming and Utilities
     guide
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1110    Argument error: SUBSTR
'------------------------------------------------------------------------------
 ^bBASE/1110    Argument error: SUBSTR^b

     ^bExplanation:^b  One or more of the arguments to SUBSTR() was of the
     wrong type.

     ^bAction:^b  Correct the program.

     ^bSee Also:^b  SUBSTR() function
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1111    Argument error: LEN
'------------------------------------------------------------------------------
 ^bBASE/1111    Argument error: LEN^b

     ^bExplanation:^b  The argument to LEN() was not a character or array
     value.

     ^bAction:^b  Correct the program.

     ^bSee Also:^b  LEN() function
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1112    Argument error: YEAR
'------------------------------------------------------------------------------
 ^bBASE/1112    Argument error: YEAR^b

     ^bExplanation:^b  The argument to YEAR() was not a date value.

     ^bAction:^b  Correct the program.

     ^bSee Also:^b  YEAR() function
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1113    Argument error: MONTH
'------------------------------------------------------------------------------
 ^bBASE/1113    Argument error: MONTH^b

     ^bExplanation:^b  The argument to MONTH() was not a date value.

     ^bAction:^b  Correct the program.

     ^bSee Also:^b  MONTH() function
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1114    Argument error: DAY
'------------------------------------------------------------------------------
 ^bBASE/1114    Argument error: DAY^b

     ^bExplanation:^b  The argument to DAY() was not a date value.

     ^bAction:^b  Correct the program.

     ^bSee Also:^b  DAY() function
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1115    Argument error: DOW
'------------------------------------------------------------------------------
 ^bBASE/1115    Argument error: DOW^b

     ^bExplanation:^b  The argument to DOW() was not a date value.

     ^bAction:^b  Correct the program.

     ^bSee Also:^b  DOW() function
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1116    Argument error: CMONTH
'------------------------------------------------------------------------------
 ^bBASE/1116    Argument error: CMONTH^b

     ^bExplanation:^b  The argument to CMONTH() was not a date value.

     ^bAction:^b  Correct the program.

     ^bSee Also:^b  CMONTH() function
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1117    Argument error: CDOW
'------------------------------------------------------------------------------
 ^bBASE/1117    Argument error: CDOW^b

     ^bExplanation:^b  The argument to CDOW() was not a date value.

     ^bAction:^b  Correct the program.

     ^bSee Also:^b  CDOW() function
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1118    Argument error: DTOC
'------------------------------------------------------------------------------
 ^bBASE/1118    Argument error: DTOC^b

     ^bExplanation:^b  The argument to DTOC() was not a date value.

     ^bAction:^b  Correct the program.

     ^bSee Also:^b  DTOC() function
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1119    Argument error: CTOD
'------------------------------------------------------------------------------
 ^bBASE/1119    Argument error: CTOD^b

     ^bExplanation:^b  The argument to CTOD() was not a character value.

     ^bAction:^b  Correct the program.

     ^bSee Also:^b  CTOD() function
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1120    Argument error: DTOS
'------------------------------------------------------------------------------
 ^bBASE/1120    Argument error: DTOS^b

     ^bExplanation:^b  The argument to DTOS() was not a date value.

     ^bAction:^b  Correct the program.

     ^bSee Also:^b  DTOS() function
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1121    Argument error: TYPE
'------------------------------------------------------------------------------
 ^bBASE/1121    Argument error: TYPE^b

     ^bExplanation:^b  The argument to TYPE() was not a character value.

     ^bAction:^b  Correct the program.  The expression supplied to TYPE()
     must be in textual form.

     ^bSee Also:^b  TYPE() function
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1122    Argument error: TRANSFORM
'------------------------------------------------------------------------------
 ^bBASE/1122    Argument error: TRANSFORM^b

     ^bExplanation:^b  The second argument to TRANSFORM() was not a character
     value.

     ^bAction:^b  Correct the program.

     ^bSee Also:^b  TRANSFORM() function
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1123    Argument error: AADD
'------------------------------------------------------------------------------
 ^bBASE/1123    Argument error: AADD^b

     ^bExplanation:^b  The first argument to AADD() was not an array value.

     ^bAction:^b  Correct the program.

     ^bSee Also:^b  AADD() function
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1124    Argument error: LEFT
'------------------------------------------------------------------------------
 ^bBASE/1124    Argument error: LEFT^b

     ^bExplanation:^b  One or more of the arguments to LEFT() was of the
     wrong type.

     ^bAction:^b  Correct the program.

     ^bSee Also:^b  LEFT() function
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1131    Bound error: array dimension
'------------------------------------------------------------------------------
 ^bBASE/1131    Bound error: array dimension^b

     ^bExplanation:^b  An attempt was made to create an array containing more
     than the maximum number of elements.

     ^bAction:^b  Correct the program.  CA-Clipper allows a maximum of 4096
     elements in an array.

     ^bSee Also: ^b Basic Concepts chapter of the Programming and Utilities
     guide
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1132    Bound error: array access
'------------------------------------------------------------------------------
 ^bBASE/1132    Bound error: array access^b

     ^bExplanation:^b  When attempting to retrieve the value of an array
     element, the subscript specified was greater than the number of elements
     in the array.

     ^bAction:^b  Correct the program.  The LEN() function can be used to
     determine the number of elements in an array.  The AADD() and ASIZE()
     functions can be used to change the size of an array.

     ^bSee Also: ^b Basic Concepts chapter of the Programming and Utilities
     guide
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1133    Bound error: array assign
'------------------------------------------------------------------------------
 ^bBASE/1133    Bound error: array assign^b

     ^bExplanation:^b  When attempting to assign a new value to an array
     element, the subscript specified was greater than the number of elements
     in the array.

     ^bAction:^b  Correct the program.  The LEN() function can be used to
     determine the number of elements in an array.  The AADD() and ASIZE()
     functions can be used to change the size of an array.

     ^bSee Also: ^b Basic Concepts chapter of the Programming and Utilities
     guide
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1187    Bound error: AADD
'------------------------------------------------------------------------------
 ^bBASE/1187    Bound error: AADD^b

     ^bExplanation:^b  The array passed to AADD() already contained the
     maximum number of elements.

     ^bAction:^b  Correct the program.  The maximum number of elements in an
     array is 4096.

     ^bSee Also: ^b Basic Concepts chapter of the Programming and Utilities
     guide
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1209    String overflow: +
'------------------------------------------------------------------------------
 ^bBASE/1209    String overflow: +^b

     ^bExplanation:^b  An attempt was made to concatenate two character
     values whose combined length exceeded the maximum length.

     ^bAction:^b  Correct the program.  The maximum length of a character
     value in CA-Clipper is 65519 characters.
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1210    String overflow: -
'------------------------------------------------------------------------------
 ^bBASE/1210    String overflow: -^b

     ^bExplanation:^b  An attempt was made to concatenate two character
     values whose combined length exceeded the maximum length.

     ^bAction:^b  Correct the program.  The maximum length of a character
     value in CA-Clipper is 65519 characters.
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1233    String overflow: SPACE
'------------------------------------------------------------------------------
 ^bBASE/1233    String overflow: SPACE^b

     ^bExplanation:^b  The argument to SPACE() specified the creation of a
     character value whose length exceeded the maximum length.

     ^bAction:^b  Correct the program.  The maximum length of a character
     value in CA-Clipper is 65519 characters.
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1234    String overflow: REPLICATE
'------------------------------------------------------------------------------
 ^bBASE/1234    String overflow: REPLICATE^b

     ^bExplanation:^b  The arguments to REPLICATE() specified the creation of
     a character value whose length exceeded the maximum length.

     ^bAction:^b  Correct the program.  The maximum length of a character
     value in CA-Clipper is 65519 characters.
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1340    Zero divisor: /
'------------------------------------------------------------------------------
 ^bBASE/1340    Zero divisor: /^b

     ^bExplanation:^b  The right operand of the division operator (/) was
     zero.

     ^bAction:^b  Correct the program.  The default CA-Clipper error handler
     (Errorsys.prg) returns a zero result for division by zero.
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1341    Zero divisor: %
'------------------------------------------------------------------------------
 ^bBASE/1341    Zero divisor: %^b

     ^bExplanation:^b  The right operand of the modulus operator (%) was
     zero.

     ^bAction:^b  Correct the program.  The default CA-Clipper error handler
     (Errorsys.prg) returns a zero result for division by zero.
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1449    Syntax error: &
'------------------------------------------------------------------------------
 ^bBASE/1449    Syntax error: &^b

     ^bExplanation:^b  The text string supplied to the macro operator (&) was
     not a valid CA-Clipper expression.

     ^bAction:^b  Correct the program.

     ^bSee Also: ^b Basic Concepts chapter of the Programming and Utilities
     guide
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1513    Operation too complex: &
'------------------------------------------------------------------------------
 ^bBASE/1513    Operation too complex: &^b

     ^bExplanation:^b  The text string supplied to the macro operator (&) was
     too complex to be parsed by the macro parser.

     ^bAction:^b  Simplify the expression or break it into several
     expressions and apply the macro operator to each expression separately.
     For filter and relational expressions, you may want to use a function to
     perform the operation.

     ^bSee Also: ^b Basic Concepts chapter of the Programming and Utilities
     guide
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/2005    Open error (RESTORE command)
'------------------------------------------------------------------------------
 ^bBASE/2005    Open error (RESTORE command)^b

     ^bDefault Behavior: ^b Program will continue without restoring memory
     variables from specified file.  The default CA-Clipper error handler
     (Errorsys.prg) will set NETERR() to true (.T.) if the error was a
     sharing violation.

     ^bExplanation:^b  The file referred to in a RESTORE command could not be
     opened.

     ^bAction:^b  Check to make sure that the specified file exists.  If the
     file is not in the directory where the application runs, use SET DEFAULT
     or SET PATH to make the file accessible or specify the full path name
     where the file can be found.  In a network environment, make sure the
     application has the necessary rights to access the file.

     ^bSee Also:^b  RESTORE command
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/2006    Create error (SAVE command)
'------------------------------------------------------------------------------
 ^bBASE/2006    Create error (SAVE command)^b

     ^bDefault Behavior:^b  Program continues without saving memory variables
     to file.

     ^bExplanation:^b  The file referred to in a SAVE command could not be
     created.

     ^bAction:^b  Check to make sure that sufficient disk space and directory
     entries are available.  If the file exists, make sure it is not marked
     read-only.  In a network environment, make sure the application has the
     necessary rights to create the file.

     ^bSee Also:^b  SAVE command
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/2011    Open error (TYPE command)
'------------------------------------------------------------------------------
 ^bBASE/2011    Open error (TYPE command)^b

     ^bDefault Behavior:^b  Program will continue without TYPEing file.

     ^bExplanation:^b  The file referred to in a TYPE <file> command could
     not be opened.

     ^bAction:^b  Check to make sure that the specified file exists.  If the
     file is not in the directory where the application runs, use SET DEFAULT
     or SET PATH to make the file accessible or specify the full path name
     where the file can be found.  In a network environment, make sure the
     application has the necessary rights to access the file.

     ^bSee Also:^b  TYPE command
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/2012    Open error (COPY FILE command)
'------------------------------------------------------------------------------
 ^bBASE/2012    Open error (COPY FILE command)^b

     ^bDefault Behavior:^b  Program will continue without copying file.

     ^bExplanation:^b  In a COPY FILE command, the source file could not be
     opened.

     ^bAction:^b  Check to make sure that the file exists.  If the file is
     not in the directory where the application runs, use SET DEFAULT or SET
     PATH to make the file accessible or specify the full path name where the
     file can be found.

     ^bSee Also:^b  COPY FILE command
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/2016    Write error (COPY FILE command)                                ^r^CEA^r
'------------------------------------------------------------------------------
 ^bBASE/2016    Write error (COPY FILE command)^b

     ^bDefault Behavior:^b  Program continues without copying file.
     Partially copied file is not erased.

     ^bExplanation:^b  In a COPY FILE command, the source file could not be
     written to the destination, usually because of a full disk or
     insufficient rights in a network environment.

     ^bAction:^b  Make sure there is sufficient space on the destination
     drive or check network rights.

     ^bSee Also:^b  COPY FILE command
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/2017    Argument error (AEVAL() function)                              ^r^CEA^r
'------------------------------------------------------------------------------
 ^bBASE/2017    Argument error (AEVAL() function)^b

     ^bExplanation:^b  One or more of the arguments to AEVAL() was of the
     wrong type.  This error can also occur when any of the required
     arguments are omitted.

     ^bAction:^b  Correct the program.
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/2018    Open error (DISKSPACE() function)                              ^r^CEA^r
'------------------------------------------------------------------------------
 ^bBASE/2018    Open error (DISKSPACE() function)^b

     ^bDefault Behavior:^b  Program continues after returning an empty value.

     ^bExplanation:^b  The disk does not exist or is not ready upon an
     attempt to access it with the DISKSPACE() function.

     ^bAction:^b  Make sure to supply the correct drive number (for fixed
     disks) or call the DISKSPACE() function in a loop with a user warning
     when checking the readiness of a floppy drive.

     ^bSee Also:^b  COPY FILE command
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/2020    Argument error (SET() function)                                ^r^CEA^r
'------------------------------------------------------------------------------
 ^bBASE/2020    Argument error (SET() function)^b

     ^bExplanation:^b  CA-Clipper raises this error if a negative numeric
     value is passed to SET() during an attempt to set the following global
     state variables:

     _SET_DECIMALS      // SET DECIMALS TO xxx
     _SET_EPOCH         // SET EPOCH TO xxxx
     _SET_MARGIN        // SET MARGIN TO xx
     _SET_MESSAGE       // SET MESSAGE TO xx

     ^bAction:^b  Change your code.  Do not pass negative values to SET().

     ^bSee Also:^b  COPY FILE command
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/5300    Memory low
'------------------------------------------------------------------------------
 ^bBASE/5300    Memory low^b

     ^bDefault Behavior:^b  Continue with program execution.  Default
     behavior is only available when Error:severity is set to ES_WARNING.

     ^bExplanation:^b  The application has insufficient conventional memory.
     If the condition is a warning (severity 1), execution can continue but
     an unrecoverable error may occur without further warning.  If the
     condition is a recoverable error (severity 2), execution cannot
     continue.

     ^bAction:^b  For safety, quit the application.  Make more memory
     available before running the application again.  Remove unneeded
     resident utilities or device drivers.  Opening fewer database or index
     files may make more memory available.  This error may occur when
     manipulating large browse objects or character values, indicating that
     there is insufficient memory to swap in the object or character value.
     If many C or Assembler add-on functions are linked, staticly overlaying
     some of these functions may free up memory for other uses.

     ^bSee Also:^b  For information on overlaying C and Assembler code, refer
     to The CA-Clipper Linker--RTLINK.EXE chapter in the Programming and
     Utilities guide.
!seealso: 
'------------------------------------------------------------------------------



!short:컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴
!short: ^bTERM Error Messages
!short:
!short: Print error
'------------------------------------------------------------------------------
 ^bPrint error^b

     ^bExplanation:^b  A write error has occurred on the print device or
     file.

     ^bAction:^b  Check to make sure the printer is connected and online.  If
     printer output has been redirected to a file, make sure that sufficient
     disk space is available.  If printing to a network device, make sure
     that the network connection is valid and that a time-out has not
     occurred.

     ^bSee Also: ^b Basic Concepts and Network Programming chapters in the
     Programming and Utilities guide
!seealso: 
'------------------------------------------------------------------------------



!short: TERM/2013    Create error (SET ALTERNATE command)
'------------------------------------------------------------------------------
 ^bTERM/2013    Create error (SET ALTERNATE command)^b

     ^bDefault Behavior:^b  Program will continue without opening the file
     specified in the SET ALTERNATE command.  If there was a file open from a
     previous SET ALTERNATE command it will be closed.

     ^bExplanation:^b  The file referred to in a SET ALTERNATE command could
     not be created or opened for writing.

     ^bAction:^b  Check to make sure that sufficient disk space and directory
     entries are available.  If the file exists, make sure it is not marked
     read-only.  In a network environment, make sure the application has the
     necessary rights to create or modify the file.

     ^bSee Also:^b  SET ALTERNATE command
!seealso: 
'------------------------------------------------------------------------------



!short: TERM/2014    Create error (SET PRINTER command)
'------------------------------------------------------------------------------
 ^bTERM/2014    Create error (SET PRINTER command)^b

     ^bDefault Behavior:^b  Program will continue without opening the file or
     device specified in the SET PRINTER command.  If there was a file or
     device open from a previous SET PRINTER command it will be closed.

     ^bExplanation:^b  The file or device referred to in a SET PRINTER
     command could not be created or opened for writing.

     ^bAction:^b  If opening a file, check to make sure that sufficient disk
     space and directory entries are available.  If the file exists, make
     sure it is not marked read-only.  In a network environment, make sure
     the application has the necessary rights to create or modify the file.
     If printing to a network device or queue, make sure that the designated
     device exists and is accessible to the workstation.

     ^bSee Also:^b  SET ALTERNATE command, Network Programming chapter in the
     Programming and Utilities guide
!seealso: 
'------------------------------------------------------------------------------



!short: TERM/2015    Open error (TO FILE clause)
'------------------------------------------------------------------------------
 ^bTERM/2015    Open error (TO FILE clause)^b

     ^bDefault Behavior:^b  Program will continue without opening the file
     specified in the TO FILE clause.  Command will operate as if the TO FILE
     clause had not been specified.

     ^bExplanation:^b  The file referred to in a TO FILE clause of the REPORT
     FORM, LABEL FORM or other command could not be created or opened for
     writing.

     ^bAction:^b  Check to make sure that sufficient disk space and directory
     entries are available.  If the file exists, make sure it is not marked
     read-only.  In a network environment, make sure the application has the
     necessary rights to create or modify the file.

     ^bSee Also:^b  REPORT FORM command, LABEL FORM command
!seealso: 
'------------------------------------------------------------------------------



!short:컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴
!short: ^bDBFNTX Error Messages
!short:
!short: DBFNTX/1001  Open error (.dbf)
'------------------------------------------------------------------------------
 ^bDBFNTX/1001  Open error (.dbf)^b

     ^bDefault Behavior:^b  Program continues without opening the database
     file (.dbf).

     ^bExplanation:^b  The specified database file (.dbf) could not be
     opened.

     ^bAction:^b  Check to make sure that the specified file exists.  If the
     file is not in the directory where the application runs, use SET DEFAULT
     or SET PATH to make the file accessible or specify the full path name
     where the file can be found.  In a network environment, make sure the
     application has the necessary rights to access the file.  If the file is
     available only for read access, use the READONLY clause on the USE
     command.

     CA-Clipper's default error handler (Errorsys.prg) will set NETERR() to
     true (.T.) and will ask DBFNTX to default if the error was due to a
     sharing violation on the network.

     ^bSee Also:^b  USE command, Network Programming chapter in the
     Programming and Utilities guide
!seealso: 
'------------------------------------------------------------------------------



!short: DBFNTX/1002  Open error (.dbt)
'------------------------------------------------------------------------------
 ^bDBFNTX/1002  Open error (.dbt)^b

     ^bDefault Behavior:^b  Program continues without opening the database
     file (.dbt).

     ^bExplanation:^b  The specified memo file (.dbt) could not be opened.

     ^bAction:^b  Check to make sure that the specified file exists.  If the
     file is not in the directory where the application runs, use SET DEFAULT
     or SET PATH to make the file accessible or specify the full path name
     where the file can be found.  In a network environment, make sure the
     application has the necessary rights to access the file.  If the file is
     available only for read access, use the READONLY clause on the USE
     command.

     CA-Clipper's default error handler (Errorsys.prg) will set NETERR() to
     true (.T.) and will ask DBFNTX to default if the error was due to a
     sharing violation on the network.

     ^bSee Also:^b  USE command, Network Programming chapter in the
     Programming and Utilities guide
!seealso: 
'------------------------------------------------------------------------------



!short: DBFNTX/1003  Open error (index)
'------------------------------------------------------------------------------
 ^bDBFNTX/1003  Open error (index)^b

     ^bDefault Behavior:^b  Program continues without opening the index file
     (.ntx).

     ^bExplanation:^b  The specified index file could not be opened.

     ^bAction:^b  Check to make sure that the specified file exists.  If the
     file is not in the directory where the application runs, use SET DEFAULT
     or SET PATH to make the file accessible or specify the full path name
     where the file can be found.  In a network environment, make sure the
     application has the necessary rights to access the file.  If the file is
     available only for read access, use the READONLY clause on the USE or
     SET INDEX command.

     CA-Clipper's default error handler (Errorsys.prg) will set NETERR() to
     true (.T.) and will ask DBFNTX to default if the error was due to a
     sharing violation on the network.

     ^bSee Also:^b  USE command, SET INDEX command, Network Programming
     chapter in the Programming and Utilities guide
!seealso: 
'------------------------------------------------------------------------------



!short: DBFNTX/1004  Open error (creating .dbf)
'------------------------------------------------------------------------------
 ^bDBFNTX/1004  Open error (creating .dbf)^b

     ^bDefault Behavior:^b  Program continues without creating a database
     file (.dbf).

     ^bExplanation:^b  The specified database file (.dbf) could not be
     created.

     ^bAction:^b  Check to make sure that sufficient disk space and directory
     entries are available.  If the file exists, make sure it is not marked
     read-only.  In a network environment, make sure the application has the
     necessary rights to create the file.

     ^bSee Also:^b  CREATE command, COPY command, Network Programming chapter
     in the Programming and Utilities guide
!seealso: 
'------------------------------------------------------------------------------



!short: DBFNTX/1005  Open error (creating .dbt)
'------------------------------------------------------------------------------
 ^bDBFNTX/1005  Open error (creating .dbt)^b

     ^bDefault Behavior:^b  Program will continue without creating a memo
     file (.dbt) or associated database file (.dbf).

     ^bExplanation:^b  The specified memo file (.dbt) could not be created.

     ^bAction:^b  Check to make sure that sufficient disk space and directory
     entries are available.  If the file exists, make sure it is not marked
     read-only.  In a network environment, make sure the application has the
     necessary rights to create the file.

     ^bSee Also:^b  CREATE command, COPY command, Network Programming chapter
     in the Programming and Utilities guide
!seealso: 
'------------------------------------------------------------------------------



!short: DBFNTX/1006  Create error (creating index)
'------------------------------------------------------------------------------
 ^bDBFNTX/1006  Create error (creating index)^b

     ^bDefault Behavior:^b  Program will continue without creating the index
     (.ntx) file.

     ^bExplanation:^b  The specified index file (.ntx) could not be created.

     ^bAction:^b  Check to make sure that sufficient disk space and directory
     entries are available.  If the file exists, make sure it is not marked
     read-only.  In a network environment, make sure the application has the
     necessary rights to create the file.

     ^bSee Also:^b  INDEX command, Network Programming chapter in the
     Programming and Utilities guide
!seealso: 
'------------------------------------------------------------------------------



!short: DBFNTX/1010  Read error
'------------------------------------------------------------------------------
 ^bDBFNTX/1010  Read error^b

     ^bExplanation:^b  A read error occurred on the specified file.

     ^bAction:^b  If the file is on a floppy disk, make sure the disk is
     properly seated in the drive.  In a network environment, make sure the
     network connection is still valid; check for problems at the server.

     ^bSee Also:^b  Network Programming chapter in the Programming and
     Utilities guide
!seealso: 
'------------------------------------------------------------------------------



!short: DBFNTX/1011  Write error
'------------------------------------------------------------------------------
 ^bDBFNTX/1011  Write error^b

     ^bExplanation:^b  A write error occurred on the specified file.

     ^bAction:^b  Check to make sure that sufficient disk space and directory
     entries are available.  Make sure the file is not marked read-only.  In
     a network environment, make sure the application has the necessary
     rights to write to the file.

     ^bSee Also:^b  Network Programming chapter in the Programming and
     Utilities guide
!seealso: 
'------------------------------------------------------------------------------



!short: DBFNTX/1012  Corruption detected
'------------------------------------------------------------------------------
 ^bDBFNTX/1012  Corruption detected^b

     ^bExplanation:^b  File corruption has been detected in the specified
     file.

     ^bAction:^b  Make sure that the file type is correct for the operation.
     For index files, make sure that the type of index matches the driver
     being used (e.g., .ntx for DBFNTX).
!seealso: 
'------------------------------------------------------------------------------



!short: DBFNTX/1020  Data type error
'------------------------------------------------------------------------------
 ^bDBFNTX/1020  Data type error^b

     ^bExplanation:^b  The value assigned to a FIELD variable was of the
     wrong type.

     ^bAction:^b  Correct the program.  If assigning a FIELD variable from
     some other variable, make sure the other variable has been initialized
     (i.e., is not NIL).

     ^bSee Also:^b  Basic Concepts chapter in the Programming and Utilities
     guide
!seealso: 
'------------------------------------------------------------------------------



!short: DBFNTX/1020  Work area not indexed                                          ^r^CEA^r
'------------------------------------------------------------------------------
 ^bDBFNTX/1020  Work area not indexed^b

     ^bExplanation:^b  No index is in use when SEEK or DBSEEK() is attempted.

     ^bAction:^b  Make sure an index is in use.

!seealso: 
'------------------------------------------------------------------------------



!short: DBFNTX/1021  Data width error
'------------------------------------------------------------------------------
 ^bDBFNTX/1021  Data width error^b

     ^bDefault Behavior:^b  The default handling for this error is to fill
     the relevant part of the physical database record with asterisk (*)
     characters.  Subsequent accesses to the field will produce a value of
     zero until a new value is assigned.

     ^bExplanation:^b  The value assigned to a numeric FIELD variable could
     not be accurately represented in the field width specified by the
     database structure.

     ^bAction:^b  Change the program to suppress invalid values or modify the
     structure of the database file (.dbf) to allow for larger values.  DBU,
     the CA-Clipper Database Utility, can be used to modify the structure of
     a database file (.dbf).

     ^bSee Also:^b  Basic Concepts and Database Utility chapters in the
     Programming and Utilities guide
!seealso: 
'------------------------------------------------------------------------------



!short: DBFNTX/1022  Lock required
'------------------------------------------------------------------------------
 ^bDBFNTX/1022  Lock required^b

     ^bExplanation:^b  An attempt was made to update a record in a shared
     database without first obtaining a lock.

     ^bAction:^b  Correct the program.  Obtain a record lock or file lock for
     the work area before attempting to update a record.  If shared access is
     not desired, use the EXCLUSIVE clause of the USE command to gain
     exclusive access to the database file (.dbf).

     ^bSee Also:^b  USE command, RLOCK() function, FLOCK() function, Network
     Programming chapter in the Programming and Utilities guide
!seealso: 
'------------------------------------------------------------------------------



!short: DBFNTX/1023  Exclusive required
'------------------------------------------------------------------------------
 ^bDBFNTX/1023  Exclusive required^b

     ^bExplanation:^b  The operation being attempted requires exclusive use
     of the database file (.dbf) but the work area was opened for shared
     access.

     ^bAction:^b  Correct the program.  The PACK, REINDEX, and ZAP commands
     require exclusive access to the database file (.dbf). To obtain
     exclusive access, use the EXCLUSIVE clause of the USE command.

     ^bSee Also:^b  USE command, Network Programming chapter in the
     Programming and Utilities guide
!seealso: 
'------------------------------------------------------------------------------



!short: DBFNTX/1024  Append lock failed
'------------------------------------------------------------------------------
 ^bDBFNTX/1024  Append lock failed^b

     ^bDefault Behavior:^b  Program continues without appending a blank
     record.

     ^bExplanation:^b  A new record could not be appended because a lock
     could not be obtained for the new record.

     ^bAction:^b  For a shared work area, the APPEND BLANK command
     automatically obtains a record lock for the newly appended record.  If
     the record cannot be locked, the APPEND fails.  This generally occurs
     because another process has obtained a file lock on the database file
     (.dbf).  Change the program to handle the lock contention.

     ^bNote:^b  The default CA-Clipper error handler (Errorsys.prg) handles
     this error by setting the global NETERR() status to true (.T.) and
     resuming execution.  Thus, the error only causes an error message or
     alert when a custom error handler is used.  For an example of how to
     handle this error condition, refer to Errorsys.prg.

     ^bSee Also:^b  Network Programming chapter in the Programming and
     Utilities guide
!seealso: 
'------------------------------------------------------------------------------



!short: DBFNTX/1025  Write not allowed
'------------------------------------------------------------------------------
 ^bDBFNTX/1025  Write not allowed^b

     ^bExplanation:^b  An attempt was made to update a record in a work area
     which was opened for read-only access.

     ^bAction:^b  Correct the program.  Either suppress operations which
     update records or open the database file (.dbf) for read/write access.
     To obtain read/write access, remove the READONLY clause from the USE
     command.

     ^bSee Also:^b  USE command
!seealso: 
'------------------------------------------------------------------------------



!short: DBFNTX/1026  Data width error
'------------------------------------------------------------------------------
 ^bDBFNTX/1026  Data width error^b

     ^bExplanation:^b  When building an index, the initial evaluation of the
     key expression (on a blank record) produced a character value of zero
     length.

     ^bAction:^b  Make sure the key expression will produce a value of the
     same length for all records.  Do not use functions such as TRIM() in the
     key expression.  To restrict the length of the key values, use the
     LEFT() or PADR() functions.

     ^bSee Also:^b  INDEX command
!seealso: 
'------------------------------------------------------------------------------



!short: DBFNTX/1027  Limit exceeded
'------------------------------------------------------------------------------
 ^bDBFNTX/1027  Limit exceeded^b

     ^bExplanation:^b  Too many indexes were opened for a work area.

     ^bAction:^b  Reduce the number of active indexes for the work area.  For
     each work area, a maximum of 15 indexes can be active at any one time.

     ^bSee Also:^b  USE command, SET INDEX command
!seealso: 
'------------------------------------------------------------------------------



!short:컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴
!short: ^bDBFNDX Error Messages
!short:
!short: DBFNDX/1001  Open error (.dbf)
'------------------------------------------------------------------------------
 ^bDBFNDX/1001  Open error (.dbf)^b

     ^bDefault Behavior:^b  Program continues without opening the database
     file (.dbf).

     ^bExplanation:^b  The specified database file (.dbf) could not be
     opened.

     ^bAction:^b  Check to make sure that the specified file exists.  If the
     file is not in the directory where the application runs, use SET DEFAULT
     or SET PATH to make the file accessible or specify the full path name
     where the file can be found.  In a network environment, make sure the
     application has the necessary rights to access the file.  If the file is
     available only for read access, use the READONLY clause on the USE
     command.

     CA-Clipper's default error handler (Errorsys.prg) will set NETERR() to
     true (.T.) and will ask DBFNDX to default if the error was due to a
     sharing violation on the network.

     ^bSee Also:^b  USE command, Network Programming chapter in the
     Programming and Utilities guide
!seealso: 
'------------------------------------------------------------------------------



!short: DBFNDX/1002  Open error (.dbt)
'------------------------------------------------------------------------------
 ^bDBFNDX/1002  Open error (.dbt)^b

     ^bDefault Behavior:^b  Program continues without opening the database
     file (.dbt).

     ^bExplanation:^b  The specified memo file (.dbt) could not be opened.

     ^bAction:^b  Check to make sure that the specified file exists.  If the
     file is not in the directory where the application runs, use SET DEFAULT
     or SET PATH to make the file accessible or specify the full path name
     where the file can be found.  In a network environment, make sure the
     application has the necessary rights to access the file.  If the file is
     available only for read access, use the READONLY clause on the USE
     command.

     CA-Clipper's default error handler (Errorsys.prg) will set NETERR() to
     true (.T.) and will ask DBFNDX to default if the error was due to a
     sharing violation on the network.

     ^bSee Also:^b  USE command, Network Programming chapter in the
     Programming and Utilities guide
!seealso: 
'------------------------------------------------------------------------------



!short: DBFNDX/1003  Open error (index)
'------------------------------------------------------------------------------
 ^bDBFNDX/1003  Open error (index)^b

     ^bDefault Behavior:^b  Program continues without opening the index file
     (.ndx).

     ^bExplanation:^b  The specified index file could not be opened.

     ^bAction:^b  Check to make sure that the specified file exists.  If the
     file is not in the directory where the application runs, use SET DEFAULT
     or SET PATH to make the file accessible or specify the full path name
     where the file can be found.  In a network environment, make sure the
     application has the necessary rights to access the file.  If the file is
     available only for read access, use the READONLY clause on the USE or
     SET INDEX command.

     CA-Clipper's default error handler (Errorsys.prg) will set NETERR() to
     true (.T.) and will ask DBFNDX to default if the error was due to a
     sharing violation on the network.

     ^bSee Also:^b  USE command, SET INDEX command, Network Programming
     chapter in the Programming and Utilities guide
!seealso: 
'------------------------------------------------------------------------------



!short: DBFNDX/1004  Open error (creating .dbf)
'------------------------------------------------------------------------------
 ^bDBFNDX/1004  Open error (creating .dbf)^b

     ^bDefault Behavior:^b  Program continues without creating a database
     file (.dbf).

     ^bExplanation:^b  The specified database file (.dbf) could not be
     created.

     ^bAction:^b  Check to make sure that sufficient disk space and directory
     entries are available.  If the file exists, make sure it is not marked
     read-only.  In a network environment, make sure the application has the
     necessary rights to create the file.

     ^bSee Also:^b  CREATE command, COPY command, Network Programming chapter
     in the Programming and Utilities guide
!seealso: 
'------------------------------------------------------------------------------



!short: DBFNDX/1005  Open error (creating .dbt)
'------------------------------------------------------------------------------
 ^bDBFNDX/1005  Open error (creating .dbt)^b

     ^bDefault Behavior:^b  Program will continue without creating a memo
     file (.dbt) or associated database file (.dbf).

     ^bExplanation:^b  The specified memo file (.dbt) could not be created.

     ^bAction:^b  Check to make sure that sufficient disk space and directory
     entries are available.  If the file exists, make sure it is not marked
     read-only.  In a network environment, make sure the application has the
     necessary rights to create the file.

     ^bSee Also:^b  CREATE command, COPY command, Network Programming chapter
     in the Programming and Utilities guide
!seealso: 
'------------------------------------------------------------------------------



!short: DBFNDX/1006  Create error (creating index)
'------------------------------------------------------------------------------
 ^bDBFNDX/1006  Create error (creating index)^b

     ^bDefault Behavior:^b  Program will continue without creating the index
     file (.ndx).

     ^bExplanation:^b  The specified index file (.ndx) could not be created.

     ^bAction:^b  Check to make sure that sufficient disk space and directory
     entries are available.  If the file exists, make sure it is not marked
     read-only.  In a network environment, make sure the application has the
     necessary rights to create the file.

     ^bSee Also:^b  INDEX command, Network Programming chapter in the
     Programming and Utilities guide
!seealso: 
'------------------------------------------------------------------------------



!short: DBFNDX/1010  Read error
'------------------------------------------------------------------------------
 ^bDBFNDX/1010  Read error^b

     ^bExplanation:^b  A read error occurred on the specified file.

     ^bAction:^b  If the file is on a floppy disk, make sure the disk is
     properly seated in the drive.  In a network environment, make sure the
     network connection is still valid; check for problems  at the server.

     ^bSee Also:^b  Network Programming chapter in the Programming and
     Utilities guide
!seealso: 
'------------------------------------------------------------------------------



!short: DBFNDX/1011  Write error
'------------------------------------------------------------------------------
 ^bDBFNDX/1011  Write error^b

     ^bExplanation:^b  A write error occurred on the specified file.

     ^bAction:^b  Check to make sure that sufficient disk space and directory
     entries are available.  Make sure the file is not marked read-only.  In
     a network environment, make sure the application has the necessary
     rights to write to the file.

     ^bSee Also:^b  Network Programming chapter in the Programming and
     Utilities guide
!seealso: 
'------------------------------------------------------------------------------



!short: DBFNDX/1012  Corruption detected
'------------------------------------------------------------------------------
 ^bDBFNDX/1012  Corruption detected^b

     ^bExplanation:^b  File corruption has been detected in the specified
     file.

     ^bAction:^b  Make sure that the file type is correct for the operation.
     For index files, make sure that the type of index matches the driver
     being used (e.g., .ndx for DBFNDX).
!seealso: 
'------------------------------------------------------------------------------



!short: DBFNDX/1020  Data type error
'------------------------------------------------------------------------------
 ^bDBFNDX/1020  Data type error^b

     ^bExplanation:^b  The value assigned to a FIELD variable was of the
     wrong type.

     ^bAction:^b  Correct the program.  If assigning a FIELD variable from
     some other variable, make sure the other variable has been initialized
     (i.e., is not NIL).

     ^bSee Also:^b  Basic Concepts chapter in the Programming and Utilities
     guide
!seealso: 
'------------------------------------------------------------------------------



!short: DBFNDX/1021  Data width error
'------------------------------------------------------------------------------
 ^bDBFNDX/1021  Data width error^b

     ^bDefault Behavior:^b  The default handling for this error is to fill
     the relevant part of the physical database record with asterisk (*)
     characters.  Subsequent accesses to the field will produce a value of
     zero until a new value is assigned.

     ^bExplanation:^b  The value assigned to a numeric FIELD variable could
     not be accurately represented in the field width specified by the
     database structure.

     ^bAction:^b  Change the program to suppress invalid values or modify the
     structure of the database file (.dbf) to allow for larger values.  DBU,
     the CA-Clipper Database Utility, can be used to modify the structure of
     a database file (.dbf).

     ^bSee Also:^b  Basic Concepts and Database Utility chapters in the
     Programming and Utilities guide
!seealso: 
'------------------------------------------------------------------------------



!short: DBFNDX/1022  Lock required
'------------------------------------------------------------------------------
 ^bDBFNDX/1022  Lock required^b

     ^bExplanation:^b  An attempt was made to update a record in a shared
     database without first obtaining a lock.

     ^bAction:^b  Correct the program.  Obtain a record lock or file lock for
     the work area before attempting to update a record.  If shared access is
     not desired, use the EXCLUSIVE clause of the USE command to gain
     exclusive access to the database file (.dbf).

     ^bSee Also:^b  USE command, RLOCK() function, FLOCK() function, Network
     Programming chapter in the Programming and Utilities guide
!seealso: 
'------------------------------------------------------------------------------



!short: DBFNDX/1023  Exclusive required
'------------------------------------------------------------------------------
 ^bDBFNDX/1023  Exclusive required^b

     ^bExplanation:^b  The operation being attempted requires exclusive use
     of the database file (.dbf) but the work area was opened for shared
     access.

     ^bAction:^b  Correct the program.  The PACK, REINDEX, and ZAP commands
     require exclusive access to the database file (.dbf). To obtain
     exclusive access, use the EXCLUSIVE clause of the USE command.

     ^bSee Also:^b  USE command, Network Programming chapter in the
     Programming and Utilities guide
!seealso: 
'------------------------------------------------------------------------------



!short: DBFNDX/1024  Append lock failed
'------------------------------------------------------------------------------
 ^bDBFNDX/1024  Append lock failed^b

     ^bDefault Behavior:^b  Program continues without appending a blank
     record.

     ^bExplanation:^b  A new record could not be appended because a lock
     could not be obtained for the new record.

     ^bAction:^b  For a shared work area, the APPEND BLANK command
     automatically obtains a record lock for the newly appended record.  If
     the record cannot be locked, the APPEND fails.  This generally occurs
     because another process has obtained a file lock on the database file
     (.dbf).  Change the program to handle the lock contention.

     ^bNote:^b  The default CA-Clipper error handler (Errorsys.prg) handles
     this error by setting the global NETERR() status to true (.T.) and
     resuming execution.  Thus, the error only causes an error message or
     alert when a custom error handler is used.  For an example of how to
     handle this error condition, refer to Errorsys.prg.

     ^bSee Also:^b  Network Programming chapter in the Programming and
     Utilities guide
!seealso: 
'------------------------------------------------------------------------------



!short: DBFNDX/1025  Write not allowed
'------------------------------------------------------------------------------
 ^bDBFNDX/1025  Write not allowed^b

     ^bExplanation:^b  An attempt was made to update a record in a work area
     which was opened for read-only access.

     ^bAction:^b  Correct the program.  Either suppress operations which
     update records or open the database file (.dbf) for read/write access.
     To obtain read/write access, remove the READONLY clause from the USE
     command.

     ^bSee Also:^b  USE command
!seealso: 
'------------------------------------------------------------------------------



!short: DBFNDX/1026  Data width error
'------------------------------------------------------------------------------
 ^bDBFNDX/1026  Data width error^b

     ^bExplanation:^b  When building an index, the initial evaluation of the
     key expression (on a blank record) produced a character value of zero
     length.

     ^bAction:^b  Make sure the key expression will produce a value of the
     same length for all records.  Do not use functions such as TRIM() in the
     key expression.  To restrict the length of the key values, use the
     LEFT() or PADR() functions.

     ^bSee Also:^b  INDEX command
!seealso: 
'------------------------------------------------------------------------------



!short: DBFNDX/1027  Limit exceeded
'------------------------------------------------------------------------------
 ^bDBFNDX/1027  Limit exceeded^b

     ^bExplanation:^b  Too many indexes were opened for a work area.

     ^bAction:^b  Reduce the number of active indexes for the work area.  For
     each work area, a maximum of 15 indexes can be active at any one time.

     ^bSee Also:^b  USE command, SET INDEX command
!seealso: 
'------------------------------------------------------------------------------



!short:컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴
!short: ^bDBCMD Error Messages                                                        ^r^CEA^r
!short:
!short: DBCMD/1001   Argument error                                                 ^r^CEA^r
'------------------------------------------------------------------------------
 ^bDBCMD/1001   Argument error^b

     ^bExplanation:^b  The argument to the SEEK or DBSEEK() was not numeric,
     logical, character or date.

     ^bAction:^b  Correct the program.

     ^bSee Also:^b  DBSEEK() function, SEEK command
!seealso: 
'------------------------------------------------------------------------------



!short: DBCMD/1003   Argument error                                                 ^r^CEA^r
'------------------------------------------------------------------------------
 ^bDBCMD/1003   Argument error^b

     ^bExplanation:^b  Argument to GOTO or DBGOTO() was non-numeric.

     ^bAction:^b  Correct the program.

     ^bSee Also:^b  DBGOTO() function, GOTO command
!seealso: 
'------------------------------------------------------------------------------



!short: DBCMD/1004   Argument error                                                 ^r^CEA^r
'------------------------------------------------------------------------------
 ^bDBCMD/1004   Argument error^b

     ^bExplanation:^b  One or more of the arguments to SET RELATION TO or
     DBSETRELAT() was of the wrong type or the alias was invalid.

     ^bAction:^b  Correct the program.

     ^bSee Also:^b  DBSETRELAT() function, SET RELATION TO command
!seealso: 
'------------------------------------------------------------------------------



!short: DBCMD/1005   Argument error                                                 ^r^CEA^r
'------------------------------------------------------------------------------
 ^bDBCMD/1005   Argument error^b

     ^bExplanation:^b  One or more of the arguments to USE or DBUSEAREA() was
     of the wrong type.

     ^bAction:^b  Correct the program.

     ^bSee Also:^b  DBUSEAREA() function, USE command
!seealso: 
'------------------------------------------------------------------------------



!short: DBCMD/1006   Argument error                                                 ^r^CEA^r
'------------------------------------------------------------------------------
 ^bDBCMD/1006   Argument error^b

     ^bExplanation:^b  One or more of the arguments to INDEX ON or
     DBCREATEINDEX() was of the wrong type.

     ^bAction:^b  Correct the program.

     ^bSee Also:^b  DBCREATEINDEX() function, INDEX ON command
!seealso: 
'------------------------------------------------------------------------------



!short: DBCMD/1007   Argument error                                                 ^r^CEA^r
'------------------------------------------------------------------------------
 ^bDBCMD/1007   Argument error^b

     ^bExplanation:^b  The argument to SET ORDER TO or DBSETORDER() was
     non-numeric.

     ^bAction:^b  Correct the program.

     ^bSee Also:^b  DBSETORDER() function, SET ORDER command
!seealso: 
'------------------------------------------------------------------------------



!short: DBCMD/1008   Argument error                                                 ^r^CEA^r
'------------------------------------------------------------------------------
 ^bDBCMD/1008   Argument error^b

     ^bExplanation:^b  The argument to SET INDEX TO or DBSETINDEX() was not a
     character value.

     ^bAction:^b  Correct the program.

     ^bSee Also:^b  DBSETINDEX() function, SET INDEX TO command
!seealso: 
'------------------------------------------------------------------------------



!short: DBCMD/1009   Argument error                                                 ^r^CEA^r
'------------------------------------------------------------------------------
 ^bDBCMD/1009   Argument error^b

     ^bExplanation:^b  The argument FIELDNAME() was non-numeric.

     ^bAction:^b  Correct the program.

     ^bSee Also:^b  FIELDNAME() function
!seealso: 
'------------------------------------------------------------------------------



!short: DBCMD/1010   Illegal characters in alias                                    ^r^CEA^r
'------------------------------------------------------------------------------
 ^bDBCMD/1010   Illegal characters in alias^b

     ^bExplanation:^b  An attempt was made to create an alias that was not
     a valid identifier.  This occurs if the system is allowed to create a
     default alias based on a filename that is not a valid CA-Clipper
     identifier, (e.g., TEST$.DBF, 123FILE.DBF).

     ^bAction:^b  If created due to the default alias, supply a valid
     identifier with the ALIAS clause.
!seealso: 
'------------------------------------------------------------------------------



!short: DBCMD/1011   Alias already in use                                           ^r^CEA^r
'------------------------------------------------------------------------------
 ^bDBCMD/1011   Alias already in uses^b

     ^bExplanation:^b An attempt was made to create an alias that is already
     in use in another work area.  The error is caused by:

     USE Test NEW
     USE Test NEW  // error occurs here

     ^bAction:^b  If created due to the default alias, supply a valid
     identifier with the ALIAS clause.
!seealso: 
'------------------------------------------------------------------------------



!short: DBCMD/1101   Syntax error                                                   ^r^CEA^r
'------------------------------------------------------------------------------
 ^bDBCMD/1101   Syntax error^b

     ^bExplanation:^b This error occurs when the FIELDS clause of the TOTAL
     command includes an alias that does not point to the current work area.

     TOTAL ON x TO y FIELDS badalias->f1

     ^bAction:^b  With TOTAL, make sure to use an alias that refers to the
     current work area (if you use an alias).
!seealso: 
'------------------------------------------------------------------------------



!short: DBCMD/2001   Work area not in use                                           ^r^CEA^r
'------------------------------------------------------------------------------
 ^bDBCMD/2001   Work area not in use^b

     ^bExplanation:^b  An attempt to execute a command or function that
     requires the use of a database failed because there was no database
     open in the specified work area.

     ^bAction:^b  Correct the program.  If the command is prefixed by an
     alias, verify that the alias is spelled correctly.
!seealso: 
'------------------------------------------------------------------------------



!short: DBCMD/2019   Argument error                                                 ^r^CEA^r
'------------------------------------------------------------------------------
 ^bDBCMD/2019   Argument error^b

     ^bExplanation:^b  One or more of the arguments to DBEVAL() was of
     the wrong type.  This error can also occur when any of the required
     arguments are omitted.

     ^bAction:^b  Correct the program.  Pass a valid data type to DBEVAL().
     ^bSee Also:^b  DBEVAL() function


!seealso: 
'------------------------------------------------------------------------------



!short:컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴
!short: ^bRuntime Unrecoverable Error Messages                                        ^r^CEA^r
!short:
!short: 24           Write error                                                    ^r^CEA^r
'------------------------------------------------------------------------------
 ^b24 Write error^b

     ^bExplanation:^b  This error occurs when a CA-Clipper application is
     unable to write a database file or index to disk.

     ^bAction:^b  Check to make sure that sufficient disk space and directory
     entries are available.  Make sure the file is not marked read-only.  In
     a network environment, make sure the application has the necessary
     rights to write to the file.  For more information, refer to the Network
     Programming chapter in the Programming and Utilities guide.
!seealso: 
'------------------------------------------------------------------------------



!short: 331          String/array memory overflow                                   ^r^CEA^r
'------------------------------------------------------------------------------
 ^b331     String/array memory overflow^b

     ^bExplanation:^b  The maximum capacity of the Segment Virtual Object
     Store (SVOS) system has been exceeded.  Because of the dynamic nature of
     SVOS, it is impossible to state exactly when this error will occur
     <reference to Runtime Memory Management>.  In the worst case this error
     will occur when slightly over a megabyte of strings and/or arrays are in
     use; the best case is in excess of 16 megabytes.

     ^bAction:^b  This problem can be resolved by reducing the size and/or
     number of strings and arrays that are active at any one time.  Probably
     the most common cause of this error is the declaration of extremely
     large arrays (e.g. LOCAL aArray[500][300]).  Note that every array
     element requires memory to store (even if its value is NIL) and that the
     number of array elements in an array is determined by multiplying the
     number of elements in every dimension and adding the sum of all
     dimensions except for the last.  For example, a 500 by 300 array has
     (500 x 300) + 150,500 elements.

     Because every array element in CA-Clipper requires 14 bytes, this
     amounts to 150,500 x 14 or 2,107,000 bytes -- well in excess of one
     megabyte and therefore potentially dangerous.

     ^bNote: ^b There is no benefit gained by reusing arrays.  CA-Clipper is
     much more efficient when strings and arrays are thrown away and rebuilt
     often rather than kept around unnecessarily for long periods.
!seealso: 
'------------------------------------------------------------------------------



!short: 332          String/array memory overflow                                   ^r^CEA^r
'------------------------------------------------------------------------------
 ^b332     String/array memory overflow^b

     ^bExplanation:^b  The maximum capacity of the Segment Virtual Object
     Store (SVOS) system has been exceeded.  Because of the dynamic nature of
     SVOS, it is impossible to state exactly when this error will occur
     <reference to Runtime Memory Management>.  In the worst case this error
     will occur when slightly over a megabyte of strings and/or arrays are in
     use; the best case is in excess of 16 megabytes.

     ^bAction:^b  This problem can be resolved by reducing the size and/or
     number of strings and arrays that are active at any one time.  Probably
     the most common cause of this error is the declaration of extremely
     large arrays (e.g. LOCAL aArray[500][300]).  Note that every array
     element requires memory to store (even if its value is NIL) and that the
     number of array elements in an array is determined by multiplying the
     number of elements in every dimension and adding the sum of all
     dimensions except for the last.  For example, a 500 by 300 array has
     (500 x 300) + 150,500 elements.

     Because every array element in CA-Clipper requires 14 bytes, this
     amounts to 150,500 x 14 or 2,107,000 bytes -- well in excess of one
     megabyte and therefore potentially dangerous.

     ^bNote: ^b There is no benefit gained by reusing arrays.  CA-Clipper is
     much more efficient when strings and arrays are thrown away and rebuilt
     often rather than kept around unnecessarily for long periods.
!seealso: 
'------------------------------------------------------------------------------



!short: 415          Cannot open overlay file                                       ^r^CEA^r
'------------------------------------------------------------------------------
 ^b415     Cannot open overlay file^b

     ^bExplanation:^b  This error occurs when a CA-Clipper application cannot
     find or cannot open an overlay file.  Overlay files include executable
     (.EXE) files (in the case of dynamic overlays), prelinked library (.pll)
     files, and static overlay (.ovl) files.

     ^bAction:^b  Probably the most common cause of this error is
     insufficient file handles available to the CA-Clipper application.  The
     first step in trying to solve this problem is to increase the number of
     file handles available to the application, refer to the Files and
     Buffers section in The Runtime Environment chapter of the Programming
     and Utilities guide.

     If insufficient file handles is not the problem, it is possible that the
     CA-Clipper application cannot find the file it is trying to open.  Refer
     to Specifying the Location of Executable Files section in The Runtime
     Environment chapter of the Programming and Utilities guide.
!seealso: 
'------------------------------------------------------------------------------



!short: 5302         Conventional memory exhausted                                  ^r^CEA^r
'------------------------------------------------------------------------------
 ^b5302    Conventional memory exhausted^b

     ^bExplanation:^b  This is an "out of memory" message that indicates that
     the CA-Clipper application no longer has sufficient conventional memory
     available to continue.

     Specifically, this error occurs when the virtual memory system attempts
     and fails to bring a VM segment into conventional that had been swapped
     out to disk or expanded memory.

     ^bAction:^b  Make more conventional memory available to the VM system.
     This can be done in several ways:

     ^b^CFE^b  Increase the amount of conventional memory available before
        running the application (by removing TSRs, making use of a 386 memory
        manager, etc.)

     ^b^CFE^b  Use a third-party linker that can dynamically overlay C and
        assembly language code.  C and assembly language code is not
        automatically overlaid by .RTLink and therefore sits in conventional
        memory throughout the execution of the application.

     ^b^CFE^b  Ensure that any C or assembly language code in use is making
        use of the virtual memory system if it is doing dynamic memory
        allocation.  Any memory allocated using the Fixed Memory Allocator
        function (_xalloc() and _xgrab()) reduces the amount of conventional
        memory available if it is not immediately freed.
!seealso: 
'------------------------------------------------------------------------------



!short: 5304         Conventional memory exhausted                                  ^r^CEA^r
'------------------------------------------------------------------------------
 ^b5304    Conventional memory exhausted^b

     ^bExplanation:^b  This is an "out of memory" message that indicates that
     the CA-Clipper application no longer has sufficient conventional memory
     available to continue.

     Specifically, this error occurs when a function attempts to allocate
     conventional memory and fails.  This error can be received as a result
     of the failure of _xgrab() in Extend System functions.

     ^bAction:^b  Make more conventional memory available to the VM system.
     This can be done in several ways:

     ^b^CFE^b  Increase the amount of conventional memory available before
        running the application (by removing TSRs, making use of a 386 memory
        manager, etc.)

     ^b^CFE^b  Use a third-party linker that can dynamically overlay C and
        assembly language code.  C and assembly language code is not
        automatically overlaid by .RTLink and therefore sits in conventional
        memory throughout the execution of the application.

     ^b^CFE^b  Ensure that any C or assembly language code in use is making
        use of the virtual memory system if it is doing dynamic memory
        allocation.  Any memory allocated using the Fixed Memory Allocator
        function (_xalloc() and _xgrab()) reduces the amount of conventional
        memory available if it is not immediately freed.
!seealso: 
'------------------------------------------------------------------------------



!short: 5306         Conventional memory exhausted                                  ^r^CEA^r
'------------------------------------------------------------------------------
 ^b5306    Conventional memory exhausted^b

     ^bExplanation:^b  This is an "out of memory" message that indicates that
     the CA-Clipper application no longer has sufficient conventional memory
     available to continue.

     Specifically, this error occurs when the virtual memory system attempts
     and fails to bring a VM segment into conventional that had been swapped
     out to disk or expanded memory.

     ^bAction:^b  Make more conventional memory available to the VM system.
     This can be done in several ways:

     ^b^CFE^b  Increase the amount of conventional memory available before
        running the application (by removing TSRs, making use of a 386 memory
        manager, etc.)

     ^b^CFE^b  Use a third-party linker that can dynamically overlay C and
        assembly language code.  C and assembly language code is not
        automatically overlaid by .RTLink and therefore sits in conventional
        memory throughout the execution of the application.

     ^b^CFE^b  Ensure that any C or assembly language code in use is making
        use of the virtual memory system if it is doing dynamic memory
        allocation.  Any memory allocated using the Fixed Memory Allocator
        function (_xalloc() and _xgrab()) reduces the amount of conventional
        memory available if it is not immediately freed.
!seealso: 
'------------------------------------------------------------------------------



!short: 5312         Conventional memory exhausted                                  ^r^CEA^r
'------------------------------------------------------------------------------
 ^b5312    Conventional memory exhausted^b

     ^bExplanation:^b  This is an "out of memory" message that indicates that
     the CA-Clipper application no longer has sufficient conventional memory
     available to continue.

     Specifically, this error occurs when the virtual memory system needs to
     swap a virtual memory segment out of conventional memory and it has used
     all expanded memory and disk space that has been made available to it.

     ^bAction:^b  Make more virtual memory available to the application.
     This can be done by making more expanded memory available by increasing
     the E setting of the CLIPPER environment variable or by making more disk
     space available by increasing the SWAPK setting of the CLIPPER
     environment variable.

     This problem can also be resolved by reducing the size and/or number of
     strings and arrays that are active at any one time.  Probably the most
     common cause of this error is the declaration of extremely large arrays
     (e.g. LOCAL aArray[4096][4096]).  Note that every array element requires
     memory to store (even if its value is NIL) and that the number of array
     elements in an array element requires memory to store (even if its value
     is NIL) and that the number of array elements in an array is determined
     by multiplying the number of elements in every dimension and adding the
     sum of all dimensions except for the last.  For example, a 4096 by 4096
     array as (4096 x 4096) + 4096 or 16,781,312 elements.

     Because every array element in CA-Clipper requires 14 bytes, this
     amounts to 16,781,312 x 14 or 234,938,368 bytes -- well in excess of the
     theoretical capacity of the virtual memory system.

     ^bNote: ^b There is no benefit gained by reusing arrays.  CA-Clipper is
     much more efficient when strings and arrays are thrown away and rebuilt
     often rather than kept around unnecessarily for long periods.
!seealso: 
'------------------------------------------------------------------------------



