!short: ^bOverview -- Runtime Errors
'------------------------------------------------------------------------------
 ^bRuntime Recoverable Errors^b

     Runtime recoverable errors can be expected to happen.  These errors
     generally occur either because of mistakes in your code (e.g., type
     mismatch, or divide by zero) or because of some condition of the
     environment (e.g., out of file handles, file sharing violations, or
     memory low).  These errors can be trapped in the error system and,
     therefore, do not necessarily terminate the application.

     If the default error system is being used in the application, then
     runtime errors are reported in the following format:

     ^bError | Warning <subSystem>/<subCode> <message text>
     ^b   <filename> | <operation>

 ^bOverview on Error Recovery^b

     ^bError Recovery Failure^b

     CA-Clipper's error system depends on communication taking place between
     the error handler and the subsystem that generates the error.  The error
     handler communicates with the subsystem by returning a value indicating
     what the subsystem should attempt to do to recover from the error.  The
     legal values that can be returned are determined by the values contained
     in the error object passed to the error handler for Error:canRetry,
     Error:canDefault, and Error:canSubstitute.  If the error handler returns
     an invalid value to the subsystem (or returns to the subsystem at all
     when these values are all false), then an error recovery failure is
     reported and the application is terminated.  This exit condition always
     has the same format:

     ^bError recovery failure, <operation> (<line number>)

     ^bUser Abort^b

     The user can abort your application by pressing Alt-C or Ctrl-Break at
     anytime during the execution of your application unless you have
     specifically disabled this feature.  You can disable it with SETCANCEL
     (.F.) or SET(_SET_CANCEL, .F.).

     This exit condition always has the same format:

     ^bCancelled at: <operation> (<line number>)

     ^bMissing Error Handler^b

     If code is executed before any ERRORBLOCK() can be installed, an
     unrecoverable error will be generated that indicates that no error
     handler is present.  This usually occurs if there is code in ErrorSys()
     before the ERRORBLOCK() function is called.  All code should be moved
     after this line if possible:

     ^bNo ERRORBLOCK() for error at: <operation>
     ^b   (<line number>)

 ^bRuntime Recoverable Error Categories^b

     This section is a summary of runtime recoverable error messages that are
     possible when executing a CA-Clipper application using the supplied
     subsystems.  The messages are divided into categories according to
     subsystem.  Each category is described below, followed by a listing of
     all messages in each category.

     ^bBASE Errors^b

     BASE error messages indicate errors generated by the Base system.  The
     general format of a BASE error message is as follows:

     ^bError | Warning BASE/xxxx <message text> <filename> |
     ^b   <operation>

     ^bTERM Errors^b

     TERM error messages indicate errors generated by the Terminal subsystem.
     The general format of a TERM error message is as follows:

     ^bError | Warning TERM/xxxx <message text> <filename> |
     ^b   <operation>

     ^bDBCMD Errors^b

     DBCMD error messages occur in the database command set, and are
     unrelated to a particular driver.  They occur as a result of command
     usage rather than from a failure of the driver itself.

     ^bError | Warning DBCMD/xxxx <message text>
     ^b   <filename> | <operation>

     ^bDBFCDX Errors^b

     DBFCDX error messages indicate that an error occurred during a database
     or index operation utilizing the DBFCDX database driver.  The general
     format of a DBFCDX error message is as follows:

     ^bError | Warning DBFCDX/xxxx <message text>
     ^b   <filename> |  <operation>

     ^bDBFMDX Errors^b

     DBFMDX error messages indicate that an error occurred during a database
     or index operation utilizing the DBFMDX database driver.  The general
     format of a DBFMDX error message is as follows:

     ^bError | Warning DBFMDX/xxxx <message text>
     ^b   <filename> |  <operation>

     ^bDBFNDX Errors^b

     DBFNDX error messages indicate that an error occurred during a database
     or index operation utilizing the DBFNDX database driver.  The general
     format of a DBFNDX error message is as follows:

     ^bError | Warning DBFNDX/xxxx <message text>
     ^b   <filename> |  <operation>

     ^bDBFNTX Errors^b

     DBFNTX error messages indicate that an error occurred during a database
     or index operation utilizing the DBFNTX database driver.  The general
     format of a DBFNTX error message is as follows:

     ^bError | Warning DBFNTX/xxxx <message text>
     ^b   <filename> |  <operation>

 ^bRuntime Unrecoverable Errors^b

     Unrecoverable errors are runtime errors that for some reason cannot make
     use of the error system.  Like runtime errors, it is normal for these
     errors to occur.  This is usually because the system is unable to
     execute the error block.  Almost all of these errors are, therefore,
     related to the environment (e.g., out of memory, errors reading code to
     execute from disk) and can be fixed by making a change to the
     environment.

     Unrecoverable errors always have the same format:

     ^b<operation> (<line number>) Unrecoverable error xxxx:
     ^b   <message text>

!seealso: 
'------------------------------------------------------------------------------



!short:컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴
!short: ^bBASE Error Messages
!short:
!short: BASE/1001    Undefined function
'------------------------------------------------------------------------------
 ^bBASE/1001    Undefined function^b

     ^bExplanation:^b  You specified a function or procedure that:

     1. You did not link into the current program.

     2. You never directly referred to in the program.

     ^bAction:^b  Make sure you linked the specified function or procedure.
     If you referred to the routine in an index key or macro expression, add
     a REQUEST statement to one of your program (.prg) files for each routine
     that was not linked.

     If you are using RDDs that support tags and the error occurs when
     creating the index, DELETE the original index file, then recreate the
     index.

     ^bSee Also:^b  "Basic Concepts" chapter in the Programming and Utilities
     Guide
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1002    Undefined alias
'------------------------------------------------------------------------------
 ^bBASE/1002    Undefined alias^b

     ^bExplanation:^b  You specified an alias not currently associated with
     any work area.

     ^bAction:^b  Make sure the appropriate database file is open.  Check to
     see if more than one work area uses the same alias at the same time.  If
     so, designate a unique alias for each work area.  The SELECT() function
     can be used to see if an alias is currently associated with any work
     area.

     ^bSee Also: ^b "Basic Concepts" chapter in the Programming and Utilities
     Guide
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1003    Undefined variable
'------------------------------------------------------------------------------
 ^bBASE/1003    Undefined variable^b

     ^bExplanation:^b  You specified a variable that does not exist or is not
     visible.

     ^bAction:^b  Some suggestions to resolve the problem are:

     1. If you specified a database field, make sure you opened the
        appropriate database file and selected the appropriate work area.  If
        you do not want to select another work area, preface the field
        variable reference with the target work area alias.

     2. If you specified a private or public variable, make sure you created
        the variable using either a PRIVATE or PUBLIC statement.

     3. If you specified a local or static variable reference within a macro
        variable, rearrange the code to refer to the variable directly (local
        and static variables are not visible within macro variables).

     The /W compiler option is useful in finding misspelled or incorrectly
     specified variable references.

     ^bSee Also: ^b "Basic Concepts" chapter in the Programming and Utilities
     Guide
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1004    No exported method
'------------------------------------------------------------------------------
 ^bBASE/1004    No exported method^b

     ^bExplanation:^b  This error can occur due to the following reasons:

     1. You sent a message using the send operator (:), but the left operand
        was not a reference to an object, or the receiving object has no
        method with the specified name.

     2. You called the EVAL() function and did not pass a code block as the
        first argument.

     3. You specified a value other than a code block in a context where a
        code block was required.

     ^bAction:^b  Some suggestions to resolve the problem are:

     1. Check to make sure that the value being operated on is of the proper
        type or class.

     2. If the error occurs on the send operator (:), make sure the message
        is one of the messages defined for the class.

     3. If the missing method is "EVAL," make sure that code blocks have been
        supplied where required.

     ^bSee Also:^b  "Basic Concepts" chapter in the Programming and Utilities
     Guide, "Language Reference" chapter of the Reference Guide
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1005    No exported variable
'------------------------------------------------------------------------------
 ^bBASE/1005    No exported variable^b

     ^bExplanation:^b  You attempted to assign an exported instance variable
     using the send operator (:), but the left operand was not an object,. or
     the object has no exported variable with the specified name.

     ^bAction:^b  Some suggestions to resolve the problem are:

     1. Check to make sure that the value being operated on is of the proper
        type or class.

     2. Make sure the name of the instance variable is spelled properly.

     ^bSee Also: ^b "Basic Concepts" chapter in the Programming and Utilities
     Guide, "Language Reference" chapter of the Reference Guide
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1026    Index key expression required
'------------------------------------------------------------------------------
 ^bBASE/1026    Index key expression required^b

     ^bExplanation:^b  You attempted to use a function which requires an
     index key expression.

     ^bAction:^b  Correct the program.

     ^bSee Also:^b  ORDCREATE()
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1065    Argument error: &
'------------------------------------------------------------------------------
 ^bBASE/1065    Argument error: &^b

     ^bExplanation:^b  You specified an argument to the macro operator (&)
     that was not a character value.

     ^bAction:^b  Correct the program.

     ^bSee Also: ^b "Language Reference" chapter in the Reference Guide
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1066    Argument error: conditional
'------------------------------------------------------------------------------
 ^bBASE/1066    Argument error: conditional^b

     ^bExplanation:^b  This error can occur for two reasons:

     1. You specified an argument for a conditional statement such as IF or
        DO WHILE that did not return a logical value.

     2. You specified the IF() function and the first argument did not return
        a logical value.

     ^bAction:^b  Correct the program.

     ^bSee Also: ^b "Basic Concepts" chapter in the Programming and Utilities
     Guide
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1067    Argument error: array dimension
'------------------------------------------------------------------------------
 ^bBASE/1067    Argument error: array dimension^b

     ^bExplanation:^b  The value specifying the length of a new array was
     missing or non-numeric.

     ^bAction:^b  Correct the program.

     ^bSee Also: ^b "Basic Concepts" chapter in the Programming and Utilities
     Guide
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1068    Argument error: array access
'------------------------------------------------------------------------------
 ^bBASE/1068    Argument error: array access ^b

     ^bExplanation:^b  When attempting to retrieve the value of an array
     element, the subscript value was non-numeric, or the variable being
     subscripted was not an array.

     ^bAction:^b  Correct the program.

     ^bSee Also: ^b "Basic Concepts" chapter in the Programming and Utilities
     Guide
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1069    Argument error: array assign
'------------------------------------------------------------------------------
 ^bBASE/1069    Argument error: array assign^b

     ^bExplanation:^b  This error can occur for two reasons:

     1. When assigning a new value to an array element, you specified a
        non-numeric subscript.

     2. The variable you applied a subscript to was not an array.

     ^bAction:^b  Correct the program.

     ^bSee Also: ^b "Language Reference" chapter in the Reference Guide
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1070    Argument error: ==
'------------------------------------------------------------------------------
 ^bBASE/1070    Argument error: ==^b

     ^bExplanation:^b  The arguments to the == operator were of incompatible
     types.

     ^bAction:^b  Correct the program.

     ^bSee Also: ^b "Language Reference" chapter in the Reference Guide
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1071    Argument error: =
'------------------------------------------------------------------------------
 ^bBASE/1071    Argument error: =^b

     ^bExplanation:^b  The arguments to the = operator were of incompatible
     types.

     ^bAction:^b  Correct the program.

     ^bSee Also: ^b "Language Reference" chapter in the Reference Guide
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1072    Argument error: <>
'------------------------------------------------------------------------------
 ^bBASE/1072    Argument error: <>^b

     ^bExplanation:^b  The arguments to the <>, #, or != operator were of
     incompatible types.

     ^bAction:^b  Correct the program.

     ^bSee Also: ^b "Language Reference" chapter in the Reference Guide
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1073    Argument error: <
'------------------------------------------------------------------------------
 ^bBASE/1073    Argument error: <^b

     ^bExplanation:^b  The arguments to the < operator were of incompatible
     types.

     ^bAction:^b  Correct the program.

     ^bSee Also: ^b "Language Reference" chapter in the Reference Guide
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1074    Argument error: <=
'------------------------------------------------------------------------------
 ^bBASE/1074    Argument error: <=^b

     ^bExplanation:^b  The arguments to the <= operator were of incompatible
     types.

     ^bAction:^b  Correct the program.

     ^bSee Also: ^b "Language Reference" chapter in the Reference Guide
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1075    Argument error: >
'------------------------------------------------------------------------------
 ^bBASE/1075    Argument error: >^b

     ^bExplanation:^b  The arguments to the > operator were of incompatible
     types.

     ^bAction:^b  Correct the program.

     ^bSee Also: ^b "Language Reference" chapter in the Reference Guide
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1076    Argument error: >=
'------------------------------------------------------------------------------
 ^bBASE/1076    Argument error: >=^b

     ^bExplanation:^b  The arguments to the >= operator were of incompatible
     types.

     ^bAction:^b  Correct the program.

     ^bSee Also: ^b "Language Reference" chapter in the Reference Guide
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1077    Argument error: .NOT.
'------------------------------------------------------------------------------
 ^bBASE/1077    Argument error: .NOT.^b

     ^bExplanation:^b  The argument to the .NOT. or ! operator was not a
     logical value.

     ^bAction:^b  Correct the program.

     ^bSee Also: ^b "Language Reference" chapter in the Reference Guide
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1078    Argument error: .AND.
'------------------------------------------------------------------------------
 ^bBASE/1078    Argument error: .AND.^b

     ^bExplanation:^b  One or both of the arguments to the .AND. operator
     were not logical values.

     ^bAction:^b  Correct the program.

     ^bSee Also: ^b "Language Reference" chapter in the Reference Guide
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1079    Argument error: .OR.
'------------------------------------------------------------------------------
 ^bBASE/1079    Argument error: .OR.^b

     ^bExplanation:^b  One or both of the arguments to the .OR. operator were
     not logical values.

     ^bAction:^b  Correct the program.

     ^bSee Also: ^b "Language Reference" chapter in the Reference Guide
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1080    Argument error: -
'------------------------------------------------------------------------------
 ^bBASE/1080    Argument error: -^b

     ^bExplanation:^b  The argument to the unary minus operator (-) was a
     non-numeric value.

     ^bAction:^b  Correct the program.

     ^bSee Also:^b "Language Reference" chapter in the Reference Guide
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1081    Argument error: +
'------------------------------------------------------------------------------
 ^bBASE/1081    Argument error: +^b

     ^bExplanation:^b  The arguments to the + operator were of incompatible
     types.

     ^bAction:^b  Correct the program.

     ^bSee Also: ^b "Language Reference" chapter in the Reference Guide
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1082    Argument error: -
'------------------------------------------------------------------------------
 ^bBASE/1082    Argument error: -^b

     ^bExplanation:^b  The arguments to the - operator were of incompatible
     types.

     ^bAction:^b  Correct the program.

     ^bSee Also: ^b "Language Reference" chapter in the Reference Guide
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1083    Argument error: *
'------------------------------------------------------------------------------
 ^bBASE/1083    Argument error: *^b

     ^bExplanation:^b  One or both of the arguments to the * operator were
     non-numeric values.

     ^bAction:^b  Correct the program.

     ^bSee Also ^b "Language Reference" chapter in the Reference Guide
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1084    Argument error: /
'------------------------------------------------------------------------------
 ^bBASE/1084    Argument error: /^b

     ^bExplanation:^b  One or both of the arguments to the / operator were
     non-numeric values.

     ^bAction:^b  Correct the program.

     ^bSee Also: ^b "Language Reference" chapter in the Reference Guide
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1085    Argument error: %
'------------------------------------------------------------------------------
 ^bBASE/1085    Argument error: %^b

     ^bExplanation:^b  One or both of the arguments to the % operator were
     non-numeric values.

     ^bAction:^b  Correct the program.

     ^bSee Also: ^b "Language Reference" chapter in the Reference Guide
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1086    Argument error: ++
'------------------------------------------------------------------------------
 ^bBASE/1086    Argument error: ++^b

     ^bExplanation:^b  The ++ operator was applied to a variable or array
     element whose value was non-numeric.

     ^bAction:^b  Correct the program.

     ^bSee Also: ^b "Language Reference" chapter in the Reference Guide
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1087    Argument error: --
'------------------------------------------------------------------------------
 ^bBASE/1087    Argument error: --^b

     ^bExplanation:^b  The -- operator was applied to a variable or array
     element whose value was non-numeric.

     ^bAction:^b  Correct the program.

     ^bSee Also: ^b "Language Reference" chapter in the Reference Guide
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1088    Argument error: ^^^^
'------------------------------------------------------------------------------
 ^bBASE/1088    Argument error: ^^^^^b

     ^bExplanation:^b  One or both of the arguments to the ^^^^ operator were
     non-numeric values.

     ^bAction:^b  Correct the program.

     ^bSee Also: ^b "Language Reference" chapter in the Reference Guide
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1089    Argument error: ABS
'------------------------------------------------------------------------------
 ^bBASE/1089    Argument error: ABS^b

     ^bExplanation:^b  The argument to ABS() was non-numeric.

     ^bAction:^b  Correct the program.

     ^bSee Also:^b  ABS() function
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1090    Argument error: INT
'------------------------------------------------------------------------------
 ^bBASE/1090    Argument error: INT^b

     ^bExplanation:^b  The argument to INT() was non-numeric.

     ^bAction:^b  Correct the program.

     ^bSee Also:^b  INT() function
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1091    Argument error: WORD
'------------------------------------------------------------------------------
 ^bBASE/1091    Argument error: WORD^b

     ^bExplanation:^b  The argument to WORD() was non-numeric.

     ^bAction:^b  Correct the program.

     ^bSee Also:^b  WORD() function
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1092    Argument error: MIN
'------------------------------------------------------------------------------
 ^bBASE/1092    Argument error: MIN^b

     ^bExplanation:^b  The arguments to MIN() were of incompatible types.

     ^bAction:^b  Correct the program.

     ^bSee Also:^b  MIN() function
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1093    Argument error: MAX
'------------------------------------------------------------------------------
 ^bBASE/1093    Argument error: MAX^b

     ^bExplanation:^b  The arguments to MAX() were of incompatible types.

     ^bAction:^b  Correct the program.

     ^bSee Also:^b  MAX() function
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1094    Argument error: ROUND
'------------------------------------------------------------------------------
 ^bBASE/1094    Argument error: ROUND^b

     ^bExplanation:^b  One or more of the arguments to ROUND() was
     non-numeric.

     ^bAction:^b  Correct the program.

     ^bSee Also:^b  ROUND() function
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1095    Argument error: LOG
'------------------------------------------------------------------------------
 ^bBASE/1095    Argument error: LOG^b

     ^bExplanation:^b  The argument to LOG() was non-numeric.

     ^bAction:^b  Correct the program.

     ^bSee Also:^b  LOG() function
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1096    Argument error: EXP
'------------------------------------------------------------------------------
 ^bBASE/1096    Argument error: EXP^b

     ^bExplanation:^b  The argument to EXP() was non-numeric.

     ^bAction:^b  Correct the program.

     ^bSee Also:^b  EXP() function
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1097    Argument error: SQRT
'------------------------------------------------------------------------------
 ^bBASE/1097    Argument error: SQRT^b

     ^bExplanation:^b  The argument to SQRT() was non-numeric.

     ^bAction:^b  Correct the program.

     ^bSee Also:^b  SQRT() function
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1098    Argument error: VAL
'------------------------------------------------------------------------------
 ^bBASE/1098    Argument error: VAL^b

     ^bExplanation:^b  The argument to VAL() was not a character value.

     ^bAction:^b  Correct the program.

     ^bSee Also:^b  VAL() function
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1099    Argument error: STR
'------------------------------------------------------------------------------
 ^bBASE/1099    Argument error: STR^b

     ^bExplanation:^b  One or more of the arguments to STR() was of the wrong
     type.

     ^bAction:^b  Correct the program.

     ^bSee Also:^b  STR() function
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1100    Argument error: TRIM
'------------------------------------------------------------------------------
 ^bBASE/1100    Argument error: TRIM^b

     ^bExplanation:^b  The argument to TRIM() was not a character value.

     ^bAction:^b  Correct the program.

     ^bSee Also:^b  RTRIM() function
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1101    Argument error: LTRIM
'------------------------------------------------------------------------------
 ^bBASE/1101    Argument error: LTRIM^b

     ^bExplanation:^b  The argument to LTRIM() was not a character value.

     ^bAction:^b  Correct the program.

     ^bSee Also:^b  LTRIM() function
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1102    Argument error: UPPER
'------------------------------------------------------------------------------
 ^bBASE/1102    Argument error: UPPER^b

     ^bExplanation:^b  The argument to UPPER() was not a character value.

     ^bAction:^b  Correct the program.

     ^bSee Also:^b  UPPER() function
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1103    Argument error: LOWER
'------------------------------------------------------------------------------
 ^bBASE/1103    Argument error: LOWER^b

     ^bExplanation:^b  The argument to LOWER() was not a character value.

     ^bAction:^b  Correct the program.

     ^bSee Also:^b  LOWER() function
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1104    Argument error: CHR
'------------------------------------------------------------------------------
 ^bBASE/1104    Argument error: CHR^b

     ^bExplanation:^b  The argument to CHR() was non-numeric.

     ^bAction:^b  Correct the program.

     ^bSee Also:^b  CHR() function
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1105    Argument error: SPACE
'------------------------------------------------------------------------------
 ^bBASE/1105    Argument error: SPACE^b

     ^bExplanation:^b  The argument to SPACE() was non-numeric.

     ^bAction:^b  Correct the program.

     ^bSee Also:^b  SPACE() function
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1106    Argument error: REPLICATE
'------------------------------------------------------------------------------
 ^bBASE/1106    Argument error: REPLICATE^b

     ^bExplanation:^b  One or more of the arguments to REPLICATE() was of the
     wrong type.

     ^bAction:^b  Correct the program.

     ^bSee Also:^b  REPLICATE() function
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1107    Argument error: ASC
'------------------------------------------------------------------------------
 ^bBASE/1107    Argument error: ASC^b

     ^bExplanation:^b  The argument to ASC() was not a character value.

     ^bAction:^b  Correct the program.

     ^bSee Also:^b  ASC() function
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1108    Argument error: AT
'------------------------------------------------------------------------------
 ^bBASE/1108    Argument error: AT^b

     ^bExplanation:^b  One or more of the arguments to AT() was not a
     character value.

     ^bAction:^b  Correct the program.

     ^bSee Also:^b  AT() function
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1109    Argument error: $
'------------------------------------------------------------------------------
 ^bBASE/1109    Argument error: $^b

     ^bExplanation:^b  One of the arguments to the $ operator was not a
     character value.

     ^bAction:^b  Correct the program.

     ^bSee Also: ^b "Basic Concepts" chapter of the Programming and Utilities
     Guide
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1110    Argument error: SUBSTR
'------------------------------------------------------------------------------
 ^bBASE/1110    Argument error: SUBSTR^b

     ^bExplanation:^b  One or more of the arguments to SUBSTR() was of the
     wrong type.

     ^bAction:^b  Correct the program.

     ^bSee Also:^b  SUBSTR() function
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1111    Argument error: LEN
'------------------------------------------------------------------------------
 ^bBASE/1111    Argument error: LEN^b

     ^bExplanation:^b  The argument to LEN() was not a character or array
     value.

     ^bAction:^b  Correct the program.

     ^bSee Also:^b  LEN() function
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1112    Argument error: YEAR
'------------------------------------------------------------------------------
 ^bBASE/1112    Argument error: YEAR^b

     ^bExplanation:^b  The argument to YEAR() was not a date value.

     ^bAction:^b  Correct the program.

     ^bSee Also:^b  YEAR() function
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1113    Argument error: MONTH
'------------------------------------------------------------------------------
 ^bBASE/1113    Argument error: MONTH^b

     ^bExplanation:^b  The argument to MONTH() was not a date value.

     ^bAction:^b  Correct the program.

     ^bSee Also:^b  MONTH() function
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1114    Argument error: DAY
'------------------------------------------------------------------------------
 ^bBASE/1114    Argument error: DAY^b

     ^bExplanation:^b  The argument to DAY() was not a date value.

     ^bAction:^b  Correct the program.

     ^bSee Also:^b  DAY() function
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1115    Argument error: DOW
'------------------------------------------------------------------------------
 ^bBASE/1115    Argument error: DOW^b

     ^bExplanation:^b  The argument to DOW() was not a date value.

     ^bAction:^b  Correct the program.

     ^bSee Also:^b  DOW() function
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1116    Argument error: CMONTH
'------------------------------------------------------------------------------
 ^bBASE/1116    Argument error: CMONTH^b

     ^bExplanation:^b  The argument to CMONTH() was not a date value.

     ^bAction:^b  Correct the program.

     ^bSee Also:^b  CMONTH() function
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1117    Argument error: CDOW
'------------------------------------------------------------------------------
 ^bBASE/1117    Argument error: CDOW^b

     ^bExplanation:^b  The argument to CDOW() was not a date value.

     ^bAction:^b  Correct the program.

     ^bSee Also:^b  CDOW() function
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1118    Argument error: DTOC
'------------------------------------------------------------------------------
 ^bBASE/1118    Argument error: DTOC^b

     ^bExplanation:^b  The argument to DTOC() was not a date value.

     ^bAction:^b  Correct the program.

     ^bSee Also:^b  DTOC() function
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1119    Argument error: CTOD
'------------------------------------------------------------------------------
 ^bBASE/1119    Argument error: CTOD^b

     ^bExplanation:^b  The argument to CTOD() was not a character value.

     ^bAction:^b  Correct the program.

     ^bSee Also:^b  CTOD() function
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1120    Argument error: DTOS
'------------------------------------------------------------------------------
 ^bBASE/1120    Argument error: DTOS^b

     ^bExplanation:^b  The argument to DTOS() was not a date value.

     ^bAction:^b  Correct the program.

     ^bSee Also:^b  DTOS() function
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1121    Argument error: TYPE
'------------------------------------------------------------------------------
 ^bBASE/1121    Argument error: TYPE^b

     ^bExplanation:^b  The argument to TYPE() was not a character value.

     ^bAction:^b  Correct the program.  The expression supplied to TYPE()
     must be in textual form.

     ^bSee Also:^b  TYPE() function
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1122    Argument error: TRANSFORM
'------------------------------------------------------------------------------
 ^bBASE/1122    Argument error: TRANSFORM^b

     ^bExplanation:^b  The second argument to TRANSFORM() was not a character
     value.

     ^bAction:^b  Correct the program.

     ^bSee Also:^b  TRANSFORM() function
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1123    Argument error: AADD
'------------------------------------------------------------------------------
 ^bBASE/1123    Argument error: AADD^b

     ^bExplanation:^b  The first argument to AADD() was not an array value.

     ^bAction:^b  Correct the program.

     ^bSee Also:^b  AADD() function
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1124    Argument error: LEFT
'------------------------------------------------------------------------------
 ^bBASE/1124    Argument error: LEFT^b

     ^bExplanation:^b  One or more of the arguments to LEFT() was of the
     wrong type.

     ^bAction:^b  Correct the program.

     ^bSee Also:^b  LEFT() function
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1126    Argument Error: DATEFORMAT
'------------------------------------------------------------------------------
 ^bBASE/1126    Argument Error: DATEFORMAT^b

     ^bExplanation:^b  The date format was not legal.

     ^bAction:^b  Correct the program.

     ^bSee Also:^b  SET()
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1131    Bound error: array dimension
'------------------------------------------------------------------------------
 ^bBASE/1131    Bound error: array dimension^b

     ^bExplanation:^b  An attempt was made to create an array containing more
     than the maximum number of elements.

     ^bAction:^b  Correct the program.  CA-Clipper allows a maximum of 4096
     elements in an array.

     ^bSee Also: ^b "Basic Concepts" chapter of the Programming and Utilities
     Guide
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1132    Bound error: array access
'------------------------------------------------------------------------------
 ^bBASE/1132    Bound error: array access^b

     ^bExplanation:^b  When attempting to retrieve the value of an array
     element, the subscript specified was greater than the number of elements
     in the array.

     ^bAction:^b  Correct the program.  The LEN() function can be used to
     determine the number of elements in an array.  The AADD() and ASIZE()
     functions can be used to change the size of an array.

     ^bSee Also: ^b "Basic Concepts" chapter of the Programming and Utilities
     Guide
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1133    Bound error: array assign
'------------------------------------------------------------------------------
 ^bBASE/1133    Bound error: array assign^b

     ^bExplanation:^b  When attempting to assign a new value to an array
     element, the subscript specified was greater than the number of elements
     in the array.

     ^bAction:^b  Correct the program.  The LEN() function can be used to
     determine the number of elements in an array.  The AADD() and ASIZE()
     functions can be used to change the size of an array.

     ^bSee Also: ^b "Basic Concepts" chapter of the Programming and Utilities
     Guide
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1187    Bound error: AADD
'------------------------------------------------------------------------------
 ^bBASE/1187    Bound error: AADD^b

     ^bExplanation:^b  The array passed to AADD() already contained the
     maximum number of elements.

     ^bAction:^b  Correct the program.  The maximum number of elements in an
     array is 4096.

     ^bSee Also: ^b "Basic Concepts" chapter of the Programming and Utilities
     Guide
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1209    String overflow: +
'------------------------------------------------------------------------------
 ^bBASE/1209    String overflow: +^b

     ^bExplanation:^b  An attempt was made to concatenate two character
     values whose combined length exceeded the maximum length.

     ^bAction:^b  Correct the program.  The maximum length of a character
     value in CA-Clipper is 65519 characters.
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1210    String overflow: -
'------------------------------------------------------------------------------
 ^bBASE/1210    String overflow: -^b

     ^bExplanation:^b  An attempt was made to concatenate two character
     values whose combined length exceeded the maximum length.

     ^bAction:^b  Correct the program.  The maximum length of a character
     value in CA-Clipper is 65519 characters.
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1233    String overflow: SPACE
'------------------------------------------------------------------------------
 ^bBASE/1233    String overflow: SPACE^b

     ^bExplanation:^b  The argument to SPACE() specified the creation of a
     character value whose length exceeded the maximum length.

     ^bAction:^b  Correct the program.  The maximum length of a character
     value in CA-Clipper is 65519 characters.
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1234    String overflow: REPLICATE
'------------------------------------------------------------------------------
 ^bBASE/1234    String overflow: REPLICATE^b

     ^bExplanation:^b  The arguments to REPLICATE() specified the creation of
     a character value whose length exceeded the maximum length.

     ^bAction:^b  Correct the program.  The maximum length of a character
     value in CA-Clipper is 65519 characters.
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1340    Zero divisor: /
'------------------------------------------------------------------------------
 ^bBASE/1340    Zero divisor: /^b

     ^bExplanation:^b  The right operand of the division operator (/) was
     zero.

     ^bAction:^b  Correct the program.  The default CA-Clipper error handler
     (Errorsys.prg) returns a zero result for division by zero.
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1341    Zero divisor: %
'------------------------------------------------------------------------------
 ^bBASE/1341    Zero divisor: %^b

     ^bExplanation:^b  The right operand of the modulus operator (%) was
     zero.

     ^bAction:^b  Correct the program.  The default CA-Clipper error handler
     (Errorsys.prg) returns a zero result for division by zero.
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1449    Syntax error: &
'------------------------------------------------------------------------------
 ^bBASE/1449    Syntax error: &^b

     ^bExplanation:^b  The text string supplied to the macro operator (&) was
     not a valid CA-Clipper expression.

     ^bAction:^b  Correct the program.

     ^bSee Also: ^b "Basic Concepts" chapter of the Programming and Utilities
     Guide
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/1513    Operation too complex: &
'------------------------------------------------------------------------------
 ^bBASE/1513    Operation too complex: &^b

     ^bExplanation:^b  The text string supplied to the macro operator (&) was
     too complex to be parsed by the macro parser.

     ^bAction:^b  Simplify the expression or break it into several
     expressions and apply the macro operator to each expression separately.
     For filter and relational expressions, you may want to use a function to
     perform the operation.

     ^bSee Also: ^b "Basic Concepts" chapter of the Programming and Utilities
     Guide
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/2005    Open error (RESTORE command)
'------------------------------------------------------------------------------
 ^bBASE/2005    Open error (RESTORE command)^b

     ^bDefault Behavior:^b  The program will continue without restoring
     memory variables from the specified file.  The default CA-Clipper error
     handler (Errorsys.prg) will set NETERR() to true (.T.) if the error was
     a sharing violation.

     ^bExplanation:^b  The file referred to in a RESTORE command could not be
     opened.

     ^bAction:^b  Check to make sure that the specified file exists.  If the
     file is not in the directory where the application runs, use SET DEFAULT
     or SET PATH to make the file accessible, or specify the full path name
     where the file can be found.  In a network environment, make sure the
     application has the necessary rights to access the file.

     ^bSee Also:^b  RESTORE command
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/2006    Create error (SAVE command)
'------------------------------------------------------------------------------
 ^bBASE/2006    Create error (SAVE command)^b

     ^bDefault Behavior:^b  The program continues without saving memory
     variables to a file.

     ^bExplanation:^b  The file referred to in a SAVE command could not be
     created.

     ^bAction:^b  Check to make sure that sufficient disk space and directory
     entries are available.  If the file exists, make sure it is not marked
     read-only.  In a network environment, make sure the application has the
     necessary rights to create the file.

     ^bSee Also:^b  SAVE command
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/2011    Open error (TYPE command)
'------------------------------------------------------------------------------
 ^bBASE/2011    Open error (TYPE command)^b

     ^bDefault Behavior:^b  The program will continue without TYPEing the
     file.

     ^bExplanation:^b  The file referred to in a TYPE <file> command could
     not be opened.

     ^bAction:^b  Check to make sure that the specified file exists.  If the
     file is not in the directory where the application runs, use SET DEFAULT
     or SET PATH to make the file accessible, or specify the full path name
     where the file can be found.  In a network environment, make sure the
     application has the necessary rights to access the file.

     ^bSee Also:^b  TYPE command
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/2012    Open error (COPY FILE command)
'------------------------------------------------------------------------------
 ^bBASE/2012    Open error (COPY FILE command)^b

     ^bDefault Behavior:^b  The program will continue without copying the
     file.

     ^bExplanation:^b  In a COPY FILE command, the source file could not be
     opened.

     ^bAction:^b  Check to make sure that the file exists.  If the file is
     not in the directory where the application runs, use SET DEFAULT or SET
     PATH to make the file accessible, or specify the full path name where
     the file can be found.

     ^bSee Also:^b  COPY FILE command
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/2016    Write error (COPY FILE command)
'------------------------------------------------------------------------------
 ^bBASE/2016    Write error (COPY FILE command)^b

     ^bDefault Behavio^br:  The program continues without copying the file
     and the partially copied file is not erased.

     ^bExplanation:^b  In a COPY FILE command, the source file could not be
     written to the destination, usually because of a full disk or
     insufficient rights in a network environment.

     ^bAction:^b  Make sure there is sufficient space on the destination
     drive, or check network rights.

     ^bSee Als^bo:  COPY FILE command
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/2017    Argument error (AEVAL() function)
'------------------------------------------------------------------------------
 ^bBASE/2017    Argument error (AEVAL() function)^b

     ^bExplanation:^b  One or more of the arguments to AEVAL() was of the
     wrong type.  This error can also occur when any of the required
     arguments are omitted.

     ^bAction:^b  Correct the program.
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/2018    Open error (DISKSPACE() function)
'------------------------------------------------------------------------------
 ^bBASE/2018    Open error (DISKSPACE() function)^b

     ^bDefault Behavio^br:  The program continues after returning an empty
     value.

     ^bExplanation:^b  The disk does not exist or is not ready upon an
     attempt to access it with the DISKSPACE() function.

     ^bAction:^b  Make sure to supply the correct drive number (for fixed
     disks) or call the DISKSPACE() function in a loop with a user warning
     when checking the readiness of a floppy drive.

     ^bSee Als^bo:  COPY FILE command
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/2020    Argument error (SET() function)
'------------------------------------------------------------------------------
 ^bBASE/2020    Argument error (SET() function)^b

     ^bExplanation:^b This error occurs if a negative numeric value is passed
     to SET() during an attempt to set the following global state variables:

     _SET_DECIMALS     // SET DECIMALS TO xxx
     _SET_EPOCH        // SET EPOCH TO xxxx
     _SET_MARGIN       // SET MARGIN TO xx
     _SET_MESSAGE      // SET MESSAGE TO xx

     ^bAction:^b  Change your code.  Do not pass negative values to SET().

     ^bSee Also:^b  COPY FILE command
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/2022    Argument error: ALLTRIM
'------------------------------------------------------------------------------
 ^bBASE/2022    Argument error: ALLTRIM^b

     ^bExplanation:^b  Argument to ALLTRIM() was not a character value.

     ^bAction:^b  Correct the program.
!seealso: 
'------------------------------------------------------------------------------



!short: BASE/5300    Memory low
'------------------------------------------------------------------------------
 ^bBASE/5300    Memory low^b

     ^bDefault Behavior:^b  Continue with program execution.  Default
     behavior is only available when Error:severity is set to ES_WARNING.

     ^bExplanation:^b  The application has insufficient conventional memory.
     If the condition is a warning (severity 1), execution can continue but
     an unrecoverable error may occur without further warning.  If the
     condition is a recoverable error (severity 2), execution cannot
     continue.

     ^bAction:^b  For safety, quit the application.  Make more memory
     available before running the application again.  Remove unneeded
     resident utilities or device drivers.  Opening fewer database or index
     files may make more memory available.  This error may occur when
     manipulating large browse objects or character values, indicating that
     there is insufficient memory to swap in the object or character value.
     If many C or Assembler add-on functions are linked, overlaying some of
     these functions may free up memory for other uses.

     ^bSee Also:^b  For information on overlaying C and Assembler code, refer
     to "The CA-Clipper Linker--RTLINK.EXE" chapter in the Programming and
     Utilities Guide.
!seealso: 
'------------------------------------------------------------------------------



!short:컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴
!short: ^bTERM Error Messages
!short:
!short: TERM/0       Print error
'------------------------------------------------------------------------------
 ^bTERM/0  Print error^b

     ^bExplanation:^b  A write error has occurred on the print device or
     file.

     ^bAction:^b  Check to make sure the printer is connected and online.  If
     printer output has been redirected to a file, make sure that sufficient
     disk space is available.  If printing to a network device, make sure
     that the network connection is valid and that a time-out has not
     occurred.

     ^bSee Also: ^b "Basic Concepts" and "Network Programming" chapters in
     the Programming and Utilities Guide
!seealso: 
'------------------------------------------------------------------------------



!short: TERM/2013    Create error (SET ALTERNATE command)
'------------------------------------------------------------------------------
 ^bTERM/2013    Create error (SET ALTERNATE command)^b

     ^bDefault Behavior:^b  The program will continue without opening the
     file specified in the SET ALTERNATE command.  If there was a file open
     from a previous SET ALTERNATE command, it will be closed.

     ^bExplanation:^b  The file referred to in a SET ALTERNATE command could
     not be created or opened for writing.

     ^bAction:^b  Check to make sure that sufficient disk space and directory
     entries are available.  If the file exists, make sure it is not marked
     read-only.  In a network environment, make sure the application has the
     necessary rights to create or modify the file.

     ^bSee Also:^b  SET ALTERNATE command
!seealso: 
'------------------------------------------------------------------------------



!short: TERM/2014    Create error (SET PRINTER command)
'------------------------------------------------------------------------------
 ^bTERM/2014    Create error (SET PRINTER command)^b

     ^bDefault Behavior:^b  The program will continue without opening the
     file or device specified in the SET PRINTER command.  If there was a
     file or device open from a previous SET PRINTER command, it will be
     closed.

     ^bExplanation:^b  The file or device referred to in a SET PRINTER
     command could not be created or opened for writing.

     ^bAction:^b  If opening a file, check to make sure that sufficient disk
     space and directory entries are available.  If the file exists, make
     sure it is not marked read-only.  In a network environment, make sure
     the application has the necessary rights to create or modify the file.
     If printing to a network device or queue, make sure that the designated
     device exists and is accessible to the workstation.

     ^bSee Also:^b  SET ALTERNATE command, "Network Programming" chapter in
     the Programming and Utilities Guide
!seealso: 
'------------------------------------------------------------------------------



!short: TERM/2015    Open error (TO FILE clause)
'------------------------------------------------------------------------------
 ^bTERM/2015    Open error (TO FILE clause)^b

     ^bDefault Behavior:^b  The program will continue without opening the
     file specified in the TO FILE clause, and the command will operate as if
     the TO FILE clause had not been specified.

     ^bExplanation:^b  The file referred to in a TO FILE clause of the REPORT
     FORM, LABEL FORM or other command could not be created or opened for
     writing.

     ^bAction:^b  Check to make sure that sufficient disk space and directory
     entries are available.  If the file exists, make sure it is not marked
     read-only.  In a network environment, make sure the application has the
     necessary rights to create or modify the file.

     ^bSee Also:^b  REPORT FORM command, LABEL FORM command
!seealso: 
'------------------------------------------------------------------------------



!short: TERM/2100    Write error: <SET ALTERNATE TO file name>
'------------------------------------------------------------------------------
 ^bTERM/2100    Write error: <SET ALTERNATE TO file name>^b

     ^bExplanation:^b  A write error occurred on the specified file.

     ^bAction:^b  Check to make sure that sufficient disk space and directory
     entries are available.  In a network environment, make sure the
     application has the necessary rights to write to the file.
!seealso: 
'------------------------------------------------------------------------------



!short: TERM/2101    Write error: <SET PRINTER TO file name>
'------------------------------------------------------------------------------
 ^bTERM/2101    Write error: <SET PRINTER TO file name>^b

     ^bExplanation:^b  A write error occurred on the specified file.

     ^bAction:^b  Check to make sure that sufficient disk space and directory
     entries are available.  In a network environment, make sure the
     application has the necessary rights to write to the file.
!seealso: 
'------------------------------------------------------------------------------



!short: TERM/2102    Write error: <_SET_EXTRAFILE file name>
'------------------------------------------------------------------------------
 ^bTERM/2102    Write error: <_SET_EXTRAFILE file name>^b

     ^bExplanation:^b  A write error occurred on the specified file.

     ^bAction:^b  Check to make sure that sufficient disk space and directory
     entries are available.  In a network environment, make sure the
     application has the necessary rights to write to the file.
!seealso: 
'------------------------------------------------------------------------------



!short:컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴
!short: ^bDBCMD Error Messages
!short:
!short: DBCMD/1001   Argument error: SEEK or DBSEEK
'------------------------------------------------------------------------------
 ^bDBCMD/1001   Argument error: SEEK or DBSEEK^b

     ^bExplanation:^b  The argument to the SEEK or DBSEEK() was non-numeric,
     logical, character, or date.

     ^bAction:^b  Correct the program.

     ^bSee Also:^b  DBSEEK() function, SEEK command
!seealso: 
'------------------------------------------------------------------------------



!short: DBCMD/1003   Argument error: GOTO or DBGOTO
'------------------------------------------------------------------------------
 ^bDBCMD/1003   Argument error: GOTO or DBGOTO^b

     ^bExplanation:^b  Argument to GOTO or DBGOTO() was non-numeric.

     ^bAction:^b  Correct the program.

     ^bSee Also:^b  DBGOTO() function, GOTO command
!seealso: 
'------------------------------------------------------------------------------



!short: DBCMD/1004   Argument error: SET RELATION TO or DBSETRELAT
'------------------------------------------------------------------------------
 ^bDBCMD/1004   Argument error: SET RELATION TO or DBSETRELAT^b

     ^bExplanation:^b  One or more of the arguments to SET RELATION TO or
     DBSETRELAT() was of the wrong type, or the alias was invalid.

     ^bAction:^b  Correct the program.

     ^bSee Also:^b  DBSETRELAT() function, SET RELATION TO command
!seealso: 
'------------------------------------------------------------------------------



!short: DBCMD/1005   Argument error: USE or DBUSEAREA
'------------------------------------------------------------------------------
 ^bDBCMD/1005   Argument error: USE or DBUSEAREA^b

     ^bExplanation:^b  One or more of the arguments to USE or DBUSEAREA() was
     of the wrong type.

     ^bAction:^b  Correct the program.

     ^bSee Also:^b  DBUSEAREA() function, USE command
!seealso: 
'------------------------------------------------------------------------------



!short: DBCMD/1006   Argument error: INDEX ON or DBCREATEINDEX
'------------------------------------------------------------------------------
 ^bDBCMD/1006   Argument error: INDEX ON or DBCREATEINDEX^b

     ^bExplanation:^b  One or more of the arguments to INDEX ON or
     DBCREATEINDEX() was of the wrong type.

     ^bAction:^b  Correct the program.

     ^bSee Also:^b  DBCREATEINDEX() function, INDEX ON command
!seealso: 
'------------------------------------------------------------------------------



!short: DBCMD/1007   Argument error: SET ORDER TO or DBSETORDER
'------------------------------------------------------------------------------
 ^bDBCMD/1007   Argument error: SET ORDER TO or DBSETORDER^b

     ^bExplanation:^b  The argument to SET ORDER TO or DBSETORDER() was
     non-numeric.

     ^bAction:^b  Correct the program.

     ^bSee Also:^b  DBSETORDER() function, SET ORDER command
!seealso: 
'------------------------------------------------------------------------------



!short: DBCMD/1008   Argument error: SET INDEX TO or DBSETINDEX
'------------------------------------------------------------------------------
 ^bDBCMD/1008   Argument error: SET INDEX TO or DBSETINDEX^b

     ^bExplanation:^b  The argument to SET INDEX TO or DBSETINDEX() was not a
     character value.

     ^bAction:^b  Correct the program.

     ^bSee Also:^b  DBSETINDEX() function, SET INDEX TO command
!seealso: 
'------------------------------------------------------------------------------



!short: DBCMD/1009   Argument error: FIELDNAME
'------------------------------------------------------------------------------
 ^bDBCMD/1009   Argument error: FIELDNAME^b

     ^bExplanation:^b  The argument to FIELDNAME() was non-numeric.

     ^bAction:^b  Correct the program.

     ^bSee Also:^b  FIELDNAME() function
!seealso: 
'------------------------------------------------------------------------------



!short: DBCMD/1010   Illegal characters in alias
'------------------------------------------------------------------------------
 ^bDBCMD/1010   Illegal characters in alias^b

     ^bExplanation:^b  An attempt was made to create an alias that was not a
     valid identifier.  This occurs if the system is allowed to create a
     default alias based on a file name that is not a valid CA-Clipper
     identifier (e.g., Test$.dbf, 123file.dbf).

     ^bAction:^b  If created due to the default alias, supply a valid
     identifier with the ALIAS clause.
!seealso: 
'------------------------------------------------------------------------------



!short: DBCMD/1011   Alias already in use
'------------------------------------------------------------------------------
 ^bDBCMD/1011   Alias already in use^b

     ^bExplanation:^b  An attempt was made to create an alias that is already
     in use in another work area.  The error is caused by:

     USE Test NEW

     USE Test NEW  // error occurs here

     ^bAction:^b  If created due to the default alias, supply a valid
     identifier with the ALIAS clause.
!seealso: 
'------------------------------------------------------------------------------



!short: DBCMD/1013   Argument error
'------------------------------------------------------------------------------
 ^bDBCMD/1013   Argument error^b

     ^bExplanation:^b  A database command was not used correctly.

     ^bAction:^b  Some suggestions to resolve the problem are:

     1. Check to make sure that the DBCMD is being used correctly.

     2. Check that the RDD is properly linked into the application.

     3. Compile with the /W option.  Resolve all warning messages.
!seealso: 
'------------------------------------------------------------------------------



!short: DBCMD/1014   Invalid argument for DBCREATE()
'------------------------------------------------------------------------------
 ^bDBCMD/1014   Invalid argument for DBCREATE()^b

     ^bExplanation:^b  This error occurs when the array for DBCREATE() has an
     invalid array element.

     ^bAction:^b  Some suggestions to resolve the problem are:

     1. Make sure that all array elements for the DBCREATE() function contain
        valid data.

     2. Check for an additional comma after the fourth array element, as that
        will cause this error.
!seealso: 
'------------------------------------------------------------------------------



!short: DBCMD/1015   Argument Error
'------------------------------------------------------------------------------
 ^bDBCMD/1015   Argument Error^b

     ^bExplanation:^b  You attempted to select a linked-in driver with USE
     VIA but failed to REQUEST it.

     ^bAction:^b  Correct the program.
!seealso: 
'------------------------------------------------------------------------------



!short: DBCMD/1021   Argument error: ORDBAGNAME
'------------------------------------------------------------------------------
 ^bDBCMD/1021   Argument error: ORDBAGNAME^b

     ^bExplanation:^b  Argument to ORDBAGNAME() was not a character value.

     ^bAction:^b  Correct the program.
!seealso: 
'------------------------------------------------------------------------------



!short: DBCMD/1022   Argument error: ORDFOR
'------------------------------------------------------------------------------
 ^bDBCMD/1022   Argument error: ORDFOR^b

     ^bExplanation:^b  One or more of the arguments to ORDFOR() was of the
     wrong type.

     ^bAction:^b  Correct the program.
!seealso: 
'------------------------------------------------------------------------------



!short: DBCMD/1023   Argument error: ORDKEY
'------------------------------------------------------------------------------
 ^bDBCMD/1023   Argument error: ORDKEY^b

     ^bExplanation:^b  One or more of the arguments to ORDKEY() was of the
     wrong type.

     ^bAction:^b  Correct the program.
!seealso: 
'------------------------------------------------------------------------------



!short: DBCMD/1024   Argument error: ORDNAME
'------------------------------------------------------------------------------
 ^bDBCMD/1024   Argument error: ORDNAME^b

     ^bExplanation:^b  One or more of the arguments to ORDNAME() was of the
     wrong type.

     ^bAction:^b  Correct the program.
!seealso: 
'------------------------------------------------------------------------------



!short: DBCMD/1025   Argument error: ORDNUMBER
'------------------------------------------------------------------------------
 ^bDBCMD/1025   Argument error: ORDNUMBER^b

     ^bExplanation:^b  One or more of the arguments to ORDNUMBER() was of the
     wrong type.

     ^bAction:^b  Correct the program.
!seealso: 
'------------------------------------------------------------------------------



!short: DBCMD/1031   Argument error: DBFIELDINFO
'------------------------------------------------------------------------------
 ^bDBCMD/1031   Argument error: DBFIELDINFO^b

     ^bExplanation:^b  One or more of the arguments to DBFIELDINFO() was of
     the wrong type.

     ^bAction:^b  Correct the program.
!seealso: 
'------------------------------------------------------------------------------



!short: DBCMD/1032   Argument error: DBRECORDINFO
'------------------------------------------------------------------------------
 ^bDBCMD/1032   Argument error: DBRECORDINFO^b

     ^bExplanation:^b  One or more of the arguments to DBRECORDINFO() was of
     the wrong type.

     ^bAction:^b  Correct the program.
!seealso: 
'------------------------------------------------------------------------------



!short: DBCMD/1033   Argument error: DBORDERINFO
'------------------------------------------------------------------------------
 ^bDBCMD/1033   Argument error: DBORDERINFO^b

     ^bExplanation:^b  One or more of the arguments to DBORDERINFO() was of
     the wrong type.

     ^bAction:^b  Correct the program.
!seealso: 
'------------------------------------------------------------------------------



!short: DBCMD/1034   Argument error: DBINFO
'------------------------------------------------------------------------------
 ^bDBCMD/1034   Argument error: DBINFO^b

     ^bExplanation:^b  One or more of the arguments to DBINFO() was of the
     wrong type.

     ^bAction:^b  Correct the program.
!seealso: 
'------------------------------------------------------------------------------



!short: DBCMD/1101   Syntax error
'------------------------------------------------------------------------------
 ^bDBCMD/1101   Syntax error^b

     ^bExplanation:^b  This error occurs when the FIELDS clause of the TOTAL
     command includes an alias that does not point to the current work area:

     TOTAL ON x TO y FIELDS badalias->f1

     ^bAction:^b  With TOTAL, make sure to use an alias that refers to the
     current work area (if you use an alias).
!seealso: 
'------------------------------------------------------------------------------



!short: DBCMD/2001   Work area not in use
'------------------------------------------------------------------------------
 ^bDBCMD/2001   Work area not in use^b

     ^bExplanation:^b  An attempt to execute a command or function that
     requires the use of a database failed because there was no database open
     in the specified work area.

     ^bAction:^b  Correct the program.  If the command is prefixed by an
     alias, verify that the alias is spelled correctly.
!seealso: 
'------------------------------------------------------------------------------



!short: DBCMD/2019   Argument error
'------------------------------------------------------------------------------
 ^bDBCMD/2019   Argument error^b

     ^bExplanation:^b  One or more of the arguments to DBEVAL() was of the
     wrong type.  This error can also occur when any of the required
     arguments are omitted.

     ^bAction:^b  Correct the program.  Pass a valid data type to DBEVAL().

     ^bSee Also:^b  DBEVAL() function
!seealso: 
'------------------------------------------------------------------------------



!short:컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴
!short: ^bDBFCDX Error Messages
!short:
!short: DBFCDX/602   Index corruption detected
'------------------------------------------------------------------------------
 ^bDBFCDX/602   Index corruption detected^b

     ^bExplanation:^b  The RDD has found the index to be corrupted.

     ^bAction:^b  Erase the index file and recreate a new index file.
!seealso: 
'------------------------------------------------------------------------------



!short: DBFCDX/610   Argument error
'------------------------------------------------------------------------------
 ^bDBFCDX/610   Argument error^b

     ^bExplanation:^b  The index may be corrupted.

     ^bAction: ^b Make sure that you did not create the index using a
     variable as in:

     Local cDbfName := "MyDbf"
     USE ( cDbfName ) NEW
     INDEX ON ( cDbfName )->field TAG field TO Myindex.cdx
     USE
     USE ( cDbfName ) NEW

     This will cause the DBFCDX/610 error when the database (.dbf) file is
     reopened using an index created like this.  Also, this is very bad
     coding.
!seealso: 
'------------------------------------------------------------------------------



!short: DBFCDX/611   Index key too long
'------------------------------------------------------------------------------
 ^bDBFCDX/611   Index key too long^b

     ^bExplanation:^b  The index key expression is too long.

     ^bAction:^b  Shorten the index key expression.
!seealso: 
'------------------------------------------------------------------------------



!short: DBFCDX/612   Invalid key length
'------------------------------------------------------------------------------
 ^bDBFCDX/612   Invalid key length^b

     ^bExplanation:^b  This error is caused when the stored index key length
     and the actual length, when evaluated, are of different lengths.

     ^bAction:^b  Some suggestions to resolve the problem are:

     1. Basically, make sure that the key expression will produce a value of
        the same length for all records.

     2. Avoid using functions like TRIM() in the key expression.  If you need
        to restrict the length of key values, use functions like LEFT() or
        PADR().

     3. If you are using a user-defined function (UDF), make sure that the
        same function is available in all applications that use the index,
        and that the function returns a value of the same length for all
        records.
!seealso: 
'------------------------------------------------------------------------------



!short: DBFCDX/631   Non-compact index not supported
'------------------------------------------------------------------------------
 ^bDBFCDX/631   Non-compact index not supported^b

     ^bExplanation:^b  The .cdx file was found to be a NON-COMPACT .cdx file.

     ^bAction:^b  Check to see if the file was created under FOXPRO v1.0.
     CDX RDD only supports COMPACT version of .cdx files.
!seealso: 
'------------------------------------------------------------------------------



!short: DBFCDX/650   Can't find current key in index
'------------------------------------------------------------------------------
 ^bDBFCDX/650   Can't find current key in index^b

     ^bExplanation:^b  The index key was not found.

     ^bAction:^b  Try recreating the index file.  Check that the index key
     expression is valid.
!seealso: 
'------------------------------------------------------------------------------



!short: DBFCDX/1012  Corruption detected
'------------------------------------------------------------------------------
 ^bDBFCDX/1012  Corruption detected^b

     ^bExplanation:^b  The .dbf file header is corrupted.  This could be due
     to the improper use of the RDD, or there may be MEMO fields associated
     with the .dbf file that were not changed to .fpt format.

     ^bAction: ^b Recreate the .dbf file header structure.  Properly link in
     the correct RDD, or perform a COPY TO....VIA "DBFCDX" to convert the
     .dbt memo file format to an .fpt memo file format.
!seealso: 
'------------------------------------------------------------------------------



!short: DBFCDX/1028  Create error
'------------------------------------------------------------------------------
 ^bDBFCDX/1028  Create error^b

     ^bExplanation:^b  The maximum number of orders per order bag was
     exceeded.  The allowable number of orders that an order bag can contain
     varies by database driver.

     ^bAction: ^b Cut down the number of tags being used.

     ^bSee Also:^b  RDD Features in the "Replaceable Database Architecture"
     chapter of the Driver's Guide.
!seealso: 
'------------------------------------------------------------------------------



!short: DBFCDX/1050  Invalid TAG/ORDER
'------------------------------------------------------------------------------
 ^bDBFCDX/1050  Invalid TAG/ORDER^b

     ^bExplanation:^b  You tried to set the tag order of the order bag to a
     non-existing tag or an illegal (blank) tag name.

     ^bAction:^b  Make sure that OrdSetFocus() is setting the tag order to a
     valid  tag.
!seealso: 
'------------------------------------------------------------------------------



!short: DBFCDX/1051  Scope Type Mismatch
'------------------------------------------------------------------------------
 ^bDBFCDX/1051  Scope Type Mismatch^b

     ^bExplanation:^b  An attempt was made to use an incorrect type for a
     scope.  For example, if you have a numeric key and attempt to use a date
     for a scope, you will get this error.

     ^bAction:^b  Correct the syntax.
!seealso: 
'------------------------------------------------------------------------------



!short: DBFCDX/1052  Not Custom Built Index
'------------------------------------------------------------------------------
 ^bDBFCDX/1052  Not Custom Built Index^b

     ^bExplanation:^b  Either ordKeyAdd() or ordKeyDel() was called for an
     index which is not a custom built index.

     ^bAction:^b  Rebuild the index as a custom built index.
!seealso: 
'------------------------------------------------------------------------------



!short: DBFCDX/1053  Index FOR condition didn't evaluate to a logical
'------------------------------------------------------------------------------
 ^bDBFCDX/1053  Index FOR condition didn't evaluate to a logical^b

     ^bExplanation:^b  This error code indicates that you have tried to use
     an expression in a FOR clause of an INDEX statement which does not
     evaluate to a logical.

     ^bAction:^b  Correct the syntax.
!seealso: 
'------------------------------------------------------------------------------



!short: DBFCDX/1054  The type or length of the key doesn't match what's stored...
'------------------------------------------------------------------------------
 ^bDBFCDX/1054  The type or length of the key doesn't match what's stored
 ^b             on disk

     ^bExplanation:^b  this error code indicates:

     1. a key expression has changed since the index was created.  For
        example, if you had an index on LAST and changed the width of the
        field from 20 bytes to 25 bytes, and then tried to use the old index,
        you would get this error.

     2. an index was created on an expression which has a variable length
        (e.g., TRIM(last)).  The key expression must always return a fixed
        length.

     ^bAction:^b  Use PADR() to ensure that the key expression is always the
     same length.
!seealso: 
'------------------------------------------------------------------------------



!short: DBFCDX/1055  DBF Signature Invalid
'------------------------------------------------------------------------------
 ^bDBFCDX/1055  DBF Signature Invalid^b

     ^bExplanation:^b  This error indicates that the signature field of the
     .dbf is invalid.  Reasons for this error include:

     1. Trying to use a non-DBF file as a .dbf.

     2. Corruption of the .dbf.

     3. Trying to use a file with a .dbt memo-field.

     ^bAction:^b  Recreate the .dbf as a valid CA-Clipper .dbf
!seealso: 
'------------------------------------------------------------------------------



!short: DBFCDX/1056  Memo Type Invalid
'------------------------------------------------------------------------------
 ^bDBFCDX/1056  Memo Type Invalid^b

     ^bExplanation:^b  All FPT memo entries have a type field.  This error
     indicates that the type field is invalid.  The reasons for this error
     include:

     1. Memo file corruption.

     2. Trying to use a memo-field type which CA-Clipper does not understand
        (e.g., FoxPro for Windows Picture Field Type).

     ^bAction:^b  Recreate the .dbf as a valid CA-Clipper .dbf
!seealso: 
'------------------------------------------------------------------------------



!short: DBFCDX/1057  Memo Too Long
'------------------------------------------------------------------------------
 ^bDBFCDX/1057  Memo Too Long^b

     ^bExplanation:^b  This error occurs when attempting to access a memo
     field which is over 64K in length.  maximum length of a memo field (with
     an .fpt memo file) is 65520 bytes.  Reasons for this error include:

     1. Memo file corruption.

     2. Trying to use an .fpt created by a different product which does
        support >64K memo fields.

     ^bAction:^b  Recreate the .dbf as a valid CA-Clipper .dbf
!seealso: 
'------------------------------------------------------------------------------



!short:컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴
!short: ^bDBFMDX Error Messages
!short:
!short: DBFMDX/1006  Exclusive required (creating index)
'------------------------------------------------------------------------------
 ^bDBFMDX/1006  Exclusive required (creating index)^b

     ^bExplanation:^b  The specified index (.mdx) file could not be created.

     ^bAction: ^b This error can be corrected in the following ways:

     1. Check to make sure that the .dbf file is being opened EXCLUSIVEly.
        DB4 requires this, and this is also required with the MDX RDD.  If
        the file exists, make sure it is not marked read-only.

     2. In a network environment, make sure the application has the necessary
        rights to create the file.

     ^bSee Also:^b  INDEX command, "Network Programming" chapter in the
     Programming and Utilities Guide
!seealso: 
'------------------------------------------------------------------------------



!short: DBFMDX/1028  Create error
'------------------------------------------------------------------------------
 ^bDBFMDX/1028  Create error^b

     ^bExplanation:^b  The maximum number of orders per order bag was
     exceeded.  The allowable number of orders that an order bag can contain
     varies by database driver.

     ^bAction: ^b Cut down the number of tags being used.

     ^bSee Also:^b  RDD Features in the "Replaceable Database Architecture"
     chapter of the Driver's Guide.
!seealso: 
'------------------------------------------------------------------------------



!short: DBFMDX/1050  Invalid TAG/ORDER
'------------------------------------------------------------------------------
 ^bDBFMDX/1050  Invalid TAG/ORDER^b

     ^bExplanation:^b  You tried to set the tag order of the order bag to a
     non-existing tag or an illegal (blank) tag name.

     ^bAction:^b  Make sure that ORDSETFOCUS() is setting the tag order to a
     valid tag.
!seealso: 
'------------------------------------------------------------------------------



!short:컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴
!short: ^bDBFNDX Error Messages
!short:
!short: DBFNDX/1001  Open error (.dbf)
'------------------------------------------------------------------------------
 ^bDBFNDX/1001  Open error (.dbf)^b

     ^bExplanation:^b  The specified database (.dbf) file could not be
     opened.

     ^bAction:^b

     1. Check to make sure that the specified file exists.  If the file is
        not in the directory where the application runs, use SET DEFAULT or
        SET PATH to make the file accessible, or specify the full path name
        where the file can be found.

     2. In a network environment, make sure the application has the necessary
        rights to access the file.  If the file is available only for read
        access, use the READONLY clause on the USE command.

        CA-Clipper's default error handler (Errorsys.prg) will set NETERR()
        to true (.T.) and will ask DBFNDX to default if the error was due to
        a sharing violation on the network.

     ^bSee Also:^b  USE command, "Network Programming" chapter in the
     Programming and Utilities Guide
!seealso: 
'------------------------------------------------------------------------------



!short: DBFNDX/1002  Open error (.dbt)
'------------------------------------------------------------------------------
 ^bDBFNDX/1002  Open error (.dbt)^b

     ^bExplanation:^b  The specified memo (.dbt) file could not be opened.

     ^bAction:^b  Some suggestions to resolve the problem are:

     1. Check to make sure that the specified file exists.  If the file is
        not in the directory where the application runs, use SET DEFAULT or
        SET PATH to make the file accessible, or specify the full path name
        where the file can be found.

     2. In a network environment, make sure the application has the necessary
        rights to access the file.  If the file is available only for read
        access, use the READONLY clause on the USE command.

     3. CA-Clipper's default error handler (Errorsys.prg) will set NETERR()
        to true (.T.) and will ask DBFNDX to default if the error was due to
        a sharing violation on the network.

     ^bSee Also:^b  USE command, "Network Programming" chapter in the
     Programming and Utilities Guide
!seealso: 
'------------------------------------------------------------------------------



!short: DBFNDX/1003  Open error (index)
'------------------------------------------------------------------------------
 ^bDBFNDX/1003  Open error (index)^b

     ^bExplanation:^b  The specified index (.ndx) file could not be opened.

     ^bAction:^b  Some suggestions to resolve the problem are:

     1. Check to make sure that the specified file exists.  If the file is
        not in the directory where the application runs, use SET DEFAULT or
        SET PATH to make the file accessible, or specify the full path name
        where the file can be found.

     2. If the error occurs on SET INDEX TO, then make sure that the index
        file exists and that the drive and path are valid.

     3. In a network environment, make sure the application has the necessary
        rights to access the file.  If the file is available only for read
        access, use the READONLY clause on the USE or SET INDEX command.

        CA-Clipper's default error handler (Errorsys.prg) will set NETERR()
        to true (.T.) and will ask DBFNDX to default if the error was due to
        a sharing violation on the network.

     ^bSee Also:^b  USE command, SET INDEX command, "Network Programming"
     chapter in the Programming and Utilities Guide
!seealso: 
'------------------------------------------------------------------------------



!short: DBFNDX/1004  Open error (creating .dbf)
'------------------------------------------------------------------------------
 ^bDBFNDX/1004  Open error (creating .dbf)^b

     ^bExplanation:^b  The specified database (.dbf) file could not be
     created.

     ^bAction:^b  Some suggestions to resolve the problem are:

     1. Check to make sure that sufficient disk space and directory entries
        are available.  If the file exists, make sure it is not marked
        read-only.

     2. In a network environment, make sure the application has the necessary
        rights to create the file.

     ^bSee Also:^b  CREATE command, COPY command, "Network Programming"
     chapter in the Programming and Utilities Guide
!seealso: 
'------------------------------------------------------------------------------



!short: DBFNDX/1005  Open error (creating .dbt)
'------------------------------------------------------------------------------
 ^bDBFNDX/1005  Open error (creating .dbt)^b

     ^bExplanation:^b  The specified memo (.dbt) file could not be created.

     ^bAction:^b  Some suggestions to resolve the problem are:

     1. Check to make sure that sufficient disk space and directory entries
        are available.  If the file exists, make sure it is not marked
        read-only.

     2. In a network environment, make sure the application has the necessary
        rights to create the file.

     ^bSee Also:^b  CREATE command, COPY command, "Network Programming"
     chapter in the Programming and Utilities Guide
!seealso: 
'------------------------------------------------------------------------------



!short: DBFNDX/1006  Create error (creating index)
'------------------------------------------------------------------------------
 ^bDBFNDX/1006  Create error (creating index)^b

     ^bExplanation:^b  The specified index (.ndx) file could not be created.

     ^bAction:^b  Some suggestions to resolve the problem are:

     1. Check to make sure that sufficient disk space and directory entries
        are available.  If the file exists, make sure it is not marked
        read-only.

     2. In a network environment, make sure the application has the necessary
        rights to create the file.

     ^bSee Also:^b  INDEX command, "Network Programming" chapter in the
     Programming and Utilities Guide
!seealso: 
'------------------------------------------------------------------------------



!short: DBFNDX/1010  Read error
'------------------------------------------------------------------------------
 ^bDBFNDX/1010  Read error^b

     ^bExplanation:^b  A read error occurred on the specified file.

     ^bAction:^b  Some suggestions to resolve the problem are:

     1. If the file is on a floppy disk, make sure the disk is properly
        seated in the drive.

     2. In a network environment, make sure the network connection is still
        valid; check for problems at the server.

     ^bSee Also:^b  "Network Programming" chapter in the Programming and
     Utilities Guide
!seealso: 
'------------------------------------------------------------------------------



!short: DBFNDX/1011  Write error
'------------------------------------------------------------------------------
 ^bDBFNDX/1011  Write error^b

     ^bExplanation:^b  A write error occurred on the specified file.

     ^bAction:^b  Some suggestions to resolve the problem are:

     1. Check to make sure that sufficient disk space and directory entries
        are available.  Make sure the file is not marked read-only.

     2. In a network environment, make sure the application has the necessary
        rights to write to the file.

     ^bSee Also:^b  "Network Programming" chapter in the Programming and
     Utilities Guide
!seealso: 
'------------------------------------------------------------------------------



!short: DBFNDX/1012  Corruption detected
'------------------------------------------------------------------------------
 ^bDBFNDX/1012  Corruption detected^b

     ^bExplanation:^b  File corruption has been detected in the specified
     file.

     ^bAction:^b  Make sure that the file type is correct for the operation.
     For index files, make sure that the type of index matches the driver
     being used (e.g., .ndx for DBFNDX).
!seealso: 
'------------------------------------------------------------------------------



!short: DBFNDX/1020  Data type error
'------------------------------------------------------------------------------
 ^bDBFNDX/1020  Data type error^b

     ^bExplanation:^b  The value assigned to a FIELD variable was of the
     wrong type.

     ^bAction:^b  Correct the program.  If assigning a FIELD variable is from
     some other variable, make sure the other variable has been initialized
     (i.e., is not NIL).

     ^bSee Also:^b  "Basic Concepts" chapter in the Programming and Utilities
     Guide
!seealso: 
'------------------------------------------------------------------------------



!short: DBFNDX/1021  Data width error
'------------------------------------------------------------------------------
 ^bDBFNDX/1021  Data width error^b

     ^bExplanation:^b  The value assigned to a numeric FIELD variable could
     not be accurately represented in the field width specified by the
     database structure.

     ^bAction:^b  Change the program to suppress invalid values or modify the
     structure of the database (.dbf) file to allow for larger values.  DBU,
     the CA-Clipper Database Utility, can be used to modify the structure of
     a database (.dbf) file.

     ^bSee Also:^b  "Basic Concepts" and "Database Utility" chapters in the
     Programming and Utilities Guide
!seealso: 
'------------------------------------------------------------------------------



!short: DBFNDX/1022  Lock required
'------------------------------------------------------------------------------
 ^bDBFNDX/1022  Lock required^b

     ^bExplanation:^b  An attempt was made to update a record in a shared
     database without first obtaining a lock.

     ^bAction:^b  Correct the program.  Obtain a record lock or file lock for
     the work area before attempting to update a record.  If shared access is
     not desired, use the EXCLUSIVE clause of the USE command to gain
     exclusive access to the database (.dbf) file.

     ^bSee Also:^b  USE command, RLOCK() function, FLOCK() function, "Network
     Programming" chapter in the Programming and Utilities Guide
!seealso: 
'------------------------------------------------------------------------------



!short: DBFNDX/1023  Exclusive required
'------------------------------------------------------------------------------
 ^bDBFNDX/1023  Exclusive required^b

     ^bExplanation:^b  The operation being attempted requires exclusive use
     of the database (.dbf) file but the work area was opened for shared
     access.

     ^bAction:^b  Correct the program.  The PACK, REINDEX, and ZAP commands
     require exclusive access to the database (.dbf) file. To obtain
     exclusive access, use the EXCLUSIVE clause of the USE command.

     ^bSee Also:^b  USE command, "Network Programming" chapter in the
     Programming and Utilities Guide
!seealso: 
'------------------------------------------------------------------------------



!short: DBFNDX/1024  Append lock failed
'------------------------------------------------------------------------------
 ^bDBFNDX/1024  Append lock failed^b

     ^bExplanation:^b  A new record could not be appended because a lock
     could not be obtained for the new record.

     ^bAction:^b  For a shared work area, the APPEND BLANK command
     automatically obtains a record lock for the newly appended record.  If
     the record cannot be locked, the APPEND fails.  This generally occurs
     because another process has obtained a file lock on the database (.dbf)
     file.  Change the program to handle the lock contention.

     ^bNote:^b  The default CA-Clipper error handler (Errorsys.prg) handles
     this error by setting the global NETERR() status to true (.T.) and
     resuming execution.  Thus, the error only causes an error message or
     alert when a custom error handler is used.  For an example of how to
     handle this error condition, refer to Errorsys.prg.

     ^bSee Also:^b "Network Programming" chapter in the Programming and
     Utilities Guide
!seealso: 
'------------------------------------------------------------------------------



!short: DBFNDX/1025  Write not allowed
'------------------------------------------------------------------------------
 ^bDBFNDX/1025  Write not allowed^b

     ^bExplanation:^b  An attempt was made to update a record in a work area
     which was opened for read-only access.

     ^bAction:^b  Correct the program.  Either suppress operations which
     update records, or open the database (.dbf) file for read/write access.
     To obtain read/write access, remove the READONLY clause from the USE
     command.

     ^bSee Also:^b  USE command
!seealso: 
'------------------------------------------------------------------------------



!short: DBFNDX/1026  Data width error
'------------------------------------------------------------------------------
 ^bDBFNDX/1026  Data width error^b

     ^bExplanation:^b  When building an index, the initial evaluation of the
     key expression (on a blank record) produced a character value of zero
     length.

     ^bAction:^b  Make sure the key expression will produce a value of the
     same length for all records.  Do not use functions such as TRIM() in the
     key expression.  To restrict the length of the key values, use the
     LEFT() or PADR() functions.

     ^bSee Also:^b  INDEX command
!seealso: 
'------------------------------------------------------------------------------



!short: DBFNDX/1027  Limit exceeded
'------------------------------------------------------------------------------
 ^bDBFNDX/1027  Limit exceeded^b

     ^bExplanation:^b  Too many indexes were opened for a work area.

     ^bAction:^b  Reduce the number of active indexes for the work area.  For
     each work area, a maximum of 15 indexes can be active at any one time.

     ^bSee Also:^b  USE command, SET INDEX command
!seealso: 
'------------------------------------------------------------------------------



!short:컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴
!short: ^bDBFNTX Error Messages
!short:
!short: DBFNTX/1001  Open error (.dbf)
'------------------------------------------------------------------------------
 ^bDBFNTX/1001  Open error (.dbf)^b

     ^bExplanation:^b  The specified database (.dbf) file could not be
     opened.

     ^bAction:^b  Some suggestions to resolve the problem are:

     1. Check to make sure that the specified file exists.  If the file is
        not in the directory where the application runs, use SET DEFAULT or
        SET PATH to make the file accessible, or specify the full path name
        where the file can be found.

     2. In a network environment, make sure the application has the necessary
        rights to access the file.  If the file is available only for read
        access, use the READONLY clause on the USE command.

        CA-Clipper's default error handler (Errorsys.prg) will set NETERR()
        to true (.T.) and will ask DBFNTX to default if the error was due to
        a sharing violation on the network.

     ^bSee Also:^b  USE command, "Network Programming" chapter in the
     Programming and Utilities Guide
!seealso: 
'------------------------------------------------------------------------------



!short: DBFNTX/1002  Open error (.dbt)
'------------------------------------------------------------------------------
 ^bDBFNTX/1002  Open error (.dbt)^b

     ^bExplanation:^b  The specified memo (.dbt) file could not be opened.

     ^bAction:^b  Some suggestions to resolve the problem are:

     1. Check to make sure that the specified file exists.  If the file is
        not in the directory where the application runs, use SET DEFAULT or
        SET PATH to make the file accessible, or specify the full path name
        where the file can be found.

     2. In a network environment, make sure the application has the necessary
        rights to access the file.  If the file is available only for read
        access, use the READONLY clause on the USE command.

        CA-Clipper's default error handler (Errorsys.prg) will set NETERR()
        to true (.T.) and will ask DBFNTX to default if the error was due to
        a sharing violation on the network.

     ^bSee Also:^b  USE command, "Network Programming" chapter in the
     Programming and Utilities Guide
!seealso: 
'------------------------------------------------------------------------------



!short: DBFNTX/1003  Open error (index)
'------------------------------------------------------------------------------
 ^bDBFNTX/1003  Open error (index)^b

     ^bExplanation:^b  The specified index (.ntx) file could not be opened.

     ^bAction:^b  Some suggestions to resolve the problem are:

     1. Check to make sure that the specified file exists.  If the file is
        not in the directory where the application runs, use SET DEFAULT or
        SET PATH to make the file accessible, or specify the full path name
        where the file can be found.

     2. If the file is available only for read access, use the READONLY
        clause on the USE or SET INDEX command.

     3. In a network environment, make sure the application has the necessary
        rights to access the file.

        CA-Clipper's default error handler (Errorsys.prg) will set NETERR()
        to true (.T.) and will ask DBFNTX to default if the error was due to
        a sharing violation on the network.

     ^bSee Also:^b  USE command, SET INDEX command, "Network Programming"
     chapter in the Programming and Utilities Guide
!seealso: 
'------------------------------------------------------------------------------



!short: DBFNTX/1004  Open error (creating .dbf)
'------------------------------------------------------------------------------
 ^bDBFNTX/1004  Open error (creating .dbf)^b

     ^bExplanation:^b  The specified database (.dbf) file could not be
     created.

     ^bAction:^b  Some suggestions to resolve the problem are:

     1. Check to make sure that sufficient disk space and directory entries
        are available.  If the file exists, make sure it is not marked
        read-only.

     2. In a network environment, make sure the application has the necessary
        rights to create the file.

    ^bSee Also:^b  CREATE command, COPY command, "Network Programming"
    chapter in the Programming and Utilities Guide
!seealso: 
'------------------------------------------------------------------------------



!short: DBFNTX/1005  Open error (creating .dbt)
'------------------------------------------------------------------------------
 ^bDBFNTX/1005  Open error (creating .dbt)^b

     ^bExplanation:^b  The specified memo (.dbt) file could not be created.

     ^bAction:^b  Some suggestions to resolve the problem are:

     1. Check to make sure that sufficient disk space and directory entries
        are available.  If the file exists, make sure it is not marked
        read-only.

     2. In a network environment, make sure the application has the necessary
        rights to create the file.

     ^bSee Also:^b  CREATE command, COPY command, "Network Programming"
     chapter in the Programming and Utilities Guide
!seealso: 
'------------------------------------------------------------------------------



!short: DBFNTX/1006  Create error (creating index)
'------------------------------------------------------------------------------
 ^bDBFNTX/1006  Create error (creating index)^b

     ^bExplanation:^b  The specified index (.ntx) file could not be created.

     ^bAction:^b  Some suggestions to resolve the problem are:

     1. Check to make sure that sufficient disk space and directory entries
        are available.  If the file exists, make sure it is not marked
        read-only.

     2. In a network environment, make sure the application has the necessary
        rights to create the file.

     ^bSee Also:^b  INDEX command, "Network Programming" chapter in the
     Programming and Utilities Guide
!seealso: 
'------------------------------------------------------------------------------



!short: DBFNTX/1010  Read error
'------------------------------------------------------------------------------
 ^bDBFNTX/1010  Read error^b

     ^bExplanation:^b  A read error occurred on the specified file.

     ^bAction:^b  Some suggestions to resolve the problem are:

     1. If the file is on a floppy disk, make sure the disk is properly
        seated in the drive.  In a network environment, make sure the network
        connection is still valid; check for problems at the server.

     2. Check to make sure that the index, memo file, and.dbf file have not
        been truncated by DOS's CHKDSK or a similar utility, and that there
        is no file corruption.

        This can also occur if the STACK space is not enough.

     ^bSee Also:^b  "Network Programming" chapter in the Programming and
     Utilities Guide
!seealso: 
'------------------------------------------------------------------------------



!short: DBFNTX/1011  Write error
'------------------------------------------------------------------------------
 ^bDBFNTX/1011  Write error^b

     ^bExplanation:^b  A write error occurred on the specified file.

     ^bAction:^b  Some suggestions to resolve the problem are:

     1. Check to make sure that sufficient disk space and directory entries
        are available.  Make sure the file is not marked read-only.

     2. In a network environment, make sure the application has the necessary
        rights to write to the file.

     3. On Novell networks, make sure that the FILE OWNER has not been
        deleted from the user list.  Make the file owner SUPERVISOR.

     4. Check to see if the media has failed, or if a physical lock has been
        placed on the file region in question.

     ^bSee Also:^b  "Network Programming" chapter in the Programming and
     Utilities Guide
!seealso: 
'------------------------------------------------------------------------------



!short: DBFNTX/1012  Corruption detected
'------------------------------------------------------------------------------
 ^bDBFNTX/1012  Corruption detected^b

     ^bExplanation:^b  File corruption has been detected in the specified
     file.

     ^bAction:^b  Make sure that the file type is correct for the operation.
     For index files, make sure that the type of index matches the driver
     being used (e.g., .ntx for DBFNTX).  Try recreating the database file
     and/or index files.
!seealso: 
'------------------------------------------------------------------------------



!short: DBFNTX/1015  Request for RDD improperly linked
'------------------------------------------------------------------------------
 ^bDBFNTX/1015  Request for RDD improperly linked^b

     ^bExplanation:^b  The RDD was not successfully linked into the
     application.

     ^bAction:^b  Make sure that the RDD used is properly linked into the
     application. Make sure that the RDD name is spelled correctly.

     Refer to the Drivers Guide for proper methods of REQUESTing, USE....VIA,
     and/or RDDSETDEFAULT() for RDDs.  There should not be any unresolved
     externals after linking.
!seealso: 
'------------------------------------------------------------------------------



!short: DBFNTX/1020  Data type error
'------------------------------------------------------------------------------
 ^bDBFNTX/1020  Data type error^b

     ^bExplanation:^b  The value assigned to a FIELD variable was of the
     wrong type.

     ^bAction:^b  Correct the program.  If assigning a FIELD variable is from
     some other variable, make sure the other variable has been initialized
     (i.e., is not NIL).

     ^bSee Also:^b  " Basic Concepts" chapter in the Programming and
     Utilities Guide
!seealso: 
'------------------------------------------------------------------------------



!short: DBFNTX/1021  Data width error
'------------------------------------------------------------------------------
 ^bDBFNTX/1021  Data width error^b

     ^bExplanation:^b  The value assigned to a numeric FIELD variable could
     not be accurately represented in the field width specified by the
     database structure.

     ^bAction:^b  Change the program to suppress invalid values, or modify
     the structure of the database (.dbf) file to allow for larger values.
     DBU, the CA-Clipper Database Utility, can be used to modify the
     structure of a database (.dbf) file.

     ^bSee Also:^b  "Basic Concepts" and "Database Utility" chapters in the
     Programming and Utilities Guide
!seealso: 
'------------------------------------------------------------------------------



!short: DBFNTX/1022  Lock required
'------------------------------------------------------------------------------
 ^bDBFNTX/1022  Lock required^b

     ^bExplanation:^b  An attempt was made to update a record in a shared
     database without first obtaining a lock.

     ^bAction:^b  Correct the program.  Obtain a record lock or file lock for
     the work area before attempting to update a record.  If shared access is
     not desired, use the EXCLUSIVE clause of the USE command to gain
     exclusive access to the database (.dbf) file.

     ^bSee Also:^b  USE command, RLOCK() function, FLOCK() function, "Network
     Programming" chapter in the Programming and Utilities Guide
!seealso: 
'------------------------------------------------------------------------------



!short: DBFNTX/1023  Exclusive required
'------------------------------------------------------------------------------
 ^bDBFNTX/1023  Exclusive required^b

     ^bExplanation:^b  The operation being attempted requires exclusive use
     of the database (.dbf) file but the work area was opened for shared
     access.

     ^bAction:^b  Correct the program.  The PACK, REINDEX, and ZAP commands
     require exclusive access to the database (.dbf) file.  To obtain
     exclusive access, use the EXCLUSIVE clause of the USE command.

     ^bSee Also:^b  USE command, "Network Programming" chapter in the
     Programming and Utilities Guide
!seealso: 
'------------------------------------------------------------------------------



!short: DBFNTX/1024  Append lock failed
'------------------------------------------------------------------------------
 ^bDBFNTX/1024  Append lock failed^b

     ^bExplanation:^b  A new record could not be appended because a lock
     could not be obtained for the new record.

     ^bAction:^b  For a shared work area, the APPEND BLANK command
     automatically obtains a record lock for the newly appended record.  If
     the record cannot be locked, the APPEND fails.  This generally occurs
     because another process has obtained a file lock on the database (.dbf)
     file.  Change the program to handle the lock contention.

     ^bNote:^b  The default CA-Clipper error handler (Errorsys.prg) handles
     this error by setting the global NETERR() status to true (.T.) and
     resuming execution.  Thus, the error only causes an error message or
     alert when a custom error handler is used.  For an example of how to
     handle this error condition, refer to Errorsys.prg.

     ^bSee Also:^b  "Network Programming" chapter in the Programming and
     Utilities Guide
!seealso: 
'------------------------------------------------------------------------------



!short: DBFNTX/1025  Write not allowed
'------------------------------------------------------------------------------
 ^bDBFNTX/1025  Write not allowed^b

     ^bExplanation:^b  An attempt was made to update a record in a work area
     which was opened for read-only access.

     ^bAction:^b  Correct the program.  Either suppress operations which
     update records or open the database (.dbf) file for read/write access.
     To obtain read/write access, remove the READONLY clause from the USE
     command.

     ^bSee Also:^b  USE command
!seealso: 
'------------------------------------------------------------------------------



!short: DBFNTX/1026  Data width error
'------------------------------------------------------------------------------
 ^bDBFNTX/1026  Data width error^b

     ^bExplanation:^b  When building an index, the initial evaluation of the
     key expression (on a blank record) produced a character value of zero
     length.

     ^bAction:^b  Make sure the key expression will produce a value of the
     same length for all records.  Do not use functions such as TRIM() in the
     key expression.  To restrict the length of the key values, use the
     LEFT() or PADR() functions.

     This error can also occur when creating an index on an invalid field
     type (e.g., trying to create an index on a MEMO FIELD).  The maximum key
     length is 250 bytes.

     ^bSee Also:^b  INDEX command
!seealso: 
'------------------------------------------------------------------------------



!short: DBFNTX/1027  Limit exceeded
'------------------------------------------------------------------------------
 ^bDBFNTX/1027  Limit exceeded^b

     ^bExplanation:^b  Too many indices were opened for a work area.

     ^bAction:^b  Reduce the number of active indices for the work area.  For
     each work area, a maximum of 15 indices can be active at any one time.

     ^bSee Also:^b  USE command, SET INDEX command
!seealso: 
'------------------------------------------------------------------------------



!short: DBFNTX/1035  Record lock timeout
'------------------------------------------------------------------------------
 ^bDBFNTX/1035  Record lock timeout^b

     ^bExplanation:^b  The request for a record lock has timed out.

     ^bAction:^b  Make sure that the maximum file locks for the OS has not
     been exceeded.  This can be caused by using DBRLOCK() and not using
     DBRUNLOCK() to release record locks.
!seealso: 
'------------------------------------------------------------------------------



!short: DBFNTX/1038  Lock failure
'------------------------------------------------------------------------------
 ^bDBFNTX/1038  Lock failure^b

     ^bExplanation:^b  CA-Clipper tried to get a lock or an unlock on an
     index and failed.

     ^bAction:^b  Make sure that the Ntxerr.prg has not been modified.  Check
     network connections, traffic, cards, etc.
!seealso: 
'------------------------------------------------------------------------------



!short: DBFNTX/1201  Work area not indexed
'------------------------------------------------------------------------------
 ^bDBFNTX/1201  Work area not indexed^b

     ^bExplanation:^b  No index is in use when SEEK() or DBSEEK() is
     attempted.

     ^bAction:^b  Make sure an index is in use.
!seealso: 
'------------------------------------------------------------------------------



!short: DBFNTX/1210  Corruption detected
'------------------------------------------------------------------------------
 ^bDBFNTX/1210  Corruption detected^b

     ^bExplanation:^b  The index and the database files are "out of sync"
     with each other.  This is usually due to the index key expression
     evaluating to a variable length.

     ^bAction:^b  Some suggestions to resolve the problem are:

     1. Recreate the indices for the database. Ensure that all indices are
        open when the database is updated.  Check for other causes of
        corruption as well (EMS memory, network problems, improper RDD,
        etc.).

     2. Check that ALL index key expressions are a constant length.  Usage of
        LTRIM(), RTRIM(), TRIM(), ALLTRIM(), STR(), DTOC() can all produce
        expressions that are not a constant length.  The xTRIM() functions
        should all be padded out to a constant width using PADR().

     3. Use all 3 arguments to STR().

     4. Use DTOS() instead of DTOC() in index key expressions.  DTOC() is
        dependent upon the SET DATE FORMAT.

     5. Using a field or expression aliased into a different work area will
        also cause this error--e.g., area2->field1 or area2->( str( fld1, 5,
        0 ) ).


!seealso: 
'------------------------------------------------------------------------------



!short:컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴
!short: ^bRuntime Unrecoverable Error Messages
!short:
!short: 0            Error System Integrity Error
'------------------------------------------------------------------------------
 ^b0  Error System Integrity Error^b

     ^bExplanation:^b  The error system has encountered an unknown error.
     The probable cause is memory corruption.
!seealso: 
'------------------------------------------------------------------------------



!short: 1            Evaluation Stack Underflow
'------------------------------------------------------------------------------
 ^b1  Evaluation Stack Underflow^b

     ^bExplanation:^b  A stack error has occurred after a Return.

     ^bAction:^b  Look for missing or additional RETURN statement.
!seealso: 
'------------------------------------------------------------------------------



!short: 2            Memory Error
'------------------------------------------------------------------------------
 ^b2  Memory Error^b

     ^bExplanation:^b  A memory error has occurred before a RUN.  The system
     has attempted to free the Run space to DOS, and DOS reported an error.
     The likely cause is corruption in the DOS memory allocation system.
!seealso: 
'------------------------------------------------------------------------------



!short: 3            Memory Error
'------------------------------------------------------------------------------
 ^b3  Memory Error^b

     ^bExplanation:^b  A memory error has occurred after a RUN that prevents
     rebuilding of the buffer system.  This occurs when the system tries to
     rebuild the Run space, and there is less than 16K available from DOS.
!seealso: 
'------------------------------------------------------------------------------



!short: 4            Memory Error
'------------------------------------------------------------------------------
 ^b4  Memory Error^b

     ^bExplanation:^b  A memory error has occurred corrupting an internal
     buffer system.  This happens when an attempt is made to free an internal
     buffer, and it is already free.
!seealso: 
'------------------------------------------------------------------------------



!short: 5            Memory Error
'------------------------------------------------------------------------------
 ^b5  Memory Error^b

     ^bExplanation:^b  A memory error has occurred corrupting the buffer and
     EMM system.  This occurs when attempting to map an EMM memory block into
     conventional address space, and the EMM driver reports an error.
!seealso: 
'------------------------------------------------------------------------------



!short: 6            Buffer Error
'------------------------------------------------------------------------------
 ^b6  Buffer Error^b

     ^bExplanation:^b  This occurs when attempting to attach a buffer to a
     database and the database already has a buffer.  The probable cause is
     memory corruption.
!seealso: 
'------------------------------------------------------------------------------



!short: 7            Buffer Error
'------------------------------------------------------------------------------
 ^b7  Buffer Error^b

     ^bExplanation:^b  This occurs when attempting to detach a database,
     buffer from a database and there is no buffer to detach.  The most
     probable cause is memory corruption.
!seealso: 
'------------------------------------------------------------------------------



!short: 8            Buffer Error
'------------------------------------------------------------------------------
 ^b8  Buffer Error^b

     ^bExplanation:^b  The system ran out of database and/or index buffer
     handles.
!seealso: 
'------------------------------------------------------------------------------



!short: 9            Buffer Error
'------------------------------------------------------------------------------
 ^b9  Buffer Error^b

     ^bExplanation:^b  The system ran out of memory when attempting to
     allocate a database, and/or index buffer.
!seealso: 
'------------------------------------------------------------------------------



!short: 10           Too Many Nested BEGIN SEQUENCE/END Blocks
'------------------------------------------------------------------------------
 ^b10 Too Many Nested BEGIN SEQUENCE/END Blocks^b

     ^bExplanation:^b  Too many nested BEGIN SEQUENCE/END blocks have been
     defined.  The maximum is 16.

     ^bNote:^b The usual reason this occurs is a LOOP statement within a
     BEGIN SEQUENCE/END structure like the following:

     DO WHILE <condition>
        <statements>...
        BEGIN SEQUENCE
           <statements>...
           LOOP
        END <statements>...
     ENDDO
!seealso: 
'------------------------------------------------------------------------------



!short: 11           BEGIN SEQUENCE/END Integrity Error
'------------------------------------------------------------------------------
 ^b11 BEGIN SEQUENCE/END Integrity Error^b

     ^bExplanation:^b  An underflow of the BEGIN SEQUENCE stack has occurred.
     This only happens if there is a pending END without a BEGIN SEQUENCE.
!seealso: 
'------------------------------------------------------------------------------



!short: 12           Evaluation stack underflow after BEGIN SEQUENCE/END
'------------------------------------------------------------------------------
 ^b12 Evaluation stack underflow after BEGIN SEQUENCE/END^b

     ^bExplanation:^b  This error occurs after a BREAK.
!seealso: 
'------------------------------------------------------------------------------



!short: 14           SORT Error
'------------------------------------------------------------------------------
 ^b14 SORT Error^b

     ^bExplanation:^b  The system ran out of memory during a SORT operation
     while attempting to allocate a database buffer.
!seealso: 
'------------------------------------------------------------------------------



!short: 15           SORT Error
'------------------------------------------------------------------------------
 ^b15 SORT Error^b

     ^bExplanation:^b  Memory corruption has occurred during a SORT
     operation.
!seealso: 
'------------------------------------------------------------------------------



!short: 16           Database Not Open
'------------------------------------------------------------------------------
 ^b16 Database Not Open^b

     ^bExplanation:^b  This occurs at the end of a large block database
     operation (such as, APPEND, JOIN, UPDATE, or TOTAL) and one of the
     database files used in the operation is no longer open.

     ^bAction:^b  Check the user-defined function used within the erroneous
     statement for any statements that close database files.
!seealso: 
'------------------------------------------------------------------------------



!short: 17           NTX File Corrupted
'------------------------------------------------------------------------------
 ^b17 NTX File Corrupted^b

     ^bExplanation:^b  This occurs when an index buffer is found to be
     corrupted when attempting to update an index page.
!seealso: 
'------------------------------------------------------------------------------



!short: 18           NTX File Corrupted
'------------------------------------------------------------------------------
 ^b18 NTX File Corrupted^b

     ^bExplanation:^b  This occurs when an index buffer is found to be
     corrupted when attempting to update an index page, and the index is
     UNIQUE.
!seealso: 
'------------------------------------------------------------------------------



!short: 19           NTX File Corrupted
'------------------------------------------------------------------------------
 ^b19 NTX File Corrupted^b

     ^bExplanation:^b  This occurs when an index buffer is found to be
     corrupted when attempting to update an index page, and the index is
     non-UNIQUE.
!seealso: 
'------------------------------------------------------------------------------



!short: 20           NDX File Key Type Error
'------------------------------------------------------------------------------
 ^b20 NDX File Key Type Error^b

     ^bExplanation:^b  An evaluation of a key in a .ndx file does not result
     in a character or number.  This can only occur if the key is a logical
     value.
!seealso: 
'------------------------------------------------------------------------------



!short: 21           NDX File Key Type Error
'------------------------------------------------------------------------------
 ^b21 NDX File Key Type Error^b

     ^bExplanation:^b  A SEEK expression evaluates to a different data type
     than the index expression.
!seealso: 
'------------------------------------------------------------------------------



!short: 22           .NTX File Key Type Error
'------------------------------------------------------------------------------
 ^b22 .NTX File Key Type Error^b

     ^bExplanation:^b  A SEEK expression in a .ntx file evaluates to a
     logical, or the system runs out of memory when evaluating the key
     expression.
!seealso: 
'------------------------------------------------------------------------------



!short: 24           Write error
'------------------------------------------------------------------------------
 ^b24 Write error^b

     ^bExplanation:^b  This error occurs when a CA-Clipper application is
     unable to write to a database file or to an index file.

     ^bAction:^b  Check that sufficient disk space and directory entries are
     available.  Make sure the file is not marked read-only.  In a network
     environment, make sure the application has the necessary rights to write
     to the file and all network connections are correct.

     ^bSee Also: ^b "Network Programming" chapter in the Programming and
     Utilities Guide.
!seealso: 
'------------------------------------------------------------------------------



!short: 37           Too many symbols in symbol table
'------------------------------------------------------------------------------
 ^b37 Too many symbols in symbol table^b

     ^bExplanation:^b  This error occurs with an application linked with
     Exospace.  The application will terminate immediately upon start up.
     This is caused by CODE GENERATORS that generate an excessive amount of
     symbols.

     ^bAction:^b  Some suggestions to resolve the problem are:

     1. Decrease that amount and/or reuse symbols, declare as local.

     2. List .PRGs in .CLP files to compile fewer and larger .OBJ files.

     ^bSee Also: ^b "Compiling" chapter in the Programming and Utilities
     Guide and the "CA-Clipper Technical Specifications" appendix.
!seealso: 
'------------------------------------------------------------------------------



!short: 92           SORT/INDEX ON Error
'------------------------------------------------------------------------------
 ^b92 SORT/INDEX ON Error^b

     ^bExplanation:^b  The system is unable to create a temporary file during
     a SORT or INDEX operation.  This can occur for one of the following
     reasons:

     1. No disk space.

     2. Disk is write-protected.

     3. No more directory entries.

     4. The file already exists and is read-only.

     5. There are not enough file handles available.
!seealso: 
'------------------------------------------------------------------------------



!short: 331          String/array buffer/memory overflow
'------------------------------------------------------------------------------
 ^b331     String/array buffer/memory overflow^b

     ^bExplanation:^b  In the worst case, this error will occur when slightly
     over a megabyte of strings and/or arrays are in use; the best case is in
     excess of 16 megabytes.  Probably the most common cause of this error is
     the declaration of extremely large arrays (e.g., LOCAL
     aArray[500][300]).  every array element requires memory to store (even
     if its value is NIL).  the number of array elements in an array is
     determined by multiplying the number of elements in every dimension and
     adding the sum of all dimensions except for the last.  For example, a
     500 by 300 array has (500 x 300) + 500, or 150,500 elements.  As every
     array element in CA-Clipper requires 14 bytes, this amounts to 150,500 x
     14 or 2,107,000 byteswell in excess of one megabyte and, therefore,
     potentially dangerous.

     ^bAction:^b  reduce the size and/or number of strings and arrays that
     are active at any one time.  Declare as many string variables and arrays
     LOCAL as possible.

     ^bNote: ^b There is no benefit gained by reusing arrays.  CA-Clipper is
     much more efficient when strings and arrays are thrown away and rebuilt
     often rather than kept around unnecessarily for long periods.
!seealso: 
'------------------------------------------------------------------------------



!short: 332          String/array memory overflow
'------------------------------------------------------------------------------
 ^b332     String/array memory overflow^b

     ^bExplanation:^b  The maximum capacity of the Segment Virtual Object
     Store (SVOS) system has been exceeded.  Due to the dynamic nature of
     SVOS, it is impossible to state exactly when this error will occur.  In
     the worst case, this error will occur when slightly over a megabyte of
     strings and/or arrays are in use; the best case is in excess of 16
     megabytes.  Probably the most common cause of this error is the
     declaration of extremely large arrays (e.g., LOCAL aArray[500][300]).
     every array element requires memory to store (even if its value is NIL).
     the number of array elements in an array is determined by multiplying
     the number of elements in every dimension and adding the sum of all
     dimensions except for the last.  For example, a 500 by 300 array has
     (500 x 300) + 500, or 150,500 elements.  As every array element in
     CA-Clipper requires 14 bytes, this amounts to 150,500 x 14 or 2,107,000
     byteswell in excess of one megabyte and, therefore, potentially
     dangerous.

     ^bAction:^b  reduce the size and/or number of strings and arrays that
     are active at any one time.  Declare as many string variables and arrays
     LOCAL as possible.

     ^bNote: ^b There is no benefit gained by reusing arrays.  CA-Clipper is
     much more efficient when strings and arrays are thrown away and rebuilt
     often rather than kept around unnecessarily for long periods.
!seealso: 
'------------------------------------------------------------------------------



!short: 335          String/Array invalid pointer
'------------------------------------------------------------------------------
 ^b335     String/Array invalid pointer^b

     ^bExplanation:^b  This results from an error accessing the memory
     address for a string value during an element assignment while declaring
     a large multidimensional array.

     ^bAction:^b  Try declaring an empty array and then build the array using
     AADD().  Check string assignments for a NULL character.
!seealso: 
'------------------------------------------------------------------------------



!short: 336          String/Array memory overflow
'------------------------------------------------------------------------------
 ^b336     String/Array memory overflow^b

     ^bExplanation:^b  This results from trying to a declare a large
     multidimensional array.

     ^bAction:^b  Try declaring an empty array, and then build the array
     using AADD().
!seealso: 
'------------------------------------------------------------------------------



!short: 415          Cannot open overlay file
'------------------------------------------------------------------------------
 ^b415     Cannot open overlay file^b

     ^bExplanation:^b  This error occurs when a CA-Clipper application cannot
     find or open an overlay file.  Overlay files include executable (.EXE)
     files (in the case of dynamic overlays), and static overlay (.ovl)
     files.  Probably the most common cause of this error is insufficient
     file handles available to the CA-Clipper application.

     ^bAction:^b  Some suggestions to resolve the problem are:

     1. The first step in trying to solve this problem is to increase the
        number of file handles available to the application.  refer to the
        Files and Buffers section in "The Runtime Environment" chapter of the
        Programming and Utilities guide.

     2. If an insufficient number of file handles is not the problem, it is
        possible that the CA-Clipper application cannot find the file it is
        trying to open.  It is possible that another file of the same name as
        the executable is in the DOS path and is being searched for the
        overlay.  Try renaming the executable.

     ^bSee Also:^b  Specifying the Location of Executable Files section in
     "The Runtime Environment" chapter of the Programming and Utilities
     Guide.
!seealso: 
'------------------------------------------------------------------------------



!short: 416          Read error on overlay
'------------------------------------------------------------------------------
 ^b416     Read error on overlay^b

     ^bExplanation:^b  This error indicates that the runtime manager could
     not READ from overlay.

     ^bAction:^b  Some suggestions to resolve the problem are:

     1. Make sure you are not deleting or FCLOSE()ing any file handles that
        you did not specifically create.

     2. If you are on a network, make sure that the server did not lock up.
        Also make sure that the workstation has not been disconnected.  Check
        Check the validity of the network cards, cabling, drivers, etc.

     3. Increase the number of file handles available to the application.

     4. Check that the application's EXE drive and directory are still valid.

     5. Make sure the .EXE is marked READONLY (dynamic manager always opens
        page files SHARED and READONLY).

     6. Make sure there are no duplicates of the .EXE file available through
        any MAP, PATH or SEARCH drive.  ERASE duplicate .EXE files.

     7. Do not rename the .EXE. Recreate it with an alternative OUTPUT link
        command.
!seealso: 
'------------------------------------------------------------------------------



!short: 520          Attempt to get value for an invalid field type
'------------------------------------------------------------------------------
 ^b520     Attempt to get value for an invalid field type^b

     ^bExplanation:^b  This error may indicate a corrupted or non CA-Clipper
     compatible database file.

     ^bAction:^b  Repair the database header and field structure.
!seealso: 
'------------------------------------------------------------------------------



!short: 521          Replacement of field with invalid data type
'------------------------------------------------------------------------------
 ^b521     Replacement of field with invalid data type^b

     Self-explanatory.
!seealso: 
'------------------------------------------------------------------------------



!short: 612          EVAL() given something other than codeblock
'------------------------------------------------------------------------------
 ^b612     EVAL() given something other than codeblock^b

     ^bExplanation: ^b A data type other than a code block was supplied as
     the first argument to EVAL().

     ^bNote:^b  A class object is not a code block.

     ^bSee Also:^b  "Basic Concepts" chapter in the Programming and Utilities
     Guide.
!seealso: 
'------------------------------------------------------------------------------



!short: 650          Out of stack space
'------------------------------------------------------------------------------
 ^b650     Out of stack space^b

     ^bExplanation: ^b stack space is exhausted.

     ^bAction:^b  Some suggestions to resolve the problem are:

     1. Use STACK or PROCEDURE DEPTH command to instruct the linker to
        increase the stack space at link time.

     2. check for recursion.  Some modifications to the CA-Clipper
        errorsys.prg may cause a recursive call, which will exhaust the call
        stack.

     3. try using the default CA-Clipper errorsys.prg if the errorsys.prg was
        modified to test for runaway recursion caused by an error occurring
        while attempting to handle an Error Object.

     4. Check for UDFs/.PRGs that have the same name as an internal
        CA-Clipper function.

     5. Check for use of an incorrect or invalid version of the Errorsys.prg,
        i.e., the Summer '87 CA-Clipper Errorsys.prg does not use an Error
        object.
!seealso: 
'------------------------------------------------------------------------------



!short: 666          C Function Attempt to Free Invalid Pointer
'------------------------------------------------------------------------------
 ^b666     C Function Attempt to Free Invalid Pointer^b

     ^bExplanation:^b  This error indicates that a C function attempted to
     free an invalid pointer.
!seealso: 
'------------------------------------------------------------------------------



!short: 667          Eval stack crashed
'------------------------------------------------------------------------------
 ^b667     Eval stack crashed^b

     ^bExplanation:^b  The evaluation stack (containing LOCALs, etc.) and/or
     Memvar table has been exceeded, causing an attempt to access a locked VM
     segment in near memory.

     ^bAction:^b  Some suggestions to resolve this problem are:

     1. Decrease the stack or PROCEDURE DEPTH setting for the linker.

     2. Decrease the number of LOCAL, STATIC or PRIVATE variables in use at
        one time. i.e., use arrays instead of individual variables.

     3. Decrease the number of ITEMS allocated if using ITEM.API of
        CA-Clipper.

     4. Free more conventional memory for use by the VM System.

     ^bNote:^b There could be an error in the runtime error handler.

     ^bSee Also:^b  Error 650.
!seealso: 
'------------------------------------------------------------------------------



!short: 668          EVAL STACK FAULT
'------------------------------------------------------------------------------
 ^b668     EVAL STACK FAULT^b

     ^bExplanation:^b  The evaluation stack expanded into a locked VMM
     segment.  The CA-Clipper VM System will use the DGROUP Free Space when
     conventional DOS memory is very low.

     ^bAction:^b  Free up conventional DOS memory by reducing the
     application's load size and/or increasing free DOS memory as reported by
     DOS's MEM.EXE command.

     ^bNote:^b There could be an error in the runtime error handler.

     ^bSee Also:^b  Error 650.
!seealso: 
'------------------------------------------------------------------------------



!short: 669          EVAL STACK FAULT
'------------------------------------------------------------------------------
 ^b669     EVAL STACK FAULT^b

     ^bExplanation:^b  The MEMVAR table expanded into a locked VM Segment.
     The CA-Clipper VM System will use the DGROUP free space when
     conventional DOS memory is low.

     ^bAction:^b  Free up conventional DOS memory by reducing the
     application's load size and/or increasing free DOS memory as reported by
     DOS's MEM.EXE command.

     ^bNote:^b There could be an error in the runtime error handler.

     ^bSee Also:^b  Error 650.
!seealso: 
'------------------------------------------------------------------------------



!short: 670          Memory initialization error
'------------------------------------------------------------------------------
 ^b670     Memory initialization error^b

     ^bExplanation:^b  An error has occurred during the initialization or
     re-initialization of the memory system.  This error usually indicates an
     extremely low memory condition at startup, or that an application that
     was RUN from within CA-Clipper allocated DOS memory without freeing it.

     ^bAction:^b  If the error occurred at startup, more conventional memory
     should be made available for the application.  If it occurred
     immediately following the RUN command, the application that was run
     should be eliminated to see if this solves the problem.  This problem
     may also occur with an improperly linked or corrupted application.
!seealso: 
'------------------------------------------------------------------------------



!short: 701          Unable to locate keyboard driver upon startup
'------------------------------------------------------------------------------
 ^b701     Unable to locate keyboard driver upon startup^b

     ^bAction:^b  Make sure the latest CA-Clipper libraries are used, and
     that no third-party libraries are linked.  Determine that the .EXE is
     not corrupted.
!seealso: 
'------------------------------------------------------------------------------



!short: 702          Keyboard driver I/O error upon startup
'------------------------------------------------------------------------------
 ^b702     Keyboard driver I/O error upon startup^b

     ^bExplanation:^b  The keyboard detected was not compatible for I/O
     access.

     ^bAction:^b  Make sure the latest CA-Clipper libraries are used, and
     that no third-party libraries are linked.  Determine that the .EXE is
     not corrupted.  Determine the keyboard may be accessed from the DOS
     prompt.
!seealso: 
'------------------------------------------------------------------------------



!short: 703          Unable to locate display driver upon startup
'------------------------------------------------------------------------------
 ^b703     Unable to locate display driver upon startup^b

     ^bAction:^b  Make sure the latest CA-Clipper libraries are used, and
     that no third-party libraries are linked.  Determine that the .EXE is
     not corrupted.
!seealso: 
'------------------------------------------------------------------------------



!short: 704          Screen display driver I/O error upon startup
'------------------------------------------------------------------------------
 ^b704     Screen display driver I/O error upon startup^b

     ^bExplanation:^b  The CRT detected was not compatible for I/O access.

     ^bAction:^b  Make sure the latest CA-Clipper libraries are used, and
     that no third-party libraries are linked.  Determine that the .EXE is
     not corrupted.  Determine the screen may be accessed from the DOS
     prompt.
!seealso: 
'------------------------------------------------------------------------------



!short: 705          Unable to determine disk drivetype upon startup
'------------------------------------------------------------------------------
 ^b705     Unable to determine disk drivetype upon startup^b

     ^bAction:^b  Make sure the latest CA-Clipper libraries are used, and
     that no third-party libraries are linked.  Determine that the .EXE is
     not corrupted.
!seealso: 
'------------------------------------------------------------------------------



!short: 706          Disk drivetype I/O error upon startup
'------------------------------------------------------------------------------
 ^b706     Disk drivetype I/O error upon startup^b

     ^bExplanation:^b  The disk detected was not compatible for I/O access.

     ^bAction:^b  Make sure the latest libraries are used, and that no
     third-party libraries are linked.  Determine that the .EXE is not
     corrupted.  Determine the disk may be accessed from the DOS prompt.
!seealso: 
'------------------------------------------------------------------------------



!short: 715          Printer not ready
'------------------------------------------------------------------------------
 ^b715     Printer not ready^b

     ^bExplanation: ^b Self-explanatory.

     ^bAction:^b  Make sure the latest libraries are used, and that no
     third-party libraries are linked.  Determine that the link instructions
     are valid and the .EXE is not corrupted.  Determine the printer may be
     accessed from the DOS prompt.
!seealso: 
'------------------------------------------------------------------------------



!short: 773          Dynamic overlay system not linked in
'------------------------------------------------------------------------------
 ^b773     Dynamic overlay system not linked in^b

     ^bExplanation:^b  This may indicate an invalid link line or a corrupted
     executable file.

     ^bAction:^b  Make sure the latest libraries are used, and that no
     third-party libraries are linked.  Determine that the link instructions
     are valid and the .EXE is not corrupted.  Confirm that the memory
     configuration did not affect linking.
!seealso: 
'------------------------------------------------------------------------------



!short: 998          Missing function
'------------------------------------------------------------------------------
 ^b998     Missing function^b

     ^bExplanation:^b  CA-Clipper has attempted to execute a function or UDF
     that is not recognized as valid CA-Clipper code.  This error can occur
     if an attempt is made to execute code compiled with a new version of
     CA-Clipper under an older version, or because of a corrupted or invalid
     executable.

     ^bAction:^b  Make sure that all code is compiled under the same version
     of CA-Clipper, and is being linked with the correct version of the
     libraries.  If a third-party linker is used, see if the error occurs
     when using the real mode linker for CA-Clipper.  If a corrupted
     executable is suspected, recompile all .OBJ files and relink.  Declare
     UDFs or built-in functions hidden from the compiler in macro or INDEXing
     commands with REQUEST if they are not called elsewhere in the code.
     Link in missing .OBJs.  Make sure all linker warnings and errors are
     resolved.
!seealso: 
'------------------------------------------------------------------------------



!short: 999          Attempt to execute invalid code
'------------------------------------------------------------------------------
 ^b999     Attempt to execute invalid code^b

     ^bExplanation:^b  CA-Clipper has attempted to execute something that it
     does not recognize as valid CA-Clipper code.  This error can occur if an
     attempt is made to execute code compiled with a new version of
     CA-Clipper under an older version, or because of a corrupted or invalid
     executable.

     ^bAction:^b  Make sure that all code is compiled under the same version
     of CA-Clipper and is being linked with the correct version of the
     libraries.  If a third-party linker is used, see if the error occurs
     when using CA-Clipper/Exospace or Blinker.  If a corrupted executable is
     suspected, recompile all .OBJ files and relink.
!seealso: 
'------------------------------------------------------------------------------



!short: 1010         Read/write in index page failed
'------------------------------------------------------------------------------
 ^b1010    Read/write in index page failed^b

     ^bAction:^b  Check for memory conflicts that could cause a corruption of
     the index buffer.  Try disabling the EMS with the //E:0  in SET CLIPPER.
     If using third-party RDDs, try increasing the stack space.  If using
     structural indexes (.CDX, .MDX), delete the index file and recreate.
!seealso: 
'------------------------------------------------------------------------------



!short: 1011         Read/write access in index page failed
'------------------------------------------------------------------------------
 ^b1011    Read/write access in index page failed^b

     ^bExplanation:^b  CA-Clipper has attempted to read or write to an index
     page.  This error can occur if a the stack has become corrupted or there
     is insufficient stack space.  This may be due to a corrupted or invalid
     .EXE.

     ^bAction:^b  Try increasing the STACK or PROCEDURE DEPTH.  Check for
     memory conflicts that could cause a corruption of the index buffer.  Try
     disabling the EMS with the //E:0 in SET CLIPPER.  If using third-party
     RDDs, try increasing the stack space.  If using structural indexes
     (.CDX, .MDX), delete the index file and recreate.  Resolve all linker
     warnings and errors.  Recompile all .OBJs and relink.  Check all third
     party RDD version compatibility.
!seealso: 
'------------------------------------------------------------------------------



!short: 1020         Record not found
'------------------------------------------------------------------------------
 ^b1020    Record not found^b

     ^bExplanation:^b  This error indicates one of the following conditions:

     1. Invalid record number data type specified in DBGOTO().

     2. Invalid field data type encountered when loading a field from disk to
        memory.

     3. Invalid field data type encountered when storing a field from memory
        to disk.

     ^bAction:^b  Delete indices and recreate.  Check for memory conflicts
     that could cause a corruption of the index buffer.  Try disabling the
     EMS with the //E:0 in SET CLIPPER.  If using third-party RDDs, try
     increasing the stack space.  If using structural indexes (.CDX, .MDX),
     delete the index file and recreate.

     ^bNote:^b  This error is applicable to the DBFNTX replaceable database
     driver (RDD), and may not be applicable to other RDDs.
!seealso: 
'------------------------------------------------------------------------------



!short: 1101         Maximum workareas exceeded
'------------------------------------------------------------------------------
 ^b1101    Maximum workareas exceeded^b

     ^bExplanation:^b  CA-Clipper supports 250 work areas.  This error can be
     produced if this limit is exceeded.  This usually indicates that an
     internal process tried to access a field which does not exist, or that
     an internal field structure is not valid for the work area.  This means
     the runtime system is out of work areas for work area index strings.

     ^bAction:^b  A good place to start looking is in the third-party RDD or
     any "in house" C/ASM code.  Make sure the database driver was REQUESTed
     and linked.  Check the .LIBrary link order.
!seealso: 
'------------------------------------------------------------------------------



!short: 1102         Requested RDD not linked
'------------------------------------------------------------------------------
 ^b1102    Requested RDD not linked^b

     ^bExplanation:^b  The database driver that was specified is not linked
     into the application.

     ^bAction:^b  Make sure that the correct database driver is specified.
!seealso: 
'------------------------------------------------------------------------------



!short: 1112         Read value larger than 64kb
'------------------------------------------------------------------------------
 ^b1112    Read value larger than 64kb^b

     ^bExplanation:^b  A read of a variable with length larger than 64kb was
     attempted.  The limit for character variables and memo fields is 64kb.

     ^bAction:^b  This read error could indicate an index access failure
     indicating a bad FIELD type, i.e., INDEXing on a MEMO or large character
     field.  Look into third-party RDD or any "in house" C/ASM code.  Make
     sure the REQUESTed database driver was linked and check the .LIBrary
     link order.
!seealso: 
'------------------------------------------------------------------------------



!short: 1201         No master index in use
'------------------------------------------------------------------------------
 ^b1201    No master index in use^b

     ^bExplanation:^b  An operation, such as a SEEK, was performed in the
     work area but there was no master or controlling index order.

     ^bAction:^b  Make sure that the index ORDER is not ZERO, or nullified,
     or that the TAG that had been SET ORDER TO was not deleted within a
     multi-tag index.
!seealso: 
'------------------------------------------------------------------------------



!short: 1210         Data and Index files out of sync
'------------------------------------------------------------------------------
 ^b1210    Data and Index files out of sync^b

     ^bExplanation:^b  Database (.dbf) and index (.ntx) files are not
     synchronized, or there is a stack corruption or access problem related
     to the RDD loaded.

     ^bAction:^b  Some suggestions to resolve the problem are:

     1. If the cause of this problem is that the database is being updated
        through a utility external to the application, simply recreate the
        index (.ntx) file and restart the application.

     2. If the database was not updated outside of the application, check the
        code for the application to ensure that all indexes are open when
        updates are being done.  Correct the code, recreate the index files
        (.ntx), and restart the application.

     3. Check that ALL index key expressions are a constant length. Usage of
        LTRIM(), RTRIM(), TRIM(), ALLTRIM(), STR(), and DTOC() can all
        produce expressions that are not a constant length.  The TRIM()
        functions should all be padded out to a constant width using PADR().

     4. Use all three arguments to STR().

     5. Use DTOS() instead of DTOC() in index key expressions.  DTOC() is
        dependent upon the SET DATE FORMAT.

     ^bNote:^b  This error is applicable to the third party replaceable
     database drivers  (RDDs), and may not be applicable to CA-Clipper RDDs.
     This may mean the stack was corrupted, preventing the application from
     accessing the RDD's index expression.  Increase the STACK or PROCEDURE
     DEPTH.  Look for missing or incorrectly ordered .LIBraries, or loading a
     mismatched RDD.

     ^bSee Also:^b  Errors 1010, 1020, and DBFNTX/1210 in this chapter.
!seealso: 
'------------------------------------------------------------------------------



!short: 1240         Index key evaluation error
'------------------------------------------------------------------------------
 ^b1240    Index key evaluation error^b

     ^bExplanation:^b  An error occurred during index key calculation.  This
     can also be caused by a corrupted header in the .dbf file can cause
     this.  INDEX ON with an EVAL clause not returning a logical true (.T.)
     will also cause this error.

     ^bAction:^b  Check the index key to ensure it is not on a logical field.
     Rebuild the .dbf file in the DBU utility, or with DBCREATE(), not COPY
     STRUCTURE, then append records.
!seealso: 
'------------------------------------------------------------------------------



!short: 1242         Data type mismatch on key replacement
'------------------------------------------------------------------------------
 ^b1242    Data type mismatch on key replacement^b

     ^bExplanation:^b  An attempt was made to replace a key field in the
     database with an invalid data type.  Indexing on a logical field may
     also cause this error.

     ^bAction:^b  Test the index keys and the replacement values in the
     debugger.
!seealso: 
'------------------------------------------------------------------------------



!short: 1255         Damaged index header
'------------------------------------------------------------------------------
 ^b1255    Damaged index header^b

     ^bExplanation:^b  This is caused by an index key expression greater than
     255 characters.

     ^bAction:^b  Recreate the index file, not exceeding the key expression
     limit.

     ^bSee Also:^b  "CA-Clipper Technical Specifications" appendix, check
     third party documentation.
!seealso: 
'------------------------------------------------------------------------------



!short: 2155         Read error on index heading page
'------------------------------------------------------------------------------
 ^b2155    Read error on index heading page^b

     ^bExplanation:^b  A read error occurred when reading the heading page of
     the index file, or the header did not contain the .ntx signature, or the
     macro compiler returned a syntax error when attempting to compile the
     key expression.

     ^bAction:^b  Recreate the index file and check the key expression.  Make
     sure the database header is updated before index recreation.
!seealso: 
'------------------------------------------------------------------------------



!short: 4001         Number of METHODs exceeded
'------------------------------------------------------------------------------
 ^b4001    Number of METHODs exceeded^b

     ^bExplanation:^b  An error occurred when accessing more than 32 methods
     for an instantiation of a class object at runtime.

     ^bAction:^b  CA-Clipper allows no more than 32 methods for any class
     object at runtime.  Check for third party Class .LIBraries and creation
     of  new methods for additional classes.  A typographical error or using
     the SEND operator may mistakenly cause identification of an erroneous
     method.
!seealso: 
'------------------------------------------------------------------------------



!short: 4406         Temp file read error
'------------------------------------------------------------------------------
 ^b4406    Temp file read error^b

     ^bExplanation:^b  An error occurred when reading from a temporary file.
     This is most likely to occur when the disk where the temporary files are
     written is full.

     ^bAction:^b  Free up the necessary space on the drive for the temporary
     file, or redirect the temporary file to a different drive via the
     TEMPPATH option of the CA-Clipper environment variable.  Check file
     ownership and rights if on a network.
!seealso: 
'------------------------------------------------------------------------------



!short: 4412         Indexing miscalculation
'------------------------------------------------------------------------------
 ^b4412    Indexing miscalculation^b

     ^bExplanation:^b  This error occurs during indexing if there has been a
     miscalculation of how indexing should occur.

     ^bAction:^b  Some suggestions to resolve the problem are:

     1. Try increasing available conventional memory for indexing operation.

     2. Try indexing using a small test program.

     3. Test recreating the index with one more or one less database record.

     4. Test recreating the index with one more or one less byte in the key
        expression.

     5. Test adding CHR(0) to the key.

     6. Test with the E:0 parameter in the SET CLIPPER environment variable.

     ^bNote:^b  The LEN( CHR(0) ) is one byte, the LEN("") is 0 bytes.  Test
     with combinations of the above suggestions.

     ^bSee Also:^b  "The Runtime Environment" chapter of the Programming and
     Utilities Guide.
!seealso: 
'------------------------------------------------------------------------------



!short: 4414         Indexing miscalculation
'------------------------------------------------------------------------------
 ^b4414    Indexing miscalculation^b

     ^bExplanation:^b  This error occurs during indexing or sorting if there
     has been a miscalculation of how indexing should occur.  It will occur
     if the free conventional memory is insufficient to contain the .dbf
     record information.  It usually occurs when indexing or sorting long
     field length .dbf files because there is not enough memory to contain
     the information for the record.

     ^bAction:^b  Some suggestions to resolve the problem are:

     1. Increase available conventional memory for indexing or sorting
        operation.

     2. Try a protected mode version of application.

     ^bSee Also:^b  Error 4412.
!seealso: 
'------------------------------------------------------------------------------



!short: 4424         Temp file creation error
'------------------------------------------------------------------------------
 ^b4424    Temp file creation error^b

     ^bExplanation:^b  An error occurred when creating a temporary file for
     indexing or sorting.  This error can occur for several reasons:
     insufficient file handles, an invalid TEMPPATH or insufficient network
     rights for the directory where temporary files are created.  Note that
     temporary files are created in the current directory if no TEMPPATH is
     specified.

     ^bAction:^b  Correct the environment.  If insufficient network rights
     are the problem, either give the user the necessary rights, or redirect
     the temporary file to a more appropriate directory.  Check file
     ownership and network rights.

     ^bSee Also:^b  "The Runtime Environment" chapter of the Programming and
     Utilities Guide.
!seealso: 
'------------------------------------------------------------------------------



!short: 5302         Conventional memory exhausted
'------------------------------------------------------------------------------
 ^b5302    Conventional memory exhausted^b

     ^bExplanation:^b  This is an "out of memory" message that indicates that
     the CA-Clipper application no longer has sufficient conventional memory
     available to continue.

     Specifically, this error occurs when the virtual memory system attempts
     and fails to bring a VM segment into conventional memory that had been
     swapped out to disk or expanded memory.

     ^bAction:^b  Make more conventional memory available to the VM system.
     This may be done in several ways:

     1. Increase the amount of conventional memory available before running
        the application (by removing TSRs, making use of a 386 memory
        manager, etc.).

     2. Dynamically overlay C and ASM code.

     3. Ensure that any C or assembly language code in use is making use of
        the virtual memory system if it is doing dynamic memory allocation.
        Any memory allocated using the Fixed Memory Allocator functions
        (_xalloc() and _xgrab()) reduces the amount of conventional memory
        available if it is not immediately freed.

     ^bSee Also:^b  "VM API" chapter of the Technical Reference Guide.
!seealso: 
'------------------------------------------------------------------------------



!short: 5304         Conventional memory exhausted
'------------------------------------------------------------------------------
 ^b5304    Conventional memory exhausted^b

     ^bExplanation:^b  This is an "out of memory" message that indicates that
     the CA-Clipper application no longer has sufficient conventional memory
     available to continue.

     Specifically, this error occurs when a function attempts to allocate
     conventional memory and fails.  This error can be received as a result
     of the failure of _xgrab() in Extend System functions.

     ^bAction:^b  Make more conventional memory available to the VM system.
     This can be done in several ways:

     1. Increase the amount of conventional memory available before running
        the application (by removing TSRs, making use of a 386 memory
        manager, etc.).

     2. Dynamically overlay C and ASM code.

     3. Ensure that any C or assembly language code in use is making use of
        the virtual memory system if it is doing dynamic memory allocation.
        Any memory allocated using the Fixed Memory Allocator functions
        (_xalloc() and _xgrab()) reduces the amount of conventional memory
        available if it is not immediately freed.

     ^bSee Also:^b  Error 5302 in this chapter, "VM API" chapter of the
     Technical Reference Guide.
!seealso: 
'------------------------------------------------------------------------------



!short: 5305         VM Swap Space Exhausted
'------------------------------------------------------------------------------
 ^b5305    VM Swap Space Exhausted^b

     ^bExplanation:^b  There is insufficient room in the VM swap area in real
     memory to load virtualized data.

      ^bSee Also:^b  Error 5302 in this chapter, "VM API" chapter of the
      Technical Reference Guide.
!seealso: 
'------------------------------------------------------------------------------



!short: 5306         Conventional memory exhausted
'------------------------------------------------------------------------------
 ^b5306    Conventional memory exhausted^b

     ^bExplanation:^b  This is an "out of memory" message that indicates that
     the CA-Clipper application no longer has sufficient conventional memory
     available to continue.

     Specifically, this error occurs when the virtual memory system attempts
     and fails to bring a VM segment memory into conventional memory that has
     been swapped out to disk or expanded memory.

     ^bAction:^b  Make more conventional memory available to the VM system.
     This can be done in several ways:

     1. Increase the amount of conventional memory available before running
        the application (by removing TSRs, making use of a 386 memory
        manager, etc.).

     2. Dynamically overlay C and ASM code.

     3. Ensure that any C or assembly language code in use is making use of
        the virtual memory system if it is doing dynamic memory allocation.
        Any memory allocated using the Fixed Memory Allocator functions
        (_xalloc() and _xgrab()) reduces the amount of conventional memory
        available if it is not immediately freed.

     ^bSee Also:^b  Error 5302 in this chapter, "VM API" chapter of the
     Technical Reference Guide.
!seealso: 
'------------------------------------------------------------------------------



!short: 5311         VMM Unable to Create Swap File
'------------------------------------------------------------------------------
 ^b5311    VMM Unable to Create Swap File^b

     ^bExplanation:^b  The virtual memory (VM) subsystem is unable to create
     a swap file on disk.  This error occurs for several reasons:

     1. The target disk is full.

     2. The target directory is full.

     3. Insufficient file handles are available.

     4. An invalid path is specified in the SWAPPATH parameter of the CLIPPER
        environment variable, or on the command line used to start the
        application.

     5. The user has insufficient rights on a network drive to create the
        file.

     ^bSee Also:^b  "The Runtime Environment" chapter of the Programming and
     Utilities Guide.
!seealso: 
'------------------------------------------------------------------------------



!short: 5312         VM Swap File Overallocated
'------------------------------------------------------------------------------
 ^b5312    VM Swap File Overallocated^b

     ^bExplanation:^b  This is an "out of memory" message that indicates that
     the CA-Clipper application no longer has sufficient conventional memory
     available to continue.

     Specifically, this error occurs when the virtual memory system needs to
     swap a virtual memory segment out of conventional memory and it has used
     all expanded memory and disk space that has been made available to it.

     ^bAction:^b  Make more virtual memory available to the application.
     This can be done by making more expanded memory available by increasing
     the E setting of the CLIPPER environment variable, or by making more
     disk space available by increasing the SWAPK setting of the CLIPPER
     environment variable.

     This problem can also be resolved by reducing the size and/or number of
     strings and arrays that are active at any one time.  Probably the most
     common cause of this error is the declaration of extremely large arrays
     (e.g., LOCAL aArray[4096][4096]).  Note that every array element
     requires memory to store (even if its value is NIL), and that the number
     of array elements in an array is determined by multiplying the number of
     elements in every dimension and adding the sum of all dimensions except
     for the last.  For example, a 4096 by 4096 array has (4096 x 4096) +
     4096 or 16,781,312 elements.  As every array element in CA-Clipper
     requires 14 bytes, this amounts to 16,781,312 x 14 or 234,938,368 bytes-
     -well in excess of the theoretical capacity of the virtual memory
     system.

     ^bNote: ^b There is no benefit gained by reusing arrays.  CA-Clipper is
     much more efficient when strings and arrays are thrown away and rebuilt
     often rather than kept around unnecessarily for long periods.
!seealso: 
'------------------------------------------------------------------------------



!short: 5313         VMM Write Error on Swap File
'------------------------------------------------------------------------------
 ^b5313    VMM Write Error on Swap File^b

     ^bExplanation:^b  Write errors typically occur for one of the following
        reasons:

     1. Disk full.

     2. Bad sector encountered.

     3. The swap file was deleted by another process within a multitasking
        environment on a workstation in which the SHARE utility has not been
        loaded.

     ^bSee Also:^b  Error 5311 in this chapter, "The Runtime Environment"
     chapter of the Programming and Utilities Guide.
!seealso: 
'------------------------------------------------------------------------------



!short: 5320         VMM IAMBS Manager Error
'------------------------------------------------------------------------------
 ^b5320    VMM IAMBS Manager Error^b

     ^bExplanation:^b  An "out of memory" error has occurred because the VM
     system is unable to provide more memory, or it encountered an error.

     ^bAction:^b  Make more conventional memory available to the VM system
     and test with a clean environment after a cold boot.

     ^bSee Also:^b  Error 5302, "The Runtime Environment" chapter of the
     Programming and Utilities Guide.
!seealso: 
'------------------------------------------------------------------------------



!short: 5321         VMM system unable to free EMS page
'------------------------------------------------------------------------------
 ^b5321    VMM system unable to free EMS page^b

     ^bExplanation:^b  An error occurred during deallocating EMS page frames.

     ^bAction:^b  Some suggestions to resolve the problem are:

     1. use the SET CLIPPER = //BADCACHE and/or unload TSRs and device
        drivers from the upper memory area.

     2. Try a clean boot with a basic config.sys and autoexec.bat.  to find
        the conflict, add TSRs/device drivers back in until the problem
        recurs.

     ^bSee Also:^b  Error 5302 in this chapter, "The Runtime Environment"
     chapter of the Programming and Utilities Guide.
!seealso: 
'------------------------------------------------------------------------------



!short: 9001         Database RDD failed to load
'------------------------------------------------------------------------------
 ^b9001    Database RDD failed to load^b

     ^bExplanation:^b  The runtime system has failed to detect an RDD loaded
     in an application that requires one.

     ^bAction:^b  Refer to Actions and Notes under 999 and 1011.  Check third
     party .LIBraries for compatibility and version.  Check link script and
     order.  Look for missing RDD .LIBrary or .OBJ files.  The .EXE may be
     invalid.

     ^bSee Also:^b  "Linking" and "Debugger" chapters of the Programming and
     Utilities Guide.
!seealso: 
'------------------------------------------------------------------------------



!short: 9002         RDD invalid or not linked
'------------------------------------------------------------------------------
 ^b9002    RDD invalid or not linked^b

     ^bExplanation:^b  The runtime system has failed to detect a matching RDD
     loaded for the database and indices used in the application.

     ^bAction:^b  Make sure the database header is correct.  Recreate the
     indices.  Refer to Actions and Notes under 999 and 1011.  Check third
     party .LIBraries for compatibility and version.  Check link script and
     order.  Look for missing RDD .LIBrary or .OBJ files.  The .EXE may be
     invalid.

     ^bSee Also:^b  "Linking" and "Debugger" chapters of the Programming and
     Utilities Guide.
!seealso: 
'------------------------------------------------------------------------------



!short: 9005         Unable to load database table
'------------------------------------------------------------------------------
 ^b9005    Unable to load database table^b

     ^bExplanation:^b  The runtime system has failed to load the database
     table for use with an RDD, or the RDD failed to load or is unavailable.

     ^bAction:^b  Use a utility to test the database header integrity.  Refer
     to Actions and Notes under 999 and 1011.  Check third party .LIBrary
     compatibility and version.  Check link script and order.  Look for
     missing RDD .LIBrary or .OBJ files.  The .EXE may be invalid.

     ^bSee Also:^b  "Linking" and "Debugger" chapters of the Programming and
     Utilities Guide.
!seealso: 
'------------------------------------------------------------------------------



!short: 9006         DBFNTX RDD index buffer access error
'------------------------------------------------------------------------------
 ^b9006    DBFNTX RDD index buffer access error^b

     ^bExplanation:^b  The runtime system has failed to detect an RDD loaded
     in an application that requires one.

     ^bAction:^b  Check third party .LIBraries for compatibility and version.
     Check link script and order.  Look for missing RDD .LIBrary or .OBJ
     files.  The .EXE may be invalid.

     ^bSee Also:^b  Errors 999 and 1011 in this chapter, "Linking" and
     "Debugger" chapters of the Programming and Utilities Guide.
!seealso: 
'------------------------------------------------------------------------------



!short: 9999         Invalid .EXE caused by RDD unavailable at startup
'------------------------------------------------------------------------------
 ^b9999    Invalid .EXE caused by RDD unavailable at startup^b

     ^bExplanation:^b  The runtime system has failed to detect an RDD loaded
     in an application that requires one.

     ^bAction:^b  Check third party .LIBraries for compatibility and version.
     Check link script and order.  Look for missing RDD .LIBrary or .OBJ
     files.  The .EXE may be invalid.

     ^bSee Also:^b  Errors 999 and 1011 in this chapter, "Linking" and
     "Debugger" chapters of the Programming and Utilities Guide.
!seealso: 
'------------------------------------------------------------------------------



!short:              VM Integrity failure
'------------------------------------------------------------------------------
 ^bVM Integrity failure^b

     ^bExplanation:^b  This error indicates a misuse of the VM System has
     occurred by either an internal or external (third-party) subsystem.

     ^bAction:^b  Test the following suggestions to help eliminate the
     problem:

     1. Check for memory conflicts that could result in virtual memory
        corruption.

     2. Check for incorrect data type passed to the IAMBS (VMM) or a GET
        instance variable.

     3. Check third party .LIBraries for compatibility and version.

     4. Test using a simple .LNK script to create the .EXE.

     5. Resolve 100% of all warnings and errors occurring at link time.
        Link with VERBOSE while redirecting to an error output file.

     6. Attempt to extract a test without using built-in, add-on, or
        third party .LIBrary functions, and see if the error still occurs.

     7. Create a protected mode version of the application linking with
        MAP S, N, A.  Identify the runtime address reported by comparing it
        with the named module for the most closely matched address listed in
        the .MAP.

     ^bSee Also:^b  Error 999 and 5302, "Linking" and "Debugger" chapters of
     the Programming and Utilities Guide, "VM API" in the Technical Reference
     Guide.
!seealso: 
'------------------------------------------------------------------------------



