!short:                              ^A1E* CA-Clipper 5.xx *^A1B
'------------------------------------------------------------------------------

 ^BCA-Clipper 5.xx
ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

 To build the Clipper 5.xx demo program (RBckDemo.prg) :

 Compile with :

        ^BClipper RBckDemo /n^B

 Link with :
        ^A1FFor Clipper version 5.0x :^A1B

        ^BRTLink   FILE RBckDemo LIB RBck_C50^B
        - or -
        ^BBlinker  FILE RBckDemo LIB RBck_C50^B
        - or -
        ^BExoSpace FILE RBckDemo LIB RBck_C50,ExoSpace EXO PACK INT10^B

        ^A1FFor Clipper version 5.2x :^A1B

        ^BRTLink   FILE RBckDemo LIB RBck_C52^B
        - or -
        ^BBlinker  FILE RBckDemo LIB RBck_C52^B
        - or -
        ^BExoSpace FILE RBckDemo LIB RBck_C52,ExoSpace EXO PACK INT10^B

 ^B®^B
!seealso: 
'------------------------------------------------------------------------------



!short:^A1FÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^A1D
!short: R_BackUp()      Creates a COMPRESSED BACKUP on one or more diskettes
'------------------------------------------------------------------------------
 ^BR_BackUp()^B
 Creates a COMPRESSED BACKUP on one or more diskettes
ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

 ^BSyntax^B
        ^A1FnRetCode := R_Backup ( [ aSkeleton [, aExclude^A1B
                        ^A1F[, cDestDrv [, cFileName^A1B
                        ^A1F[, aBar^A1B
                        ^A1F[, lEscape [, lSilent [, bRBckBlk^A1B
                        ^A1F[, aMsg^A1B
                        ^A1F] ] ] ] ] ] ] ] ] )^A1B

 ^BArguments^B
        ^A1FaSkeleton^A1B       Array with FILE SKELETONS of files to backup
                                p.e. { '*.*' } or { '*.DBF', 'C:\DB\*.NTX' }

                        A skeleton may contain a DRIVE and/or a PATH and
                        the DOS wildcards '*' and '?'.

                        If NO DRIVE is included the DEFAULT DRIVE will be
                        assumed; if NO PATH is included the DEFAULT PATH
                        will be assumed.

                        Default : ^B{ '*.*' }^B
                                  ^B= ALL files on the current DRIVE and^B
                                  ^B  DIRECTORY^B
                        ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
        ^A1FaExclude^A1B        Array with FILE SKELETONS of files to EXCLUDE
                                from the backup
                                p.e. { '*.TMP' } or { '*.BAK', 'C:\DB\*.OBJ' }

                        A skeleton may contain a DRIVE and/or a PATH and
                        the DOS wildcards '*' and '?'.

                        If NO DRIVE is included the DEFAULT DRIVE will be
                        assumed; if NO PATH is included the DEFAULT PATH
                        will be assumed.

                        Default : ^BNIL = No exclusions^B
                                  Backup all files as specified by aSkeleton
                        ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
        ^A1FcDestDrv^A1B        DESTINATION DRIVE for backup : 'A:', 'B:', ....

                        Default : ^B'A:'^B
                        ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
        ^A1FcFileName^A1B       FILE NAME of the backup file(s) (w/o extension)

                        Notes   : - Maximal string length is 8 characters.

                                  - The EXTENSION of the backup file name is
                                    a SEQUENCE NUMBER ( '.000', '.001', ...)
                                    that is generated by RBackUp().

                        Default : ^B'@RBackUp'^B
                        ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
        ^A1FaBar[5]^A1B         Array containing the PROGRESS BAR definition
                        (The BAR_* constants are pre-defined in ^BRBckLib.ch^B)

                        ^A1FaBar[1]^A1B         LENGTH of the progress bar
                        ^A1FaBar[BAR_LEN]^A1B   Range   : 0 to MaxCol()
                                        Default : ^B0 = NO PROGRESS BAR^B

                        ^A1FaBar[2]^A1B         Screen ROW for the progress bar
                        ^A1FaBar[BAR_ROW]^A1B   Range   : 0 to MaxRow()
                                        Default : ^BCentered^B

                        ^A1FaBar[3]^A1B         Screen COLUMN for the progress bar
                        ^A1FaBar[BAR_COL]^A1B   Range   : 0 to MaxCol()-aBar[1]
                                        Default : ^BCentered^B

                        ^A1FaBar[4]^A1B         CHARACTER used for displaying the
                        ^A1FaBar[BAR_CHR]^A1B   progress bar
                                        Default : ^BÛ = Chr (219)^B

                        ^A1FaBar[5]^A1B         COLOR of the progress bar
                        ^A1FaBar[BAR_CLR]^A1B   (Clipper color string)
                                        Default : ^B'GR+/G' = Yellow on Green^B
                        ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
        ^A1FlEscape^A1B         .F.     : R_BackUp() can't be interrupted by the user
                        .T.     : R_BackUp() may be interrupted by pressing
                                  the <Esc>-key

                        Default : ^B.F. = <Esc>-key DISABLED^B
                        ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
        ^A1FlSilent^A1B         .T.     : No alert sounds
                        .F.     : Give a beep when displaying 'INSERT DISK'
                                  message

                        Default : ^B.F. = Give a beep^B
                        ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
        ^A1FbRBckBlk^A1B        CodeBlock that is evaluated once for each file, just
                        before it is added to the backup.

                        Notes   : - The CURRENT FILE NAME is passed to
                                    bRBckBlk (Format : d:\path\filename.ext)

                                  - bRBckBlk, when used, should return one of
                                    the following values :

                                    ^B0 = BU_ABORT^B
                                        Backup process will be ABORTED.
                                        In this case, R_Backup() returns
                                        the ^BBU_USER_ABORT^B return code

                                    ^B1 = BU_CONT^B
                                        Backup process will CONTINUE.

                                    (These constants are pre-defined in
                                     ^BRBckLib.CH^B)

                        Default : ^B{ || BU_CONT }^B
                        ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
        ^A1FaMsg[4]^A1B         Array containing definition of the 'INSERT NEXT DISK'
                        message.
                        (The MSG_* constants are pre-defined in ^BRBckLib.ch^B)

                        ^A1FaMsg[1]^A1B         ROW for displaying the 'INSERT NEXT
                        ^A1FaMsg[MSG_ROW]^A1B   DISK'-message
                                        Range   : 0 to MaxRow()
                                        Default : ^BCentered^B

                        ^A1FaMsg[2]^A1B         Screen COLUMN for displaying the
                        ^A1FaMsg[MSG_COL]^A1B   'INSERT NEXT DISK'-message
                                        Range   : 0 to MaxCol()-Len(aMsg[3])
                                        Default : ^BCentered^B

                        ^A1FaMsg[3]^A1B         'INSERT NEXT DISK'-message to display
                        ^A1FaMsg[MSG_TXT]^A1B   Message that will be displayed when
                                        the user has to insert the next
                                        backup disk.
                                        The DISK NUMBER is generated by
                                        R_BackUp().
                                        Insert '^BXXX^B' in the aMsg[3]-string
                                        on the position where the ^BDISK NUMBER^B
                                        should be substituted.
                                        P.e. :
                                        'Please insert disk #XXX into A:'
                                        On runtime the XXX will be replaced
                                        with the current disk number.
                                        Default :
                                        If lEscape = .T.
               ^B'Insert backup disk # XXX into drive d:  <ÄÙ=Okay, Esc=Cancel'^B
                                        If lEscape = .F.
               ^B'Insert backup disk # XXX into drive d:  Press <ÄÙ when ready'^B
                                        (For ^A1Fd:^A1B, the actual backup drive
                                        will be substituted)

                        ^A1FaMsg[4]^A1B         COLOR used to display the 'INSERT
                        ^A1FaMsg[MSG_CLR]^A1B   NEXT DISK'-message
                                        (Clipper color string)
                                        Default : ^B'W+*/B' = Blinking Bright^B
                                                            ^BWhite on Blue^B
                        ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

 ^BReturns^B
        ^A1FnRetCode^A1B        Return code

                        Possible return codes :

                         0 = BU_OKAY           No errors detected
                         1 = BU_INVALID_PARM   Invalid parameter(s) passed
                         2 = BU_OPEN_INPUT     Error opening  input  file
                         4 = BU_CREATE_OUTPUT  Error creating output file
                         5 = BU_READ_INPUT     Error reading  input  file
                         6 = BU_WRITE_OUTPUT   Error writing  output file
                         7 = BU_NO_FILES_FOUND No files found to backup
                         8 = BU_USER_ABORT     Function aborted by user
                         9 = BU_INVALID_DRIVE  Invalid backup drive/disk

                        See also the ^BErrorCodes^B-section in this guide.

 ^BDescription^B
        Creates a COMPRESSED backup of the specified files.

        ^RÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ·^R
        ^R³                        -+- ^B CAUTION ^B^R -+-                       º^R
        ^R³                                                                º^R
        ^R³   ^B ALL FILES IN THE ROOT DIRECTORY OF THE DESTINATION DISK ^B^R    º^R
        ^R³   ^B                     WILL BE DELETED !!                  ^B^R    º^R
        ^R³                                                                º^R
        ^RÔÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼^R

        ^A1FFeatures^A1B :
        - Compression of the files that are backed up
        - (Optional) progress bar display
        - Multiple disk backup
        - User-definable messages

        ^A1FNotes^A1B :
        - Make sure that the files to be backed up are closed :
          dbCloseAll (); dbCommitAll ()
        - Empty files ( = files with filesize = 0) are not backed up !

 ^BExample^B
        *-- Header file of RBckLib
        #include "RBckLib.CH"

        LOCAL   nRetCode                        && Return code R_BackUp()
        LOCAL   aBckError := BU_ERRMSG          && Array with error msgs

        *------------------------------------------------------------------
        * Files to be backed up : 1) 'C:\SYSTEM1\*.DBF'
        *                         2) '*.DBF' and '*.NTX' in the current
        *                            directory on the current drive
        * Exclude               : 'C:\SYSTEM1\TEST.DBF'
        * Destination drive     : 'B:'
        * Backup file name      : '@RBackUp' (default)
        * Progress bar          : Length    = 30
        *                         Row       = Centered (default)
        *                         Column    = Centered (default)
        *                         Character = '#'
        *                         Color     = 'GR+/R'
        * Interruptable         : lEscape   = .T.
        * CodeBlock for name    : { |fname| ShowName ( fname ) }
        * Insert disk message   : Row       = 24
        *                         Column    = Centered (default)
        *                         Msg Text  = Default message
        *                         Msg Color = 'W+*/B'  (default)
        *------------------------------------------------------------------
        nRetCode := ^BR_BackUp^B ( { 'C:\SYSTEM1\*.DBF', '*.DBF', '*.NTX' }, ;
                        { 'C:\SYSTEM1\TEST.DBF' }, ;
                        'B:', nil, { 30, nil, nil, '#', 'GR+/R' }, ;
                        .T., nil, { |fname| ShowName ( fname ) }, ;
                        { 24, nil, nil, nil } )

        IF nRetCode != BU_OKAY
                *-- Oops, error while backupping ...

                *-- Display the error message text
                ALERT ( 'Backup error : ' + aBckError [ nRetCode ] )
        ENDIF

        *-- Continuation of the program
        [...]

        QUIT

        *------------------------------------------------------------------
        * Display the name of the file being backed up
        *------------------------------------------------------------------
        FUNCTION ShowName ( cFileName )

        DevPos ( 14, 0 )
        DevOut ( 'Processing : ' + PadR ( cFileName, 40 ) )

        RETURN  BU_CONT                 && Continue backup

        More examples can be found in the demo program ^BRBckDemo.PRG^B.

 ^BCaution^B

        ^RÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ·^R
        ^R³                         -+- CAUTION -+-                        º^R
        ^R³                                                                º^R
        ^R³     IN THE UN-REGISTERED  VERSION OF RBCKLIB THE FOLLOWING     º^R
        ^R³     REGISTRATION MESSAGE WILL BE DISPLAYED AT RANDOM TIMES     º^R
        ^R³          (WHILE EXECUTING THE R_BackUp() FUNCTION) :           º^R
        ^R³                                                                º^R
        ^R³ ^BUN-Registered version of RBckLib -+- Please wait for 9 seconds^B^R º^R
        ^R³                                                                º^R
        ^R³       AFTER A 9 SECONDS DELAY THE PROGRAM WILL CONTINUE.       º^R
        ^RÔÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼^R

 ^B®^B
!seealso: "R_Restore()" "R_BckList()" rbck_003.ngo:"ErrorCodes" rbck_004.ngo:"Registration" 
'------------------------------------------------------------------------------



!short: R_Restore()     Restores files backed up by the R_BackUp()-function
'------------------------------------------------------------------------------
 ^BR_Restore()^B
 Restores files backed up by the R_BackUp()-function
ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

 ^BSyntax^B
        ^A1FnRetCode := R_Restore ( [ cSrcDrv [, aMask [, cDestSpec^A1B
                        ^A1F[, cFileName^A1B
                        ^A1F[, aBar^A1B
                        ^A1F[, lEscape [, lSilent [, bRBckBlk^A1B
                        ^A1F[, aMsg^A1B
                        ^A1F[, bConfirm^A1B
                        ^A1F] ] ] ] ] ] ] ] ] )^A1B

 ^BArguments^B
        ^A1FcSrcDrv^A1B         Source drive for restore : 'A:', 'B:', ....

                        Default : ^B'A:'^B
                        ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
        ^A1FaMask^A1B           ARRAY with file masks of files to restore
                                p.e. { '*.FRM' } or { '*.DBF', '*.NTX' }

                        A mask may contain the DOS wildcards '*' and '?';
                        DRIVES and/or DIRECTORIES are NOT allowed ...

                        Default : ^B{ '*.*' } (= ALL files in the backup-set)^B
                        ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
        ^A1FcDestSpec^A1B       Destination specification (DRIVE and/or DIRECTORY)
                                p.e. 'C:\TEMPDIR'

                        Notes   : - The specification may NOT contain
                                    FILE NAMES (nor extensions)

                                  - If NO (or an EMPTY) DESTINATION
                                    SPECIFICATION is passed, the files will
                                    be restored to the drive and directory
                                    from which they were backed up (the path
                                    names are stored in the backup-set)

                                  - If no DRIVE is passed, the default drive
                                    will be assumed.

                                  - If no DIRECTORY is passed, the default
                                    directory will be assumed.

                                  - If the TARGET DIRECTORY doesn't exist
                                    it will be CREATED !

                        Default : ^BThe DRIVE and DIRECTORY from which^B
                                  ^Bthe files originally were backed up
                        ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
        ^A1FcFileName^A1B       File name of the backup file to be used for restore
                        (w/o extension)

                        Notes   : - Maximal string length is 8 characters.
                                  - The extension of the backup file name is
                                    a sequence number ( '.000', '.001', ...)
                                    that is generated by RBackUp().

                        Default : ^B'@RBackUp'^B
                        ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
        ^A1FaBar[5]^A1B         Array containing the PROGRESS BAR definition
                        (The BAR_* constants are pre-defined in ^BRBckLib.ch^B)

                        ^A1FaBar[1]^A1B         LENGTH of the progress bar
                        ^A1FaBar[BAR_LEN]^A1B   Range   : 0 to MaxCol()
                                        Default : ^B0 = NO PROGRESS BAR^B

                        ^A1FaBar[2]^A1B         Screen ROW for the progress bar
                        ^A1FaBar[BAR_ROW]^A1B   Range   : 0 to MaxRow()
                                        Default : ^BCentered^B

                        ^A1FaBar[3]^A1B         Screen COLUMN for the progress bar
                        ^A1FaBar[BAR_COL]^A1B   Range   : 0 to MaxCol()-aBar[1]
                                        Default : ^BCentered^B

                        ^A1FaBar[4]^A1B         CHARACTER used for displaying the
                        ^A1FaBar[BAR_CHR]^A1B   progress bar
                                        Default : ^BÛ = Chr (219)^B

                        ^A1FaBar[5]^A1B         COLOR of the progress bar
                        ^A1FaBar[BAR_CLR]^A1B   (Clipper color string)
                                        Default : ^B'GR+/G' = Yellow on Green^B
                        ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
        ^A1FlEscape^A1B         .F.     : R_Restore() can't be interrupted
                        .T.     : R_Restore() may be interrupted by pressing
                                  the <Esc>-key

                        Default : ^B.F. = <Esc>-key DISABLED^B
                        ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
        ^A1FlSilent^A1B         .T.     : No alert sounds
                        .F.     : Give a beep when displaying 'INSERT DISK'
                                  message

                        Default : ^B.F. = Give a beep^B
                        ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
        ^A1FbRBckBlk^A1B        CodeBlock that is evaluated once for each file, just
                        before it is extracted from the backup-set.

                        Notes   : - The CURRENT FILE NAME is passed to
                                    bRBckBlk (Format : d:\path\filename.ext)

                                  - bRBckBlk, when used, should return one of
                                    the following values :

                                    ^B0 = BU_ABORT^B
                                        Restore process will be ABORTED.
                                        In this case, R_Restore() returns
                                        the ^BBU_USER_ABORT^B return code

                                    ^B1 = BU_CONT^B
                                        Restore process will CONTINUE.

                                    (These constants are pre-defined in
                                     ^BRBckLib.CH^B)

                        Default : ^B{ || BU_CONT }^B
                        ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
        ^A1FaMsg[4]^A1B         Array containing definition of the 'INSERT NEXT DISK'
                        message.
                        (The MSG_* constants are pre-defined in ^BRBckLib.ch^B)

                        ^A1FaMsg[1]^A1B         ROW for displaying the 'INSERT NEXT
                        ^A1FaMsg[MSG_ROW]^A1B   DISK'-message
                                        Range   : 0 to MaxRow()
                                        Default : ^BCentered^B

                        ^A1FaMsg[2]^A1B         Screen COLUMN for displaying the
                        ^A1FaMsg[MSG_COL]^A1B   'INSERT NEXT DISK'-message
                                        Range   : 0 to MaxCol()-Len(aMsg[3])
                                        Default : ^BCentered^B

                        ^A1FaMsg[3]^A1B         'INSERT NEXT DISK'-message to display
                        ^A1FaMsg[MSG_TXT]^A1B   Message that will be displayed when
                                        the user has to insert the next
                                        backup disk.
                                        The DISK NUMBER is generated by
                                        R_Restore().
                                        Insert '^BXXX^B' in the aMsg[3]-string
                                        on the position where the ^BDISK NUMBER^B
                                        should be substituted.
                                        P.e. :
                                        'Please insert disk #XXX into A:'
                                        On runtime the XXX will be replaced
                                        with the current disk number.
                                        Default :
                                        If lEscape = .T.
               ^B'Insert backup disk # XXX into drive d:  <ÄÙ=Okay, Esc=Cancel'^B
                                        If lEscape = .F.
               ^B'Insert backup disk # XXX into drive d:  Press <ÄÙ when ready'^B
                                        (For ^A1Fd:^A1B, the actual backup drive
                                        will be substituted)

                        ^A1FaMsg[4]^A1B         COLOR used to display the 'INSERT
                        ^A1FaMsg[MSG_CLR]^A1B   NEXT DISK'-message
                                        (Clipper color string)
                                        Default : ^B'W+*/B' = Blinking Bright^B
                                                            ^BWhite on Blue^B
                        ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
        ^A1FbConfirm^A1B        CodeBlock that is evaluated if the file to be
                        extracted already exists on the restore location
                        (cDestSpec or original drive\path)

                        Notes   : - The file name of the file that might be
                                    overwritten is passed to bConfirm.

                                  - bConfirm, when used, should return one of
                                    the following values :
                                    ^B0 = BU_ABORT
                                          R_Restore() will be aborted
                                          In this case, R_Restore() returns
                                          the ^BBU_USER_ABORT^B return code

                                    ^B2 = BU_SKIPFILE^B
                                          File will NOT be restored.

                                    ^B3 = BU_OVERWRITE^B
                                          Existing file will be OVERWRITTEN.

                                    (These constants are pre-defined in
                                     ^BRBckLib.CH^B)

                        Default : ^B{ || BU_OVERWRITE }^B
                        ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

 ^BReturns^B
        ^A1FnRetCode^A1B        Return code

                        Possible return codes :

                         0 = BU_OKAY           No errors detected
                         1 = BU_INVALID_PARM   Invalid parameter(s) passed
                         2 = BU_OPEN_INPUT     Error opening  input  file
                         3 = BU_WRONG_VERSION  Wrong version of RBckLib
                         4 = BU_CREATE_OUTPUT  Error creating output file
                         5 = BU_READ_INPUT     Error reading  input  file
                         6 = BU_WRITE_OUTPUT   Error writing  output file
                         8 = BU_USER_ABORT     Backup aborted by user
                         9 = BU_INVALID_DRIVE  Invalid backup drive/disk
                        10 = BU_INVALID_DIR    Invalid restore directory

                        See also the ^BErrorCodes^B-section in this guide.

 ^BDescription^B
        Restores one or more files from a backup-set, created by the
        R_BackUp()-function.

        ^A1FNotes^A1B :
        - Make sure that the files to be restored are closed :
          dbCloseAll (); dbCommitAll ()

        - If you included a copy of the running .EXE file in the backup-set,
          it is not possible to restore the file to it's original location
          (the running copy is opened ...).
          The only way to extract the file is to another location.
          (Use the cDestSpec parameter)

 ^BExample^B
        *-- Header file of RBckLib
        #include "RBckLib.CH"

        LOCAL   nRetCode                        && Return code R_Restore()
        LOCAL   aBckError := BU_ERRMSG          && Array with error msgs

        *------------------------------------------------------------------
        * Source drive          : 'A:'
        * Files to restore      : '*.DBF' and '*.NTX'
        * Destination           : Extract to original location (default)
        * Backup file name      : '@RBackUp' (default)
        * Progress bar          : Length    = 50
        *                         Row       = 22
        *                         Column    = Centered (default)
        *                         Character = Chr (177) (±)
        *                         Color     = 'GR+/B'
        * Interruptable         : Not interruptable (default)
        * CodeBlock for name    : { |fname| ShowName ( fname ) }
        * Insert disk message   : Row       = 24
        *                         Column    = Centered (default)
        *                         Msg Text  = New message
        *                         Msg Color = 'GR+/B'
        * Confirmation CodeBlock: { |fname| Confirm ( fname ) }
        *------------------------------------------------------------------
        nRetCode := ^BR_Restore^B ( 'A:', { '*.DBF', '*.NTX' }, nil,  nil, ;
                        { 50, 22, nil, Chr (177), 'GR+/B' }, ;
                        nil, { |fname| ShowName ( fname ) }, ;
                        { 24, nil, 'Insert disk XXX into drive A:','GR+/B' }, ;
                        { |fname| Confirm ( fname ) } )

        IF nRetCode != BU_OKAY
                *-- Oops, error while restoring ...

                *-- Display the error message text
                ALERT ( 'Restore error : ' + aBckError [ nRetCode ] )
        ENDIF

        *-- Continuation of the program
        [...]

        QUIT

        *------------------------------------------------------------------
        * Display the name of the file being backed up
        *------------------------------------------------------------------
        STATIC FUNCTION ShowName ( cFileName )

        DevPos ( 14, 0 )
        DevOut ( 'Processing : ' + PadR ( cFileName, 40 ) )

        RETURN  BU_CONT                 && Continue backup

        *------------------------------------------------------------------
        * User confirmation for overwriting an existing file
        *------------------------------------------------------------------
        STATIC FUNCTION Confirm ( cFileName )

        LOCAL   nChoice := Alert ( 'File ' + cFileName + ' exists !', ;
                                    { 'Skip file', 'Overwrite', 'Abort' } )
        DO CASE
        CASE nChoice = 1
                *-- Don't overwrite file !
                RETURN BU_SKIPFILE
        CASE nChoice = 2
                *-- Overwrite file !
                RETURN BU_OVERWRITE
        ENDCASE

        RETURN BU_ABORT         && nChoice = 3 : ABORT R_Restore()

        More examples can be found in the demo program ^BRBckDemo.PRG^B.

 ^BCaution^B

        ^RÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ·^R
        ^R³                         -+- CAUTION -+-                        º^R
        ^R³                                                                º^R
        ^R³     IN THE UN-REGISTERED  VERSION OF RBCKLIB THE FOLLOWING     º^R
        ^R³     REGISTRATION MESSAGE WILL BE DISPLAYED AT RANDOM TIMES     º^R
        ^R³          (WHILE EXECUTING THE R_Restore() FUNCTION) :          º^R
        ^R³                                                                º^R
        ^R³ ^BUN-Registered version of RBckLib -+- Please wait for 9 seconds^B^R º^R
        ^R³                                                                º^R
        ^R³       AFTER A 9 SECONDS DELAY THE PROGRAM WILL CONTINUE.       º^R
        ^RÔÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼^R

 ^B®^B
!seealso: "R_BackUp()" "R_BckList()" rbck_003.ngo:"ErrorCodes" rbck_004.ngo:"Registration" 
'------------------------------------------------------------------------------



!short: R_BckList()     Gets the contents of a backup-set into an array
'------------------------------------------------------------------------------
 ^BR_BckList()^B
 Gets the contents of a backup-set into an array
ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

 ^BSyntax^B
        ^A1FanBckList := R_BckList ( [ cSrcDrv [, cFileName [, lEscape^A1B
                         ^A1F[, lSilent [, aMsg ] ] ] ] ] )^A1B

 ^BArguments^B
        ^A1FcSrcDrv^A1B         Source drive for backup-set : 'A:', 'B:', ....

                        Default : ^B'A:'^B
                        ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
        ^A1FcFileName^A1B       FILE NAME of the backup file(s) (w/o extension)

                        Notes   : - Maximal string length is 8 characters.

                                  - The EXTENSION of the backup file name is
                                    a SEQUENCE NUMBER ( '.000', '.001', ...)
                                    that is generated by RBackUp().

                        Default : ^B'@RBackUp'^B
                        ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
        ^A1FlEscape^A1B         .F.     : R_BckList() can't be interrupted
                        .T.     : R_BckList() may be interrupted by pressing
                                  the <Esc>-key

                        Default : ^B.F. = <Esc>-key DISABLED^B
                        ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
        ^A1FlSilent^A1B         .T.     : No alert sounds
                        .F.     : Give a beep when displaying 'INSERT DISK'
                                  message

                        Default : ^B.F. = Give a beep^B
                        ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
        ^A1FaMsg[4]^A1B         Array containing definition of the 'INSERT NEXT DISK'
                        message.
                        (The MSG_* constants are pre-defined in ^BRBckLib.ch^B)

                        ^A1FaMsg[1]^A1B         ROW for displaying the 'INSERT NEXT
                        ^A1FaMsg[MSG_ROW]^A1B   DISK'-message
                                        Range   : 0 to MaxRow()
                                        Default : ^BCentered^B

                        ^A1FaMsg[2]^A1B         Screen COLUMN for displaying the
                        ^A1FaMsg[MSG_COL]^A1B   'INSERT NEXT DISK'-message
                                        Range   : 0 to MaxCol()-Len(aMsg[3])
                                        Default : ^BCentered^B

                        ^A1FaMsg[3]^A1B         'INSERT NEXT DISK'-message to display
                        ^A1FaMsg[MSG_TXT]^A1B   Message that will be displayed when
                                        the user has to insert the next
                                        backup disk.
                                        The DISK NUMBER is generated by
                                        R_BackUp().
                                        Insert '^BXXX^B' in the aMsg[3]-string
                                        on the position where the ^BDISK NUMBER^B
                                        should be substituted.
                                        P.e. :
                                        'Please insert disk #XXX into A:'
                                        On runtime the XXX will be replaced
                                        with the current disk number.
                                        Default :
                                        If lEscape = .T.
               ^B'Insert backup disk # XXX into drive d:  <ÄÙ=Okay, Esc=Cancel'^B
                                        If lEscape = .F.
               ^B'Insert backup disk # XXX into drive d:  Press <ÄÙ when ready'^B
                                        (For ^A1Fd:^A1B, the actual backup drive
                                        will be substituted)

                        ^A1FaMsg[4]^A1B         COLOR used to display the 'INSERT
                        ^A1FaMsg[MSG_CLR]^A1B   NEXT DISK'-message
                                        (Clipper color string)
                                        Default : ^B'W+*/B' = Blinking Bright^B
                                                            ^BWhite on Blue^B
                        ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

 ^BReturns^B
        ^A1FanBckList^A1B       Array or numeric return code

                        If an error is detected anBckList contains a numeric
                        error code otherwise anBckList is an array containing
                        information on the files in the backup-set.

                        ^BanBckList^B Subarray Structure
                        ^BÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^B
                         Pos Symbol    Type   Description
                        ^BÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^B
                          1  BU_FNAME  Char   Original file name
                          2  BU_FSIZE  Number Original file size
                          3  BU_FDATE  Char   Original file date
                                              The format depends on the
                                              current SET DATE format
                          4  BU_FTIME  Char   Original file time (hh:mm)
                          5  BU_ANAME  Char   Name of the backup file in
                                              which the current file starts
                        ^BÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ^B

                        Possible error codes :

                         1 = BU_INVALID_PARM   Invalid parameter(s) passed
                         2 = BU_OPEN_INPUT     Error opening  input  file
                         3 = BU_WRONG_VERSION  Wrong version of RBckLib
                         5 = BU_READ_INPUT     Error reading  input  file
                         8 = BU_USER_ABORT     Backup aborted by user
                         9 = BU_INVALID_DRIVE  Invalid backup drive/disk

                        See also the ^BErrorCodes^B-section in this guide.

 ^BDescription^B
        R_BckList fills an array with information on the files in a specified
        backup-set.

 ^BExample^B
        *-- Header file of RBckLib
        #include "RBckLib.CH"

        LOCAL   anBckList := {}
        LOCAL   aBckError := BU_ERRMSG          && Array with error msgs
        LOCAL   nFiles

        anBckList := ^BR_BckList^B ( 'A:', nil, .T., .F., { 23, nil, nil, nil } )

        IF ValType ( anBckList ) = 'N'
                *-- Error detected : display error message

                Alert ( 'R_BckList error : ' + aBckError [ anBckList ] )

        ELSE
                *-- NO error detected : anBckList contains the info
                DevPos ( 3, 5 )
                *-- Header line
                DevOut ( '    Filespec                       Size ' + ;
                        'Date       Time  BackUp-file  ' )
                nFiles := 0

                *-- Display contents of the file-info array
                AEval ( anBckList, ;
                        { |x| DevPos ( Row()+1, 5 ), ;
                                DevOut ( ;
                                Str ( ++nFiles, 3 ) + ' ' + ;
                                PadR ( x [BU_FNAME], 26) + ' ' + ;
                                Str ( x [BU_FSIZE], 8 ) + ' ' + ;
                                x [BU_FDATE] + ' ' + ;
                                x [BU_FTIME] + ' ' + ;
                                PadR ( x [BU_ANAME], 12 ) + ' ' ) } )
        ENDIF

        More examples can be found in the demo program ^BRBckDemo.PRG^B.

 ^BCaution^B

        ^RÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ·^R
        ^R³                         -+- CAUTION -+-                        º^R
        ^R³                                                                º^R
        ^R³     IN THE UN-REGISTERED  VERSION OF RBCKLIB THE FOLLOWING     º^R
        ^R³     REGISTRATION MESSAGE WILL BE DISPLAYED AT RANDOM TIMES     º^R
        ^R³          (WHILE EXECUTING THE R_BckList() FUNCTION) :          º^R
        ^R³                                                                º^R
        ^R³ ^BUN-Registered version of RBckLib -+- Please wait for 9 seconds^B^R º^R
        ^R³                                                                º^R
        ^R³       AFTER A 9 SECONDS DELAY THE PROGRAM WILL CONTINUE.       º^R
        ^RÔÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼^R

 ^B®^B
!seealso: "R_BackUp()" "R_Restore()" rbck_003.ngo:"ErrorCodes" rbck_004.ngo:"Registration" 
'------------------------------------------------------------------------------



!short:
!short:        ^A4F                                                              ^A1B
!short:        ^A4F  T H E   C A - C L I P P E R    B A C K U P   L I B R A R Y  ^A1B
!short:        ^A4F                                                              ^A1B
!short:        ^A3FÛÛÛÛßßßßßßßÛÛßßßßßßßÛÛÛÛÛÛÛÛÛÛÛßÛÛÛÛÛßÛÛßÛÛÛÛÛÛÛÛßßÛÛßÛÛÛÛÛÛÛÛ^A3F
!short:        ^A3FÛÛÛ^A1BÛÛÛÛÛÛÛ^A73Û^A3FÛ^A1BÛÛÛÛÛÛÛ^A73Û^A3FÛÛÛÛÛÛÛÛÛÛ^A1BÛ^A73Û^A3FÛÛÛÛ^A1BÛ^A3FÜÛ^A1BÛ^A73Û^A3FÛÛÛÛÛÛÛ^A1BÛÛ^A3FÜÛ^A1BÛ^A73Û^A3FÛÛÛÛÛÛÛÛ^A3F
!short:        ^A3FÛÛÛ^A1BÛ^A73Û^A3Fßßßß^A1BÛ^A73Û^A3FÛ^A1BÛ^A73Û^A3Fßßßß^A1BÛ^A3FÜÛÛßßßßßßßÛ^A1BÛ^A73Û^A3Fßßß^A1BÛ^A3FÜÛÛ^A1BÛ^A73Û^A3FÛÛÛÛÛÛÛÛßßÛ^A1BÛ^A73Û^A3FßßßßßßÛÛ^A3F
!short:        ^A3FÛÛÛ^A1BÛÛÛÛÛÛÛ^A3FÜÛ^A1BÛÛÛÛÛÛ^A3FÜßÛ^A1BÛÛÛÛÛÛÛ^A3FÜÛ^A1BÛÛÛÛÛ^A3FÜßÛÛ^A1BÛ^A73Û^A3FÛÛÛÛÛÛÛ^A1BÛÛ^A73Û^A3FÛ^A1BÛÛÛÛÛÛÛ^A73Û^A3FÛÛ^A3F
!short:        ^A3FÛÛÛ^A1BÛ^A73Û^A3FÛÛÛ^A1BÛ^A3FÜßÛ^A1BÛ^A73Û^A3Fßßßß^A1BÛ^A73Û^A3FÛ^A1BÛ^A73Û^A3FßßßßßßÛ^A1BÛ^A73Û^A3FÛÛÛ^A1BÛ^A3FÜßÛ^A1BÛ^A73Û^A3FßßßßßßÛ^A1BÛÛ^A73Û^A3FÛ^A1BÛ^A73Û^A3Fßßßß^A1BÛ^A73Û^A3FÛÛ^A3F
!short:        ^A3FÛÛÛ^A1BÛ^A73^A3FÜÛÛÛÛ^A1BÛ^A3FÜÛ^A1BÛÛÛÛÛÛÛ^A3FÜÛ^A1BÛÛÛÛÛÛÛ^A3FÜÛ^A1BÛ^A3FÜÛÛÛÛ^A1BÛ^A3FÜÛ^A1BÛÛÛÛÛÛÛ^A3FÜÛ^A1BÛÛ^A3FÜÛ^A1BÛÛÛÛÛÛÛ^A3FÜÛÛ^A3F
!short:        ^A3FÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ^A1B
!short:        ^A79ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ^A1B
!short:        ^A79ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ RvG Clipper Collection ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ^A1B
!short:        ^A79ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ^A1B
!short:
!short: ^A1E18/01/95  RBckLib v1.0d (c) 1995 Rolf van Gelder, Eindhoven, The Netherlands^A1B
