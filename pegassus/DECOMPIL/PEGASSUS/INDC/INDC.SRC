#include "common.ch"
#include "inkey.ch"

********************************
procedure INDC

   set default to D:\PEGASSUS\ESTADO\
   use EST03
   index on STR(NRO_MODULO,2)+STR(NRO_RUTINA,3) to NUMMOD3
   use EST04
   index on STR(NRO_MODULO,2)+STR(NRO_RUTINA,3)+STR(NRO_SUBMEN,3) to ;
      NUMMOD4

********************************
init procedure CLIPINIT

   public getlist:= {}
   errorsys()
   return

********************************
procedure SYSINIT

   return

********************************
procedure ERRORSYS

   errorblock({|_1| deferror(_1)})
   return

********************************
static function DEFERROR(Arg1)

   local Local1, Local2, Local3, Local4
   if (Arg1:gencode() == 5)
      return 0
   endif
   if (Arg1:gencode() == 21 .AND. Arg1:oscode() == 32 .AND. ;
         Arg1:candefault())
      neterr(.T.)
      return .F.
   endif
   if (Arg1:gencode() == 40 .AND. Arg1:candefault())
      neterr(.T.)
      return .F.
   endif
   Local2:= errormessa(Arg1)
   Local3:= {"Quit"}
   if (Arg1:canretry())
      AAdd(Local3, "Retry")
   endif
   if (Arg1:candefault())
      AAdd(Local3, "Default")
   endif
   Local4:= 0
   do while (Local4 == 0)
      if (Empty(Arg1:oscode()))
         Local4:= alert(Local2, Local3)
      else
         Local4:= alert(Local2 + ";(DOS Error " + ;
            LTrim(Str(Arg1:oscode())) + ")", Local3)
      endif
      if (ISNIL(Local4))
         exit
      endif
   enddo
   if (!Empty(Local4))
      if (Local3[Local4] == "Break")
         break(Arg1)
      elseif (Local3[Local4] == "Retry")
         return .T.
      elseif (Local3[Local4] == "Default")
         return .F.
      endif
   endif
   if (!Empty(Arg1:oscode()))
      Local2:= Local2 + (" (DOS Error " + LTrim(Str(Arg1:oscode())) ;
         + ") ")
   endif
   outerr(Chr(13) + Chr(10))
   outerr(Local2)
   Local1:= 2
   do while (!Empty(procname(Local1)))
      outerr(Chr(13) + Chr(10))
      outerr("Called from", Trim(procname(Local1)) + "(" + ;
         LTrim(Str(procline(Local1))) + ")  ")
      Local1++
   enddo
   errorlevel(1)
   quit
   return .F.

********************************
function _DTXCONDSE(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, ;
   Arg9, Arg10, Arg11)

   return ordcondset(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg8, Arg9, ;
      Arg10, Arg11)

********************************
function DBCREATEIN(Arg1, Arg2, Arg3, Arg4, Arg5)

   ordcreate(Arg1, Arg5, Arg2, Arg3, Arg4)
   return Nil

********************************
function DBSETINDEX(Arg1)

   ordListAdd(Arg1)
   return Nil

********************************
function DBCLEARIND

   return ordListClear()

********************************
function DBREINDEX

   return ordListRebuild()

********************************
function INDEXEXT

   return ordbagext()

********************************
static function ERRORMESSA(Arg1)

   local Local1
   Local1:= iif(Arg1:severity() > 1, "Error ", "Warning ")
   if (ISCHARACTER(Arg1:subsystem()))
      Local1:= Local1 + Arg1:subsystem()
   else
      Local1:= Local1 + "???"
   endif
   if (ISNUMBER(Arg1:subcode()))
      Local1:= Local1 + ("/" + LTrim(Str(Arg1:subcode())))
   else
      Local1:= Local1 + "/???"
   endif
   if (ISCHARACTER(Arg1:descriptio()))
      Local1:= Local1 + ("  " + Arg1:descriptio())
   endif
   if (!Empty(Arg1:filename()))
      Local1:= Local1 + (": " + Arg1:filename())
   elseif (!Empty(Arg1:operation()))
      Local1:= Local1 + (": " + Arg1:operation())
   endif
   return Local1

********************************
function DBSETORDER(Arg1)

   if (ISCHARACTER(Arg1) .AND. !Empty(Val(Arg1)))
      Arg1:= Val(Arg1)
   endif
   set order to Arg1
   return Nil

********************************
function INDEXORD

   return ordnumber(ordSetFocus())

********************************
function INDEXKEY(Arg1)

   return ordkey(Arg1)

********************************
init procedure RDDINIT

   rddsetdefa("DBFNTX")
   return

********************************
procedure RDDSYS

   return

********************************
init procedure INITHANDL

   local Local1
   Local1:= errorblock({|_1| lockerrhan(_1, Local1)})
   return

********************************
static function LOCKERRHAN(Arg1, Arg2)

   if (Arg1:gencode() == 41)
      return .T.
   endif
   return eval(Arg2, Arg1)

********************************
procedure _NTXERR

   return

********************************
init procedure DBFNTXINI

   rddregiste("DBFNTX", 1)
   return

********************************
procedure DBFNTX

   return

********************************
init procedure DBFINIT

   rddregiste("DBF", 1)
   return

********************************
procedure DBFONLY

   return

* EOF
